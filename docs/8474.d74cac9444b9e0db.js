(self.webpackChunkapp=self.webpackChunkapp||[]).push([[8474],{6862:st=>{st.exports=j;var je=null;try{je=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch{}function j(Y,R,me){this.low=0|Y,this.high=0|R,this.unsigned=!!me}function Fe(Y){return!0===(Y&&Y.__isLong__)}Object.defineProperty(j.prototype,"__isLong__",{value:!0}),j.isLong=Fe;var Vt={},Oe={};function wt(Y,R){var me,De,tt;return R?(tt=0<=(Y>>>=0)&&Y<256)&&(De=Oe[Y])?De:(me=Ee(Y,(0|Y)<0?-1:0,!0),tt&&(Oe[Y]=me),me):(tt=-128<=(Y|=0)&&Y<128)&&(De=Vt[Y])?De:(me=Ee(Y,Y<0?-1:0,!1),tt&&(Vt[Y]=me),me)}function Ue(Y,R){if(isNaN(Y))return R?Ut:at;if(R){if(Y<0)return Ut;if(Y>=ie)return rt}else{if(Y<=-be)return ot;if(Y+1>=be)return Xe}return Y<0?Ue(-Y,R).neg():Ee(Y%J|0,Y/J|0,R)}function Ee(Y,R,me){return new j(Y,R,me)}j.fromInt=wt,j.fromNumber=Ue,j.fromBits=Ee;var Me=Math.pow;function ye(Y,R,me){if(0===Y.length)throw Error("empty string");if("NaN"===Y||"Infinity"===Y||"+Infinity"===Y||"-Infinity"===Y)return at;if("number"==typeof R?(me=R,R=!1):R=!!R,(me=me||10)<2||36<me)throw RangeError("radix");var De;if((De=Y.indexOf("-"))>0)throw Error("interior hyphen");if(0===De)return ye(Y.substring(1),R,me).neg();for(var tt=Ue(Me(me,8)),Ke=at,ge=0;ge<Y.length;ge+=8){var q=Math.min(8,Y.length-ge),Wt=parseInt(Y.substring(ge,ge+q),me);if(q<8){var rn=Ue(Me(me,q));Ke=Ke.mul(rn).add(Ue(Wt))}else Ke=(Ke=Ke.mul(tt)).add(Ue(Wt))}return Ke.unsigned=R,Ke}function G(Y,R){return"number"==typeof Y?Ue(Y,R):"string"==typeof Y?ye(Y,R):Ee(Y.low,Y.high,"boolean"==typeof R?R:Y.unsigned)}j.fromString=ye,j.fromValue=G;var J=4294967296,ie=J*J,be=ie/2,ve=wt(1<<24),at=wt(0);j.ZERO=at;var Ut=wt(0,!0);j.UZERO=Ut;var Bt=wt(1);j.ONE=Bt;var ts=wt(1,!0);j.UONE=ts;var Vn=wt(-1);j.NEG_ONE=Vn;var Xe=Ee(-1,2147483647,!1);j.MAX_VALUE=Xe;var rt=Ee(-1,-1,!0);j.MAX_UNSIGNED_VALUE=rt;var ot=Ee(0,-2147483648,!1);j.MIN_VALUE=ot;var re=j.prototype;re.toInt=function(){return this.unsigned?this.low>>>0:this.low},re.toNumber=function(){return this.unsigned?(this.high>>>0)*J+(this.low>>>0):this.high*J+(this.low>>>0)},re.toString=function(R){if((R=R||10)<2||36<R)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(ot)){var me=Ue(R),De=this.div(me),tt=De.mul(me).sub(this);return De.toString(R)+tt.toInt().toString(R)}return"-"+this.neg().toString(R)}for(var Ke=Ue(Me(R,6),this.unsigned),ge=this,q="";;){var Wt=ge.div(Ke),_t=(ge.sub(Wt.mul(Ke)).toInt()>>>0).toString(R);if((ge=Wt).isZero())return _t+q;for(;_t.length<6;)_t="0"+_t;q=""+_t+q}},re.getHighBits=function(){return this.high},re.getHighBitsUnsigned=function(){return this.high>>>0},re.getLowBits=function(){return this.low},re.getLowBitsUnsigned=function(){return this.low>>>0},re.getNumBitsAbs=function(){if(this.isNegative())return this.eq(ot)?64:this.neg().getNumBitsAbs();for(var R=0!=this.high?this.high:this.low,me=31;me>0&&!(R&1<<me);me--);return 0!=this.high?me+33:me+1},re.isZero=function(){return 0===this.high&&0===this.low},re.eqz=re.isZero,re.isNegative=function(){return!this.unsigned&&this.high<0},re.isPositive=function(){return this.unsigned||this.high>=0},re.isOdd=function(){return 1==(1&this.low)},re.isEven=function(){return 0==(1&this.low)},re.equals=function(R){return Fe(R)||(R=G(R)),(this.unsigned===R.unsigned||this.high>>>31!=1||R.high>>>31!=1)&&this.high===R.high&&this.low===R.low},re.eq=re.equals,re.notEquals=function(R){return!this.eq(R)},re.neq=re.notEquals,re.ne=re.notEquals,re.lessThan=function(R){return this.comp(R)<0},re.lt=re.lessThan,re.lessThanOrEqual=function(R){return this.comp(R)<=0},re.lte=re.lessThanOrEqual,re.le=re.lessThanOrEqual,re.greaterThan=function(R){return this.comp(R)>0},re.gt=re.greaterThan,re.greaterThanOrEqual=function(R){return this.comp(R)>=0},re.gte=re.greaterThanOrEqual,re.ge=re.greaterThanOrEqual,re.compare=function(R){if(Fe(R)||(R=G(R)),this.eq(R))return 0;var me=this.isNegative(),De=R.isNegative();return me&&!De?-1:!me&&De?1:this.unsigned?R.high>>>0>this.high>>>0||R.high===this.high&&R.low>>>0>this.low>>>0?-1:1:this.sub(R).isNegative()?-1:1},re.comp=re.compare,re.negate=function(){return!this.unsigned&&this.eq(ot)?ot:this.not().add(Bt)},re.neg=re.negate,re.add=function(R){Fe(R)||(R=G(R));var _t=0,yn=0,it=0,xn=0;return it+=(xn+=(65535&this.low)+(65535&R.low))>>>16,yn+=(it+=(this.low>>>16)+(R.low>>>16))>>>16,_t+=(yn+=(65535&this.high)+(65535&R.high))>>>16,_t+=(this.high>>>16)+(R.high>>>16),Ee((it&=65535)<<16|(xn&=65535),(_t&=65535)<<16|(yn&=65535),this.unsigned)},re.subtract=function(R){return Fe(R)||(R=G(R)),this.add(R.neg())},re.sub=re.subtract,re.multiply=function(R){if(this.isZero())return at;if(Fe(R)||(R=G(R)),je)return Ee(je.mul(this.low,this.high,R.low,R.high),je.get_high(),this.unsigned);if(R.isZero())return at;if(this.eq(ot))return R.isOdd()?ot:at;if(R.eq(ot))return this.isOdd()?ot:at;if(this.isNegative())return R.isNegative()?this.neg().mul(R.neg()):this.neg().mul(R).neg();if(R.isNegative())return this.mul(R.neg()).neg();if(this.lt(ve)&&R.lt(ve))return Ue(this.toNumber()*R.toNumber(),this.unsigned);var tt=65535&this.high,Ke=this.low>>>16,ge=65535&this.low,Wt=65535&R.high,rn=R.low>>>16,_t=65535&R.low,yn=0,it=0,xn=0,yi=0;return xn+=(yi+=ge*_t)>>>16,it+=(xn+=Ke*_t)>>>16,xn&=65535,it+=(xn+=ge*rn)>>>16,yn+=(it+=tt*_t)>>>16,it&=65535,yn+=(it+=Ke*rn)>>>16,it&=65535,yn+=(it+=ge*Wt)>>>16,yn+=(this.high>>>16)*_t+tt*rn+Ke*Wt+ge*(R.high>>>16),Ee((xn&=65535)<<16|(yi&=65535),(yn&=65535)<<16|(it&=65535),this.unsigned)},re.mul=re.multiply,re.divide=function(R){if(Fe(R)||(R=G(R)),R.isZero())throw Error("division by zero");var De,tt,Ke;if(je)return this.unsigned||-2147483648!==this.high||-1!==R.low||-1!==R.high?Ee((this.unsigned?je.div_u:je.div_s)(this.low,this.high,R.low,R.high),je.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?Ut:at;if(this.unsigned){if(R.unsigned||(R=R.toUnsigned()),R.gt(this))return Ut;if(R.gt(this.shru(1)))return ts;Ke=Ut}else{if(this.eq(ot))return R.eq(Bt)||R.eq(Vn)?ot:R.eq(ot)?Bt:(De=this.shr(1).div(R).shl(1)).eq(at)?R.isNegative()?Bt:Vn:(tt=this.sub(R.mul(De)),Ke=De.add(tt.div(R)));if(R.eq(ot))return this.unsigned?Ut:at;if(this.isNegative())return R.isNegative()?this.neg().div(R.neg()):this.neg().div(R).neg();if(R.isNegative())return this.div(R.neg()).neg();Ke=at}for(tt=this;tt.gte(R);){De=Math.max(1,Math.floor(tt.toNumber()/R.toNumber()));for(var q=Math.ceil(Math.log(De)/Math.LN2),Wt=q<=48?1:Me(2,q-48),rn=Ue(De),_t=rn.mul(R);_t.isNegative()||_t.gt(tt);)_t=(rn=Ue(De-=Wt,this.unsigned)).mul(R);rn.isZero()&&(rn=Bt),Ke=Ke.add(rn),tt=tt.sub(_t)}return Ke},re.div=re.divide,re.modulo=function(R){return Fe(R)||(R=G(R)),je?Ee((this.unsigned?je.rem_u:je.rem_s)(this.low,this.high,R.low,R.high),je.get_high(),this.unsigned):this.sub(this.div(R).mul(R))},re.mod=re.modulo,re.rem=re.modulo,re.not=function(){return Ee(~this.low,~this.high,this.unsigned)},re.and=function(R){return Fe(R)||(R=G(R)),Ee(this.low&R.low,this.high&R.high,this.unsigned)},re.or=function(R){return Fe(R)||(R=G(R)),Ee(this.low|R.low,this.high|R.high,this.unsigned)},re.xor=function(R){return Fe(R)||(R=G(R)),Ee(this.low^R.low,this.high^R.high,this.unsigned)},re.shiftLeft=function(R){return Fe(R)&&(R=R.toInt()),0==(R&=63)?this:R<32?Ee(this.low<<R,this.high<<R|this.low>>>32-R,this.unsigned):Ee(0,this.low<<R-32,this.unsigned)},re.shl=re.shiftLeft,re.shiftRight=function(R){return Fe(R)&&(R=R.toInt()),0==(R&=63)?this:R<32?Ee(this.low>>>R|this.high<<32-R,this.high>>R,this.unsigned):Ee(this.high>>R-32,this.high>=0?0:-1,this.unsigned)},re.shr=re.shiftRight,re.shiftRightUnsigned=function(R){if(Fe(R)&&(R=R.toInt()),0==(R&=63))return this;var me=this.high;return R<32?Ee(this.low>>>R|me<<32-R,me>>>R,this.unsigned):Ee(32===R?me:me>>>R-32,0,this.unsigned)},re.shru=re.shiftRightUnsigned,re.shr_u=re.shiftRightUnsigned,re.toSigned=function(){return this.unsigned?Ee(this.low,this.high,!1):this},re.toUnsigned=function(){return this.unsigned?this:Ee(this.low,this.high,!0)},re.toBytes=function(R){return R?this.toBytesLE():this.toBytesBE()},re.toBytesLE=function(){var R=this.high,me=this.low;return[255&me,me>>>8&255,me>>>16&255,me>>>24,255&R,R>>>8&255,R>>>16&255,R>>>24]},re.toBytesBE=function(){var R=this.high,me=this.low;return[R>>>24,R>>>16&255,R>>>8&255,255&R,me>>>24,me>>>16&255,me>>>8&255,255&me]},j.fromBytes=function(R,me,De){return De?j.fromBytesLE(R,me):j.fromBytesBE(R,me)},j.fromBytesLE=function(R,me){return new j(R[0]|R[1]<<8|R[2]<<16|R[3]<<24,R[4]|R[5]<<8|R[6]<<16|R[7]<<24,me)},j.fromBytesBE=function(R,me){return new j(R[4]<<24|R[5]<<16|R[6]<<8|R[7],R[0]<<24|R[1]<<16|R[2]<<8|R[3],me)}},1315:(st,je,j)=>{var Fe=j(9064),Vt=j(3237),Oe=j(4275),wt=j(3860),Ue=j(5806),Ee=j(4354),Me=j(824);Me.alea=Fe,Me.xor128=Vt,Me.xorwow=Oe,Me.xorshift7=wt,Me.xor4096=Ue,Me.tychei=Ee,st.exports=Me},9064:function(st,je,j){var Fe;!function(Vt,Oe,wt){function Ue(G){var le=this,fe=function ye(){var G=4022871197;return function(fe){fe=String(fe);for(var J=0;J<fe.length;J++){var ie=.02519603282416938*(G+=fe.charCodeAt(J));ie-=G=ie>>>0,G=(ie*=G)>>>0,G+=4294967296*(ie-=G)}return 2.3283064365386963e-10*(G>>>0)}}();le.next=function(){var J=2091639*le.s0+2.3283064365386963e-10*le.c;return le.s0=le.s1,le.s1=le.s2,le.s2=J-(le.c=0|J)},le.c=1,le.s0=fe(" "),le.s1=fe(" "),le.s2=fe(" "),le.s0-=fe(G),le.s0<0&&(le.s0+=1),le.s1-=fe(G),le.s1<0&&(le.s1+=1),le.s2-=fe(G),le.s2<0&&(le.s2+=1),fe=null}function Ee(G,le){return le.c=G.c,le.s0=G.s0,le.s1=G.s1,le.s2=G.s2,le}function Me(G,le){var fe=new Ue(G),J=le&&le.state,ie=fe.next;return ie.int32=function(){return 4294967296*fe.next()|0},ie.double=function(){return ie()+11102230246251565e-32*(2097152*ie()|0)},ie.quick=ie,J&&("object"==typeof J&&Ee(J,fe),ie.state=function(){return Ee(fe,{})}),ie}Oe&&Oe.exports?Oe.exports=Me:j.amdD&&j.amdO?void 0!==(Fe=function(){return Me}.call(je,j,je,Oe))&&(Oe.exports=Fe):this.alea=Me}(0,st=j.nmd(st))},4354:function(st,je,j){var Fe;!function(Vt,Oe,wt){function Ue(ye){var G=this,le="";G.next=function(){var J=G.b,ie=G.c,be=G.d,ve=G.a;return J=J<<25^J>>>7^ie,ie=ie-be|0,be=be<<24^be>>>8^ve,ve=ve-J|0,G.b=J=J<<20^J>>>12^ie,G.c=ie=ie-be|0,G.d=be<<16^ie>>>16^ve,G.a=ve-J|0},G.a=0,G.b=0,G.c=-1640531527,G.d=1367130551,ye===Math.floor(ye)?(G.a=ye/4294967296|0,G.b=0|ye):le+=ye;for(var fe=0;fe<le.length+20;fe++)G.b^=0|le.charCodeAt(fe),G.next()}function Ee(ye,G){return G.a=ye.a,G.b=ye.b,G.c=ye.c,G.d=ye.d,G}function Me(ye,G){var le=new Ue(ye),fe=G&&G.state,J=function(){return(le.next()>>>0)/4294967296};return J.double=function(){do{var ve=((le.next()>>>11)+(le.next()>>>0)/4294967296)/(1<<21)}while(0===ve);return ve},J.int32=le.next,J.quick=J,fe&&("object"==typeof fe&&Ee(fe,le),J.state=function(){return Ee(le,{})}),J}Oe&&Oe.exports?Oe.exports=Me:j.amdD&&j.amdO?void 0!==(Fe=function(){return Me}.call(je,j,je,Oe))&&(Oe.exports=Fe):this.tychei=Me}(0,st=j.nmd(st))},3237:function(st,je,j){var Fe;!function(Vt,Oe,wt){function Ue(ye){var G=this,le="";G.x=0,G.y=0,G.z=0,G.w=0,G.next=function(){var J=G.x^G.x<<11;return G.x=G.y,G.y=G.z,G.z=G.w,G.w^=G.w>>>19^J^J>>>8},ye===(0|ye)?G.x=ye:le+=ye;for(var fe=0;fe<le.length+64;fe++)G.x^=0|le.charCodeAt(fe),G.next()}function Ee(ye,G){return G.x=ye.x,G.y=ye.y,G.z=ye.z,G.w=ye.w,G}function Me(ye,G){var le=new Ue(ye),fe=G&&G.state,J=function(){return(le.next()>>>0)/4294967296};return J.double=function(){do{var ve=((le.next()>>>11)+(le.next()>>>0)/4294967296)/(1<<21)}while(0===ve);return ve},J.int32=le.next,J.quick=J,fe&&("object"==typeof fe&&Ee(fe,le),J.state=function(){return Ee(le,{})}),J}Oe&&Oe.exports?Oe.exports=Me:j.amdD&&j.amdO?void 0!==(Fe=function(){return Me}.call(je,j,je,Oe))&&(Oe.exports=Fe):this.xor128=Me}(0,st=j.nmd(st))},5806:function(st,je,j){var Fe;!function(Vt,Oe,wt){function Ue(ye){var G=this;G.next=function(){var be,ve,fe=G.w,J=G.X,ie=G.i;return G.w=fe=fe+1640531527|0,ve=J[ie+34&127],be=J[ie=ie+1&127],ve^=ve<<13,be^=be<<17,ve=J[ie]=(ve^=ve>>>15)^(be^=be>>>12),G.i=ie,ve+(fe^fe>>>16)|0},function le(fe,J){var ie,be,ve,at,Ut,Bt=[],ts=128;for(J===(0|J)?(be=J,J=null):(J+="\0",be=0,ts=Math.max(ts,J.length)),ve=0,at=-32;at<ts;++at)J&&(be^=J.charCodeAt((at+32)%J.length)),0===at&&(Ut=be),be^=be<<10,be^=be>>>15,be^=be<<4,be^=be>>>13,at>=0&&(ve=0==(ie=Bt[127&at]^=be+(Ut=Ut+1640531527|0))?ve+1:0);for(ve>=128&&(Bt[127&(J&&J.length||0)]=-1),ve=127,at=512;at>0;--at)be=Bt[ve+34&127],ie=Bt[ve=ve+1&127],be^=be<<13,ie^=ie<<17,Bt[ve]=(be^=be>>>15)^(ie^=ie>>>12);fe.w=Ut,fe.X=Bt,fe.i=ve}(G,ye)}function Ee(ye,G){return G.i=ye.i,G.w=ye.w,G.X=ye.X.slice(),G}function Me(ye,G){null==ye&&(ye=+new Date);var le=new Ue(ye),fe=G&&G.state,J=function(){return(le.next()>>>0)/4294967296};return J.double=function(){do{var ve=((le.next()>>>11)+(le.next()>>>0)/4294967296)/(1<<21)}while(0===ve);return ve},J.int32=le.next,J.quick=J,fe&&(fe.X&&Ee(fe,le),J.state=function(){return Ee(le,{})}),J}Oe&&Oe.exports?Oe.exports=Me:j.amdD&&j.amdO?void 0!==(Fe=function(){return Me}.call(je,j,je,Oe))&&(Oe.exports=Fe):this.xor4096=Me}(0,st=j.nmd(st))},3860:function(st,je,j){var Fe;!function(Vt,Oe,wt){function Ue(ye){var G=this;G.next=function(){var ie,be,fe=G.x,J=G.i;return ie=fe[J],be=(ie^=ie>>>7)^ie<<24,be^=(ie=fe[J+1&7])^ie>>>10,be^=(ie=fe[J+3&7])^ie>>>3,be^=(ie=fe[J+4&7])^ie<<7,ie=fe[J+7&7],fe[J]=be^=(ie^=ie<<13)^ie<<9,G.i=J+1&7,be},function le(fe,J){var ie,ve=[];if(J===(0|J))ve[0]=J;else for(J=""+J,ie=0;ie<J.length;++ie)ve[7&ie]=ve[7&ie]<<15^J.charCodeAt(ie)+ve[ie+1&7]<<13;for(;ve.length<8;)ve.push(0);for(ie=0;ie<8&&0===ve[ie];++ie);for(8==ie&&(ve[7]=-1),fe.x=ve,fe.i=0,ie=256;ie>0;--ie)fe.next()}(G,ye)}function Ee(ye,G){return G.x=ye.x.slice(),G.i=ye.i,G}function Me(ye,G){null==ye&&(ye=+new Date);var le=new Ue(ye),fe=G&&G.state,J=function(){return(le.next()>>>0)/4294967296};return J.double=function(){do{var ve=((le.next()>>>11)+(le.next()>>>0)/4294967296)/(1<<21)}while(0===ve);return ve},J.int32=le.next,J.quick=J,fe&&(fe.x&&Ee(fe,le),J.state=function(){return Ee(le,{})}),J}Oe&&Oe.exports?Oe.exports=Me:j.amdD&&j.amdO?void 0!==(Fe=function(){return Me}.call(je,j,je,Oe))&&(Oe.exports=Fe):this.xorshift7=Me}(0,st=j.nmd(st))},4275:function(st,je,j){var Fe;!function(Vt,Oe,wt){function Ue(ye){var G=this,le="";G.next=function(){var J=G.x^G.x>>>2;return G.x=G.y,G.y=G.z,G.z=G.w,G.w=G.v,(G.d=G.d+362437|0)+(G.v=G.v^G.v<<4^J^J<<1)|0},G.x=0,G.y=0,G.z=0,G.w=0,G.v=0,ye===(0|ye)?G.x=ye:le+=ye;for(var fe=0;fe<le.length+64;fe++)G.x^=0|le.charCodeAt(fe),fe==le.length&&(G.d=G.x<<10^G.x>>>4),G.next()}function Ee(ye,G){return G.x=ye.x,G.y=ye.y,G.z=ye.z,G.w=ye.w,G.v=ye.v,G.d=ye.d,G}function Me(ye,G){var le=new Ue(ye),fe=G&&G.state,J=function(){return(le.next()>>>0)/4294967296};return J.double=function(){do{var ve=((le.next()>>>11)+(le.next()>>>0)/4294967296)/(1<<21)}while(0===ve);return ve},J.int32=le.next,J.quick=J,fe&&("object"==typeof fe&&Ee(fe,le),J.state=function(){return Ee(le,{})}),J}Oe&&Oe.exports?Oe.exports=Me:j.amdD&&j.amdO?void 0!==(Fe=function(){return Me}.call(je,j,je,Oe))&&(Oe.exports=Fe):this.xorwow=Me}(0,st=j.nmd(st))},824:function(st,je,j){var Fe;!function(Vt,Oe,wt){var ie,Ue=256,G=wt.pow(Ue,6),le=wt.pow(2,52),fe=2*le,J=Ue-1;function be(Xe,rt,ot){var re=[],Y=Bt(Ut((rt=1==rt?{entropy:!0}:rt||{}).entropy?[Xe,Vn(Oe)]:null==Xe?function ts(){try{var Xe;return ie&&(Xe=ie.randomBytes)?Xe=Xe(Ue):(Xe=new Uint8Array(Ue),(Vt.crypto||Vt.msCrypto).getRandomValues(Xe)),Vn(Xe)}catch{var rt=Vt.navigator,ot=rt&&rt.plugins;return[+new Date,Vt,ot,Vt.screen,Vn(Oe)]}}():Xe,3),re),R=new ve(re),me=function(){for(var De=R.g(6),tt=G,Ke=0;De<le;)De=(De+Ke)*Ue,tt*=Ue,Ke=R.g(1);for(;De>=fe;)De/=2,tt/=2,Ke>>>=1;return(De+Ke)/tt};return me.int32=function(){return 0|R.g(4)},me.quick=function(){return R.g(4)/4294967296},me.double=me,Bt(Vn(R.S),Oe),(rt.pass||ot||function(De,tt,Ke,ge){return ge&&(ge.S&&at(ge,R),De.state=function(){return at(R,{})}),Ke?(wt.random=De,tt):De})(me,Y,"global"in rt?rt.global:this==wt,rt.state)}function ve(Xe){var rt,ot=Xe.length,re=this,Y=0,R=re.i=re.j=0,me=re.S=[];for(ot||(Xe=[ot++]);Y<Ue;)me[Y]=Y++;for(Y=0;Y<Ue;Y++)me[Y]=me[R=J&R+Xe[Y%ot]+(rt=me[Y])],me[R]=rt;(re.g=function(De){for(var tt,Ke=0,ge=re.i,q=re.j,Wt=re.S;De--;)tt=Wt[ge=J&ge+1],Ke=Ke*Ue+Wt[J&(Wt[ge]=Wt[q=J&q+tt])+(Wt[q]=tt)];return re.i=ge,re.j=q,Ke})(Ue)}function at(Xe,rt){return rt.i=Xe.i,rt.j=Xe.j,rt.S=Xe.S.slice(),rt}function Ut(Xe,rt){var Y,ot=[],re=typeof Xe;if(rt&&"object"==re)for(Y in Xe)try{ot.push(Ut(Xe[Y],rt-1))}catch{}return ot.length?ot:"string"==re?Xe:Xe+"\0"}function Bt(Xe,rt){for(var re,ot=Xe+"",Y=0;Y<ot.length;)rt[J&Y]=J&(re^=19*rt[J&Y])+ot.charCodeAt(Y++);return Vn(rt)}function Vn(Xe){return String.fromCharCode.apply(0,Xe)}if(Bt(wt.random(),Oe),st.exports){st.exports=be;try{ie=j(5042)}catch{}}else void 0!==(Fe=function(){return be}.call(je,j,je,st))&&(st.exports=Fe)}(typeof self<"u"?self:this,[],Math)},8474:(st,je,j)=>{"use strict";j.r(je),j.d(je,{HomePageModule:()=>S5});var Fe={};j.r(Fe),j.d(Fe,{CompositeArrayBuffer:()=>As,browserFiles:()=>Wv,browserHTTPRequest:()=>jv,concatenateArrayBuffers:()=>jg,copyModel:()=>pv,decodeWeights:()=>Kg,encodeWeights:()=>Rd,fromMemory:()=>Xv,fromMemorySync:()=>CA,getLoadHandlers:()=>ev,getModelArtifactsForJSON:()=>Od,getModelArtifactsForJSONSync:()=>Zg,getModelArtifactsInfoForJSON:()=>xa,getSaveHandlers:()=>Jg,getWeightSpecs:()=>Yg,http:()=>ep,isHTTPScheme:()=>Jd,listModels:()=>hv,loadWeights:()=>Gv,moveModel:()=>fv,registerLoadRouter:()=>JC,registerSaveRouter:()=>YC,removeModel:()=>dv,weightsLoaderFactory:()=>xA,withSaveHandler:()=>Zv,withSaveHandlerSync:()=>Yv});var Vt={};j.r(Vt),j.d(Vt,{assertParamsValid:()=>op,computeFlatOffset:()=>lp,computeOutShape:()=>ip,getNormalizedAxes:()=>i1,isSliceContinous:()=>ap,maskToAxes:()=>o1,parseSliceParams:()=>Tu,sliceInfo:()=>up,startForAxis:()=>OA,startIndicesWithElidedDims:()=>RA,stopForAxis:()=>LA,stopIndicesWithElidedDims:()=>$A,stridesForAxis:()=>FA,stridesWithElidedDims:()=>EA});var Oe={};j.r(Oe),j.d(Oe,{conv2d:()=>Ly,depthwiseConv2d:()=>Sk,matMul:()=>Xp});var wt={};j.r(wt),j.d(wt,{collectGatherOpShapeInfo:()=>Tf,computeOutShape:()=>Ax,segOpComputeOptimalWindowSize:()=>gx});var Ue={};j.r(Ue),j.d(Ue,{ERF_A1:()=>pf,ERF_A2:()=>ff,ERF_A3:()=>mf,ERF_A4:()=>gf,ERF_A5:()=>Af,ERF_P:()=>df,PARALLELIZE_THRESHOLD:()=>af,RowPartitionType:()=>Ps,SELU_SCALE:()=>ec,SELU_SCALEALPHA:()=>Ju,applyActivation:()=>Xu,assertAndGetBroadcastShape:()=>Le,assertAxesAreInnerMostDims:()=>ln,assertParamsConsistent:()=>of,assignToTypedArray:()=>ex,axesAreInnerMostDims:()=>xp,calculateShapes:()=>ro,checkEinsumDimSizes:()=>If,checkPadOnDimRoundingMode:()=>In,combineLocations:()=>cy,combineRaggedTensorToTensorShapes:()=>qy,complexWithEvenIndex:()=>Yy,complexWithOddIndex:()=>Jy,computeConv2DInfo:()=>tn,computeConv3DInfo:()=>xr,computeDefaultPad:()=>hp,computeDilation2DInfo:()=>ba,computeOptimalWindowSize:()=>Yu,computeOutAndReduceShapes:()=>nn,computeOutShape:()=>Ls,computePool2DInfo:()=>os,computePool3DInfo:()=>Qs,convertConv2DDataFormat:()=>Xs,decodeEinsumEquation:()=>bf,eitherStridesOrDilationsAreOne:()=>an,expandShapeToKeepDim:()=>Ot,exponent:()=>nx,exponents:()=>tx,fromStringArrayToUint8:()=>yx,fromUint8ToStringArray:()=>Js,getAxesPermutation:()=>Tt,getBroadcastDims:()=>zo,getComplexWithIndex:()=>yf,getEinsumComputePath:()=>Cf,getEinsumPermutation:()=>wf,getFusedBiasGradient:()=>Qu,getFusedDyActivation:()=>ju,getImageCenter:()=>lf,getInnerMostAxes:()=>Lt,getPermuted:()=>La,getRaggedRank:()=>Qy,getReductionAxes:()=>Kt,getReshaped:()=>Oa,getReshapedPermuted:()=>Pa,getRowPartitionTypesHelper:()=>jy,getSliceBeginCoords:()=>uf,getSliceSize:()=>cf,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>ox,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>ix,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>ax,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>cx,getSparseReshapeInputOutputMismatchErrorMessage:()=>dx,getSparseReshapeInputOutputMultipleErrorMessage:()=>hx,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>lx,getSparseReshapeNegativeOutputDimErrorMessage:()=>ux,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>mx,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>Nf,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>px,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>fx,getUndoAxesPermutation:()=>Ir,isIdentityPermutation:()=>vf,log:()=>gC,mergeRealAndImagArrays:()=>Ys,prepareAndValidate:()=>hf,prepareSplitSize:()=>Sf,segment_util:()=>wt,shouldFuse:()=>Zu,slice_util:()=>Vt,splitRealAndImagArrays:()=>Zy,stridesOrDilationsArePositive:()=>Jr,tupleValuesAreOne:()=>br,upcastType:()=>Fn,validateDefaultValueShape:()=>Xy,validateInput:()=>zp,validateUpdateShape:()=>Ey,warn:()=>Wn});var Ee={};j.r(Ee),j.d(Ee,{json:()=>d$});var Me={};j.r(Me),j.d(Me,{json:()=>p$});var ye={};j.r(ye),j.d(ye,{json:()=>f$});var G={};j.r(G),j.d(G,{json:()=>m$});var le={};j.r(le),j.d(le,{json:()=>g$});var fe={};j.r(fe),j.d(fe,{json:()=>A$});var J={};j.r(J),j.d(J,{json:()=>y$});var ie={};j.r(ie),j.d(ie,{json:()=>x$});var be={};j.r(be),j.d(be,{json:()=>b$});var ve={};j.r(ve),j.d(ve,{json:()=>w$});var at={};j.r(at),j.d(at,{json:()=>I$});var Ut={};j.r(Ut),j.d(Ut,{json:()=>C$});var Bt={};j.r(Bt),j.d(Bt,{json:()=>v$});var ts={};j.r(ts),j.d(ts,{json:()=>S$});var Vn={};j.r(Vn),j.d(Vn,{json:()=>N$});var Xe={};j.r(Xe),j.d(Xe,{json:()=>T$});var rt={};j.r(rt),j.d(rt,{json:()=>k$});var ot={};j.r(ot),j.d(ot,{json:()=>E$});var re={};j.r(re),j.d(re,{json:()=>_$});var Y={};j.r(Y),j.d(Y,{OP_SCOPE_SUFFIX:()=>Hg,abs:()=>Ht,acos:()=>MA,acosh:()=>BA,add:()=>ne,addN:()=>d1,all:()=>cp,any:()=>ku,argMax:()=>Yr,argMin:()=>zA,asin:()=>VA,asinh:()=>UA,atan:()=>WA,atan2:()=>GA,atanh:()=>HA,avgPool:()=>Eu,avgPool3d:()=>KA,basicLSTMCell:()=>O1,batchNorm:()=>Ca,batchNorm2d:()=>qA,batchNorm3d:()=>jA,batchNorm4d:()=>QA,batchToSpaceND:()=>_u,bincount:()=>XA,bitwiseAnd:()=>G1,booleanMaskAsync:()=>Kp,broadcastArgs:()=>K1,broadcastTo:()=>Wo,buffer:()=>Be,cast:()=>he,ceil:()=>ZA,clipByValue:()=>On,clone:()=>qs,complex:()=>fr,concat:()=>zt,concat1d:()=>YA,concat2d:()=>JA,concat3d:()=>ey,concat4d:()=>ty,conv1d:()=>pp,conv2d:()=>wr,conv2dTranspose:()=>mp,conv3d:()=>ny,conv3dTranspose:()=>ry,cos:()=>Du,cosh:()=>gp,cosineWindow:()=>qp,cumprod:()=>Ru,cumsum:()=>Ap,denseBincount:()=>yp,depthToSpace:()=>oy,depthwiseConv2d:()=>va,diag:()=>mS,dilation2d:()=>iy,div:()=>Se,divNoNan:()=>ay,dot:()=>ly,dropout:()=>Fy,einsum:()=>Go,elu:()=>Sa,enclosingPowerOfTwo:()=>Oy,ensureShape:()=>vS,equal:()=>xs,erf:()=>uy,euclideanNorm:()=>dy,exp:()=>Hn,expandDims:()=>Cn,expm1:()=>py,eye:()=>bp,fft:()=>Ku,fill:()=>Bo,floor:()=>ka,floorDiv:()=>qd,fused:()=>Oe,gather:()=>Ea,gatherND:()=>mk,greater:()=>En,greaterEqual:()=>Cr,ifft:()=>$a,imag:()=>$u,image:()=>Os,inTopKAsync:()=>xk,irfft:()=>Mp,isFinite:()=>fy,isInf:()=>my,isNaN:()=>gy,leakyRelu:()=>Fu,less:()=>_a,lessEqual:()=>eo,linalg:()=>Hy,linspace:()=>qS,localResponseNormalization:()=>Ay,log:()=>Kn,log1p:()=>Ou,logSigmoid:()=>yy,logSoftmax:()=>wp,logSumExp:()=>Ip,logicalAnd:()=>$s,logicalNot:()=>Lu,logicalOr:()=>Cp,logicalXor:()=>xy,losses:()=>s2,lowerBound:()=>aN,matMul:()=>qe,max:()=>Gn,maxPool:()=>Mu,maxPool3d:()=>by,maxPoolWithArgmax:()=>hN,maximum:()=>ys,mean:()=>Rt,meshgrid:()=>pN,min:()=>Na,minimum:()=>to,mirrorPad:()=>wy,mod:()=>Iy,moments:()=>Bu,movingAverage:()=>lk,mul:()=>L,multiRNNCell:()=>xN,multinomial:()=>wN,neg:()=>bt,norm:()=>Ta,notEqual:()=>Ko,oneHot:()=>Sp,ones:()=>qn,onesLike:()=>jn,op:()=>$,outerProduct:()=>NN,pad:()=>vr,pad1d:()=>EN,pad2d:()=>DN,pad3d:()=>$N,pad4d:()=>ON,pool:()=>Cy,pow:()=>yr,prelu:()=>Vu,print:()=>aA,prod:()=>vy,raggedGather:()=>WN,raggedRange:()=>HN,raggedTensorToTensor:()=>qN,rand:()=>QN,randomGamma:()=>nT,randomNormal:()=>kp,randomStandardNormal:()=>oT,randomUniform:()=>no,randomUniformInt:()=>lT,range:()=>qo,real:()=>Da,reciprocal:()=>Sy,relu:()=>Fs,relu6:()=>Ep,reshape:()=>M,reverse:()=>as,reverse1d:()=>mT,reverse2d:()=>AT,reverse3d:()=>xT,reverse4d:()=>wT,rfft:()=>qu,round:()=>_p,rsqrt:()=>Dp,scalar:()=>ke,scatterND:()=>ck,searchSorted:()=>vp,selu:()=>Rp,separableConv2d:()=>$p,setdiff1dAsync:()=>TT,sigmoid:()=>Rs,sign:()=>Ny,signal:()=>n2,sin:()=>Op,sinh:()=>Lp,slice:()=>Ye,slice1d:()=>Wu,slice2d:()=>Pp,slice3d:()=>Gu,slice4d:()=>Ra,softmax:()=>Hu,softplus:()=>Ho,spaceToBatchND:()=>zu,sparse:()=>r2,sparseToDense:()=>pk,spectral:()=>t2,split:()=>Ln,sqrt:()=>pn,square:()=>dt,squaredDifference:()=>Bp,squeeze:()=>so,stack:()=>Qn,step:()=>jo,stridedSlice:()=>Ty,string:()=>o2,sub:()=>xe,sum:()=>we,tan:()=>ky,tanh:()=>Uo,tensor:()=>St,tensor1d:()=>mn,tensor2d:()=>Fa,tensor3d:()=>vA,tensor4d:()=>qT,tensor5d:()=>jT,tensor6d:()=>QT,tensorScatterUpdate:()=>ZT,tile:()=>is,topk:()=>_y,transpose:()=>Je,truncatedNormal:()=>Vp,unique:()=>Dy,unsortedSegmentSum:()=>Up,unstack:()=>ls,upperBound:()=>sk,variable:()=>Ry,where:()=>fn,whereAsync:()=>$y,zeros:()=>qt,zerosLike:()=>Ze});var R={};j.r(R),j.d(R,{addImpl:()=>E0,bincountImpl:()=>zm,bincountReduceImpl:()=>O0,bitwiseAndImpl:()=>L0,castImpl:()=>k0,ceilImpl:()=>P0,concatImpl:()=>M0,equalImpl:()=>V0,expImpl:()=>W0,expm1Impl:()=>H0,floorImpl:()=>j0,gatherNdImpl:()=>Q0,gatherV2Impl:()=>X0,greaterEqualImpl:()=>Y0,greaterImpl:()=>Z0,lessEqualImpl:()=>ew,lessImpl:()=>J0,linSpaceImpl:()=>tw,logImpl:()=>nw,maxImpl:()=>sw,maximumImpl:()=>ow,minimumImpl:()=>iw,multiplyImpl:()=>Vm,negImpl:()=>lw,notEqualImpl:()=>uw,prodImpl:()=>pw,raggedGatherImpl:()=>mw,raggedRangeImpl:()=>Aw,raggedTensorToTensorImpl:()=>bw,rangeImpl:()=>ww,rsqrtImpl:()=>Iw,scatterImpl:()=>Ao,sigmoidImpl:()=>nO,simpleAbsImpl:()=>D0,sliceImpl:()=>F0,sparseFillEmptyRowsImpl:()=>vw,sparseReshapeImpl:()=>Sw,sparseSegmentReductionImpl:()=>qm,sqrtImpl:()=>Ez,staticRegexReplaceImpl:()=>Nw,stridedSliceImpl:()=>Tw,stringNGramsImpl:()=>kw,stringSplitImpl:()=>Ew,stringToHashBucketFastImpl:()=>_w,subImpl:()=>K0,tileImpl:()=>Dw,topKImpl:()=>$w,transposeImpl:()=>Mm,uniqueImpl:()=>Ow});var me=j(6733),De=j(8182),tt=j(2133),Ke=j(4991),ge=j(7170),q=j(8239);class _t{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class yn{refCount(t){return it("refCount")}incRef(t){return it("incRef")}timerAvailable(){return!0}time(t){return it("time")}read(t){return it("read")}readSync(t){return it("readSync")}readToGPU(t,e){return it("readToGPU")}numDataIds(){return it("numDataIds")}disposeData(t,e){return it("disposeData")}write(t,e,s){return it("write")}move(t,e,s,r,o){return it("move")}createTensorFromGPUData(t,e,s){return it("createTensorFromGPUData")}memory(){return it("memory")}floatPrecision(){return it("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return it("dispose")}}function it(n){throw new Error(`'${n}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function xn(n){let t=n.length,e=0;for(;t>0;)e=Math.random()*t|0,t--,ar(n,t,e)}function Wr(n,t,e){return Math.max(n,Math.min(t,e))}function ah(n){return n%2==0?n:n+1}function ar(n,t,e){const s=n[t];n[t]=n[e],n[e]=s}function v(n,t){if(!n)throw new Error("string"==typeof t?t:t())}function $n(n,t,e=""){v(Qe(n,t),()=>e+` Shapes ${n} and ${t} must match`)}function So(n){v(null!=n,()=>"The input to the tensor constructor must be a non-null value.")}function Q(n){if(0===n.length)return 1;let t=n[0];for(let e=1;e<n.length;e++)t*=n[e];return t}function Qe(n,t){if(n===t)return!0;if(null==n||null==t||n.length!==t.length)return!1;for(let e=0;e<n.length;e++)if(n[e]!==t[e])return!1;return!0}function No(n){return n%1==0}function lh(n){const t=Math.ceil(Math.sqrt(n));return[t,Math.ceil(n/t)]}function To(n,t){return t<=n.length?n:n+" ".repeat(t-n.length)}function fg(n,t=(r=>0),e,s){return new Promise((r,o)=>{let i=0;const a=()=>{if(n())return void r();i++;const l=t(i);null!=e&&i>=e?o():null!=s?s(a,l):setTimeout(a,l)};a()})}function mg(n,t){let e=1,s=-1;for(let o=0;o<n.length;++o)if(n[o]>=0)e*=n[o];else if(-1===n[o]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${o}`);s=o}else if(n[o]<0)throw Error(`Shapes can not be < 0. Found ${n[o]} at dim ${o}`);if(-1===s){if(t>0&&t!==e)throw Error(`Size(${t}) must match the product of shape ${n}`);return n}if(0===e)throw Error(`Cannot infer the missing size in [${n}] when there are 0 elements`);if(t%e!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${e}`);const r=n.slice();return r[s]=t/e,r}function Ge(n,t){const e=t.length;return v((n=null==n?t.map((s,r)=>r):[].concat(n)).every(s=>s>=-e&&s<e),()=>`All values in axis param must be in range [-${e}, ${e}) but got axis ${n}`),v(n.every(s=>No(s)),()=>`All values in axis param must be integers but got axis ${n}`),n.map(s=>s<0?e+s:s)}function lr(n,t){const e=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,o=null==t||r?null:Ge(t,n).sort();let i=0;for(let a=0;a<n.length;++a){if(null!=o){if(o[i]===a&&1!==n[a])throw new Error(`Can't squeeze axis ${a} since its dim '${n[a]}' is not 1`);(null==o[i]||o[i]>a)&&1===n[a]&&(e.push(n[a]),s.push(a)),o[i]<=a&&i++}1!==n[a]&&(e.push(n[a]),s.push(a))}return{newShape:e,keptDims:s}}function on(n,t){return Ft(n,t)}function Ft(n,t){let e=null;if(null==n||"float32"===n)e=new Float32Array(t);else if("int32"===n)e=new Int32Array(t);else if("bool"===n)e=new Uint8Array(t);else{if("string"!==n)throw new Error(`Unknown data type ${n}`);e=new Array(t)}return e}function gg(n,t){return!("complex64"===t||"float32"===t&&"complex64"!==n||"int32"===t&&"float32"!==n&&"complex64"!==n||"bool"===t&&"bool"===n)}function cl(n){if("float32"===n||"int32"===n)return 4;if("complex64"===n)return 8;if("bool"===n)return 1;throw new Error(`Unknown dtype ${n}`)}function xi(n){return"string"==typeof n||n instanceof String}function uh(n){return"number"==typeof n}function ko(n){return Array.isArray(n)?ko(n[0]):n instanceof Float32Array?"float32":n instanceof Int32Array||n instanceof Uint8Array||n instanceof Uint8ClampedArray?"int32":uh(n)?"float32":xi(n)?"string":function iC(n){return"boolean"==typeof n}(n)?"bool":"float32"}function ch(n){return!!(n&&n.constructor&&n.call&&n.apply)}function hh(n,t){for(let e=t;e<n;++e)if(n%e==0)return e;return n}function Ne(n){const t=n.length;if(t<2)return[];const e=new Array(t-1);e[t-2]=n[t-1];for(let s=t-3;s>=0;--s)e[s]=e[s+1]*n[s+1];return e}function Ag(n,t,e,s=!1){const r=new Array;if(1===t.length){const o=t[0]*(s?2:1);for(let i=0;i<o;i++)r[i]=e[n+i]}else{const o=t[0],i=t.slice(1),a=i.reduce((l,u)=>l*u)*(s?2:1);for(let l=0;l<o;l++)r[l]=Ag(n+l*a,i,e,s)}return r}function ns(n,t,e=!1){if(0===n.length)return t[0];const s=n.reduce((r,o)=>r*o)*(e?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${n}] does not match the input size ${t.length}${e?" for a complex tensor":""}.`);return Ag(0,n,t,e)}function dh(n,t){const e=dn(n,t);for(let s=0;s<e.length;s++)e[s]=1;return e}function dn(n,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(n);if("int32"===t)return new Int32Array(n);if("bool"===t)return new Uint8Array(n);throw new Error(`Unknown data type ${t}`)}function yg(n,t){const e=n.reduce((s,r)=>s*r,1);if(null==t||"float32"===t)return ns(n,new Float32Array(e));if("int32"===t)return ns(n,new Int32Array(e));if("bool"===t)return ns(n,new Uint8Array(e));throw new Error(`Unknown data type ${t}`)}function Un(n){n.forEach(t=>{v(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${n}].`)})}function Es(n,t,e){if(0===t)return 0;if(1===t)return n[0];let s=n[n.length-1];for(let r=0;r<n.length-1;++r)s+=e[r]*n[r];return s}function Eo(n,t,e){if(0===t)return[];if(1===t)return[n];const s=new Array(t);for(let r=0;r<s.length-1;++r)s[r]=Math.floor(n/e[r]),n-=s[r]*e[r];return s[s.length-1]=n,s}function Gr(n){return n&&n.then&&"function"==typeof n.then}const xg="tfjsflags";class lC{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=uC,this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&(W().getBool("IS_TEST")||W().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)),this.platformName=t,this.platform=e}registerFlag(t,e,s){if(this.flagRegistry[t]={evaluationFn:e,setHook:s},null!=this.urlFlags[t]){const r=this.urlFlags[t];W().getBool("IS_TEST")||W().getBool("PROD")||console.warn(`Setting feature override from URL ${t}: ${r}.`),this.set(t,r)}}getAsync(t){var e=this;return(0,q.Z)(function*(){return t in e.flags||(e.flags[t]=yield e.evaluateFlag(t)),e.flags[t]})()}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(Gr(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getString(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(typeof this.global>"u"||typeof this.global.location>"u"||typeof this.global.location.search>"u")return;const t=this.getQueryParams(this.global.location.search);xg in t&&t[xg].split(",").forEach(s=>{const[r,o]=s.split(":");this.urlFlags[r]=function hC(n,t){const e=t.toLowerCase();return"true"===e||"false"===e?"true"===e:""+ +e===e?+e:t}(0,o)})}}function uC(n){const t={};return n.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...s)=>(function cC(n,t,e){n[decodeURIComponent(t)]=decodeURIComponent(e||"")}(t,s[0],s[1]),s.join("="))),t}function W(){return bg}let ph,bg=null;function wg(){if(null==ph){let n;if(typeof window<"u")n=window;else if(typeof global<"u")n=global;else if(typeof process<"u")n=process;else{if(!(typeof self<"u"))throw new Error("Could not find a global object");n=self}ph=n}return ph}function fh(n,t){const e=function pC(){const n=wg();return null==n._tfGlobals&&(n._tfGlobals=new Map),n._tfGlobals}();if(e.has(n))return e.get(n);{const s=t();return e.set(n,s),e.get(n)}}const hl="Abs",bi="Acos",wi="Acosh",_o="Add",dl="AddN",pl="ArgMax",fl="ArgMin",Ii="Asin",Ci="Asinh",vi="Atan",Si="Atanh",Ni="Atan2",ml="AvgPool",Ah="AvgPoolGrad",gl="AvgPool3D",yh="AvgPool3DGrad",Al="BatchMatMul",yl="BatchToSpaceND",xh="Bincount",xl="BitwiseAnd",bh="BroadcastArgs",Ti="Cast",ki="Ceil",Ei="ClipByValue",wh="Complex",bl="ComplexAbs",wl="Concat",Il="Conv2D",Ih="Conv2DBackpropFilter",Cl="Conv2DBackpropInput",vl="Conv3D",Ch="Conv3DBackpropFilterV2",vh="Conv3DBackpropInputV2",_i="Cos",Di="Cosh",Sh="Cumprod",Sl="Cumsum",Nh="CropAndResize",Th="DenseBincount",kh="DepthToSpace",Nl="DepthwiseConv2dNative",Eh="DepthwiseConv2dNativeBackpropFilter",_h="DepthwiseConv2dNativeBackpropInput",Dh="Diag",Tl="Dilation2D",Rh="Dilation2DBackpropInput",$h="Dilation2DBackpropFilter",Ri="RealDiv",Oh="Einsum",$i="Elu",Lh="EluGrad",Fi="Erf",kl="Equal",Oi="Exp",El="ExpandDims",Li="Expm1",Mh="Fill",Bh="FlipLeftRight",Pi="Floor",Mi="FloorDiv",_l="FusedBatchNorm",Dl="GatherV2",zh="GatherNd",Rl="Greater",Bi="GreaterEqual",zi="Identity",Vh="IFFT",Uh="Imag",Vi="IsFinite",Ui="IsInf",Wi="IsNan",$l="LeakyRelu",Fl="Less",Ol="LessEqual",Wh="LinSpace",Gi="Log",Hi="Log1p",Ll="LogicalAnd",Pl="LogicalNot",Ml="LogicalOr",Bl="LRN",Gh="LRNGrad",zl="Max",Ki="Maximum",Vl="MaxPool",Hh="MaxPoolGrad",Ul="MaxPool3D",Kh="MaxPool3DGrad",qh="MaxPoolWithArgmax",Wl="Mean",Gl="Min",qi="Minimum",Hl="MirrorPad",ji="Mod",jh="Multinomial",Qi="Multiply",Kl="Neg",ql="NotEqual",Qh="NonMaxSuppressionV3",Xh="NonMaxSuppressionV4",Zh="NonMaxSuppressionV5",jl="OnesLike",Ql="OneHot",Xl="Pack",Zl="PadV2",Xi="Pow",Yl="Prelu",Jl="Prod",Yh="RaggedGather",Jh="RaggedRange",ed="RaggedTensorToTensor",td="Range",nd="Real",Zi="Reciprocal",Yi="Relu",eu="Reshape",tu="ResizeNearestNeighbor",sd="ResizeNearestNeighborGrad",nu="ResizeBilinear",rd="ResizeBilinearGrad",Ji="Relu6",su="Reverse",ea="Round",ta="Rsqrt",od="ScatterNd",id="TensorScatterUpdate",ad="SearchSorted",ru="Select",na="Selu",ou="Slice",sa="Sin",ra="Sinh",oa="Sign",ia="Sigmoid",aa="Softplus",la="Sqrt",iu="Sum",au="SpaceToBatchND",lu="SplitV",uu="Softmax",ld="SparseFillEmptyRows",ud="SparseReshape",cd="SparseSegmentMean",hd="SparseSegmentSum",dd="SparseToDense",ua="SquaredDifference",pd="Square",cu="StaticRegexReplace",fd="StridedSlice",md="StringNGrams",gd="StringSplit",Ad="StringToHashBucketFast",ca="Sub",ha="Tan",da="Tanh",pa="Tile",yd="TopK",xd="Transform",Do="Transpose",bd="Unique",hu="Unpack",du="UnsortedSegmentSum",pu="ZerosLike",fa="Step",wd="FromPixels",Id="RotateWithOffset",fu="_FusedMatMul",mu="FusedConv2D",gu="FusedDepthwiseConv2D";function Wn(...n){W().getBool("IS_TEST")||W().getBool("PROD")||console.warn(...n)}function gC(...n){W().getBool("IS_TEST")||W().getBool("PROD")||console.log(...n)}const Ro=fh("kernelRegistry",()=>new Map),ma=fh("gradRegistry",()=>new Map);function Au(n,t){const e=Sd(n,t);return Ro.get(e)}function Ig(n){return ma.get(n)}function Cd(n){const t=Ro.entries(),e=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[o,i]=r,[a]=o.split("_");a===n&&e.push(i)}return e}function vd(n){const{kernelName:t,backendName:e}=n,s=Sd(t,e);Ro.has(s)&&Wn(`The kernel '${t}' for backend '${e}' is already registered`),Ro.set(s,n)}function AC(n){const{kernelName:t}=n;ma.has(t)&&W().getBool("DEBUG")&&Wn(`Overriding the gradient for '${t}'`),ma.set(t,n)}function Sd(n,t){return`${t}_${n}`}function Cg(n){return n instanceof Float32Array||n instanceof Int32Array||n instanceof Uint8Array||n instanceof Uint8ClampedArray}var vg=j(6862);const Hr=j.n(vg)()||vg;function yu(n){return Hr.fromString(n,!0,16)}const Sg=yu("c3a5c85c97cb3127"),Kr=yu("b492b66fbe98f273"),bn=yu("9ae16a3b2f90404f");function Nd(n){return n.xor(n.shru(47))}function Ng(n,t,e){const s=n.slice(t,t+e);return Hr.fromBytes(Array.from(s),!0,!0)}function ft(n,t){return Ng(n,t,8)}function Tg(n,t){return Ng(n,t,4)}function Jt(n,t){return 0===t?n:n.shru(t).or(n.shl(64-t))}function ur(n,t,e=yu("9ddfea08eb382d69")){let s=n.xor(t).mul(e);s=s.xor(s.shru(47));let r=t.xor(s).mul(e);return r=r.xor(r.shru(47)),r=r.mul(e),r}function xu(n,t,e,s){return function xC(n,t,e,s,r,o){r=r.add(n),o=Jt(o.add(r).add(s),21);const i=r;return r=(r=r.add(t)).add(e),o=o.add(Jt(r,44)),[r.add(s),o.add(i)]}(ft(n,t),ft(n,t+8),ft(n,t+16),ft(n,t+24),e,s)}function CC(n,t=n.length){const e=Hr.fromNumber(81,!0);if(t<=32)return t<=16?function bC(n,t=n.length){if(t>=8){const e=bn.add(2*t),s=ft(n,0).add(bn),r=ft(n,t-8);return ur(Jt(r,37).mul(e).add(s),Jt(s,25).add(r).mul(e),e)}if(t>=4){const e=bn.add(2*t);return ur(Tg(n,0).shl(3).add(t),Tg(n,t-4),e)}if(t>0){const i=t+(n[t-1]<<2);return Nd(bn.mul(n[0]+(n[t>>1]<<8)).xor(Sg.mul(i))).mul(bn)}return bn}(n,t):function wC(n,t=n.length){const e=bn.add(2*t),s=ft(n,0).mul(Kr),r=ft(n,8),o=ft(n,t-8).mul(e),i=ft(n,t-16).mul(bn);return ur(Jt(s.add(r),43).add(Jt(o,30)).add(i),s.add(Jt(r.add(bn),18)).add(o),e)}(n,t);if(t<=64)return function IC(n,t=n.length){const e=bn.add(2*t),s=ft(n,0).mul(bn),r=ft(n,8),o=ft(n,t-8).mul(e),i=ft(n,t-16).mul(bn),a=Jt(s.add(r),43).add(Jt(o,30)).add(i),l=ur(a,s.add(Jt(r.add(bn),18)).add(o),e),u=ft(n,16).mul(e),c=ft(n,24),h=a.add(ft(n,t-32)).mul(e),d=l.add(ft(n,t-24)).mul(e);return ur(Jt(u.add(c),43).add(Jt(h,30)).add(d),u.add(Jt(c.add(s),18)).add(h),e)}(n,t);let s=e,r=e.mul(Kr).add(113),o=Nd(r.mul(bn).add(113)).mul(bn),i=[Hr.UZERO,Hr.UZERO],a=[Hr.UZERO,Hr.UZERO];s=s.mul(bn).add(ft(n,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{s=Jt(s.add(r).add(i[0]).add(ft(n,l+8)),37).mul(Kr),r=Jt(r.add(i[1]).add(ft(n,l+48)),42).mul(Kr),s=s.xor(a[1]),r=r.add(i[0]).add(ft(n,l+40)),o=Jt(o.add(a[0]),33).mul(Kr),i=xu(n,l,i[1].mul(Kr),s.add(a[0])),a=xu(n,l+32,o.add(a[1]),r.add(ft(n,l+16))),[o,s]=[s,o],l+=64}while(l!==u);const h=Kr.add(o.and(255).shl(1));return l=c,a[0]=a[0].add(t-1&63),i[0]=i[0].add(a[0]),a[0]=a[0].add(i[0]),s=Jt(s.add(r).add(i[0]).add(ft(n,l+8)),37).mul(h),r=Jt(r.add(i[1]).add(ft(n,l+48)),42).mul(h),s=s.xor(a[1].mul(9)),r=r.add(i[0].mul(9).add(ft(n,l+40))),o=Jt(o.add(a[0]),33).mul(h),i=xu(n,l,i[1].mul(h),s.add(a[0])),a=xu(n,l+32,o.add(a[1]),r.add(ft(n,l+16))),[o,s]=[s,o],ur(ur(i[0],a[0],h).add(Nd(r).mul(Sg)).add(o),ur(i[1],a[1],h).add(s),h)}function cr(n,t){return"string"===t?hr(n):qr([n],t)}function qr(n,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(n)&&(n=jr(n)),W().getBool("DEBUG")&&function sC(n,t){for(let e=0;e<n.length;e++){const s=n[e];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}(n,t),function vC(n,t){return n instanceof Float32Array&&"float32"===t||n instanceof Int32Array&&"int32"===t||n instanceof Uint8Array&&"bool"===t}(n,t))return n;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(n);if("int32"===t)return new Int32Array(n);if("bool"===t){const e=new Uint8Array(n.length);for(let s=0;s<e.length;++s)0!==Math.round(n[s])&&(e[s]=1);return e}throw new Error(`Unknown data type ${t}`)}function Tn(){return W().platform.now()}function hr(n,t="utf-8"){return t=t||"utf-8",W().platform.encode(n,t)}function dr(n,t="utf-8"){return t=t||"utf-8",W().platform.decode(n,t)}function ss(n){return null!=W().platform.isTypedArray?W().platform.isTypedArray(n):Cg(n)}function jr(n,t=[],e=!1){if(null==t&&(t=[]),"boolean"==typeof n||"number"==typeof n||"string"==typeof n||Gr(n)||null==n||ss(n)&&e)t.push(n);else if(Array.isArray(n)||ss(n))for(let s=0;s<n.length;++s)jr(n[s],t,e);else{let s=-1;for(const r of Object.keys(n))/^([1-9]+[0-9]*|0)$/.test(r)&&(s=Math.max(s,Number(r)));for(let r=0;r<=s;r++)jr(n[r],t,e)}return t}class SC{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new TC)}profileKernel(t,e,s){let r;const o=()=>{r=s()};let i;const a=Tn();if(this.backendTimer.timerAvailable())i=this.backendTimer.time(o);else{o();for(const u of r)u.dataSync();i=Promise.resolve({kernelMs:Tn()-a})}if(W().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let u=0;u<r.length;u++){const c=r[u];c.data().then(h=>{NC(h,c.dtype,t)})}return{kernelName:t,outputs:r,inputs:e,timeMs:i.then(u=>u.kernelMs),extraInfo:i.then(u=>null!=u.getExtraProfileInfo?u.getExtraProfileInfo():"")}}logKernelProfile(t){const{kernelName:e,outputs:s,timeMs:r,inputs:o,extraInfo:i}=t;s.forEach(a=>{Promise.all([a.data(),r,i]).then(l=>{this.logger.logKernelProfile(e,a,l[0],l[1],o,l[2])})})}}function NC(n,t,e){if("float32"!==t)return!1;for(let s=0;s<n.length;s++){const r=n[s];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${e}'`),!0}return!1}class TC{logKernelProfile(t,e,s,r,o,i){const a="number"==typeof r?To(`${r}ms`,9):r.error,l=To(t,25),u=e.rank,c=e.size,h=To(e.shape.toString(),14);let d="";for(const p in o){const f=o[p];if(null!=f){const g=f.shape||e.shape,m=g.length;d+=`${p}: ${m}D ${m>0?g:""} `}}console.log(`%c${l}\t%c${a}\t%c${u}D ${h}\t%c${c}\t%c${d}\t%c${i}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}const kg=20,ga=3,Td=7;function _C(n,t,e,s){const r=Ne(t),o=function DC(n,t,e,s){const r=Q(t),o=s[s.length-1],i=new Array(o).fill(0),a=t.length,l="complex64"===e?ya(n):n;if(a>1)for(let u=0;u<r/o;u++){const c=u*o;for(let h=0;h<o;h++)i[h]=Math.max(i[h],Aa(l[c+h],0,e).length)}return i}(n,t,e,r),i=t.length,a=bu(n,t,e,r,o),l=["Tensor"];return s&&(l.push(`  dtype: ${e}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(a.map(u=>"    "+u).join("\n")),l.join("\n")}function Aa(n,t,e){let s;return s=Array.isArray(n)?`${parseFloat(n[0].toFixed(Td))} + ${parseFloat(n[1].toFixed(Td))}j`:xi(n)?`'${n}'`:"bool"===e?Eg(n):parseFloat(n.toFixed(Td)).toString(),To(s,t)}function Eg(n){return 0===n?"false":"true"}function bu(n,t,e,s,r,o=!0){const i="complex64"===e?2:1,a=t[0],l=t.length;if(0===l)return"complex64"===e?[Aa(ya(n)[0],0,e)]:"bool"===e?[Eg(n[0])]:[n[0].toString()];if(1===l){if(a>kg){let A=Array.from(n.slice(0,ga*i)),y=Array.from(n.slice((a-ga)*i,a*i));return"complex64"===e&&(A=ya(A),y=ya(y)),["["+A.map((x,b)=>Aa(x,r[b],e)).join(", ")+", ..., "+y.map((x,b)=>Aa(x,r[a-ga+b],e)).join(", ")+"]"]}return["["+("complex64"===e?ya(n):Array.from(n)).map((m,A)=>Aa(m,r[A],e)).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*i,d=[];if(a>kg){for(let g=0;g<ga;g++){const m=g*h;d.push(...bu(n.slice(m,m+h),u,e,c,r,!1))}d.push("...");for(let g=a-ga;g<a;g++){const m=g*h;d.push(...bu(n.slice(m,m+h),u,e,c,r,g===a-1))}}else for(let g=0;g<a;g++){const m=g*h;d.push(...bu(n.slice(m,m+h),u,e,c,r,g===a-1))}const p=2===l?",":"";d[0]="["+(a>0?d[0]+p:"");for(let g=1;g<d.length-1;g++)d[g]=" "+d[g]+p;let f=",\n";for(let g=2;g<l;g++)f+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(o?"":f),d}function ya(n){const t=[];for(let e=0;e<n.length;e+=2)t.push([n[e],n[e+1]]);return t}class Gt{constructor(t,e,s){if(this.dtype=e,this.shape=t.slice(),this.size=Q(t),null!=s){const r=s.length;v(r===this.size,()=>`Length of values '${r}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=s||Ft(e,this.size),this.strides=Ne(t)}set(t,...e){0===e.length&&(e=[0]),v(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);const s=this.locToIndex(e);this.values[s]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const r of t){if(r<0||r>=this.shape[e])throw new Error(`Requested out of range element at ${t}.   Buffer shape=${this.shape}`);e++}let s=t[t.length-1];for(let r=0;r<t.length-1;++r)s+=this.strides[r]*t[r];return this.values[s]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let s=0;s<t.length-1;++s)e+=this.strides[s]*t[s];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let s=0;s<e.length-1;++s)e[s]=Math.floor(t/this.strides[s]),t-=e[s]*this.strides[s];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return gs().makeTensor(this.values,this.shape,this.dtype)}}let gs=null,$o=null,_g=null;class mt{constructor(t,e,s,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=Q(t),this.strides=Ne(t),this.dataId=s,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}buffer(){var t=this;return(0,q.Z)(function*(){const e=yield t.data();return $o.buffer(t.shape,t.dtype,e)})()}bufferSync(){return $o.buffer(this.shape,this.dtype,this.dataSync())}array(){var t=this;return(0,q.Z)(function*(){const e=yield t.data();return ns(t.shape,e,"complex64"===t.dtype)})()}arraySync(){return ns(this.shape,this.dataSync(),"complex64"===this.dtype)}data(){var t=this;return(0,q.Z)(function*(){t.throwIfDisposed();const e=gs().read(t.dataId);if("string"===t.dtype){const s=yield e;try{return s.map(r=>dr(r))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e})()}dataToGPU(t){return this.throwIfDisposed(),gs().readToGPU(this.dataId,t)}dataSync(){this.throwIfDisposed();const t=gs().readSync(this.dataId);if("string"===this.dtype)try{return t.map(e=>dr(e))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}bytes(){var t=this;return(0,q.Z)(function*(){t.throwIfDisposed();const e=yield gs().read(t.dataId);return"string"===t.dtype?e:new Uint8Array(e.buffer)})()}dispose(){this.isDisposed||(gs().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return $o.print(this,t)}clone(){return this.throwIfDisposed(),$o.clone(this)}toString(t=!1){return _C(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),$o.cast(this,t)}variable(t=!0,e,s){return this.throwIfDisposed(),gs().makeVariable(this,t,e,s)}}function X(){return fh("Tensor",()=>mt)}Object.defineProperty(mt,Symbol.hasInstance,{value:n=>!!n&&null!=n.data&&null!=n.dataSync&&null!=n.throwIfDisposed}),X();class wu extends mt{constructor(t,e,s,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=s}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!Qe(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);gs().disposeTensor(this),this.dataId=t.dataId,gs().incRef(this,null)}dispose(){gs().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(wu,Symbol.hasInstance,{value:n=>n instanceof mt&&null!=n.assign&&n.assign instanceof Function});var Dg=function(n){return n.float32="float32",n.int32="int32",n.bool="int32",n.complex64="complex64",n}(Dg||{}),Rg=function(n){return n.float32="float32",n.int32="int32",n.bool="bool",n.complex64="complex64",n}(Rg||{}),$g=function(n){return n.float32="float32",n.int32="float32",n.bool="float32",n.complex64="complex64",n}($g||{}),Fg=function(n){return n.float32="complex64",n.int32="complex64",n.bool="complex64",n.complex64="complex64",n}(Fg||{});const LC={float32:$g,int32:Dg,bool:Rg,complex64:Fg};function Fn(n,t){if("string"===n||"string"===t){if("string"===n&&"string"===t)return"string";throw new Error(`Can not upcast ${n} with ${t}`)}return LC[n][t]}function kd(n){return Fn(n,"int32")}function Og(n){return null!=n&&"object"==typeof n&&"texture"in n&&n.texture instanceof WebGLTexture}function Lg(n){return typeof GPUBuffer<"u"&&null!=n&&"object"==typeof n&&"buffer"in n&&n.buffer instanceof GPUBuffer}function Dt(n,t){if(n.dtype===t.dtype)return[n,t];const e=Fn(n.dtype,t.dtype);return[n.cast(e),t.cast(e)]}function Pg(n){const t=[];return Mg(n,t,new Set),t}function Mg(n,t,e){if(null==n)return;if(n instanceof mt)return void t.push(n);if(!function MC(n){return Array.isArray(n)||"object"==typeof n}(n))return;const s=n;for(const r in s){const o=s[r];e.has(o)||(e.add(o),Mg(o,t,e))}}function Ed(n){return null!=n.kernelName}class Bg{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(t=>t.name)))}}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}let BC=(()=>{class n{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Bg}ready(){var e=this;return(0,q.Z)(function*(){if(null!=e.pendingBackendInit)return e.pendingBackendInit.then(()=>{});if(null!=e.backendInstance)return;const s=e.getSortedBackends();for(let r=0;r<s.length;r++){const o=s[r];if(yield e.initializeBackend(o).success)return void(yield e.setBackend(o))}throw new Error("Could not initialize any backends, all backend initializations failed.")})()}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:s}=this.initializeBackendsAndReturnBest();if(s)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:s}=this.initializeBackend(e);if(s)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,s,r=1){return e in this.registryFactory?(Wn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:s,priority:r},!0)}setBackend(e){var s=this;return(0,q.Z)(function*(){if(null==s.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(s.backendName=e,null==s.registry[e]){s.backendInstance=null;const{success:r,asyncInit:o}=s.initializeBackend(e);if(!(o?yield r:r))return!1}return s.backendInstance=s.registry[e],s.setupRegisteredKernels(),s.profiler=new SC(s.backendInstance),!0})()}setupRegisteredKernels(){Cd(this.backendName).forEach(s=>{null!=s.setupFunc&&s.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){Cd(e).forEach(r=>{null!=r.disposeFunc&&r.disposeFunc(this.registry[e])})}initializeBackend(e){const s=this.registryFactory[e];if(null==s)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const r=s.factory();if(!r||r instanceof yn||"function"!=typeof r.then)return this.registry[e]=r,{success:!0,asyncInit:!1};{const o=++this.pendingBackendInitId,i=r.then(a=>!(o<this.pendingBackendInitId||(this.registry[e]=a,this.pendingBackendInit=null,0))).catch(a=>(o<this.pendingBackendInitId||(this.pendingBackendInit=null,Wn(`Initialization of backend ${e} failed`),Wn(a.stack||a.message)),!1));return this.pendingBackendInit=i,{success:i,asyncInit:!0}}}catch(r){return Wn(`Initialization of backend ${e} failed`),Wn(r.stack||r.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,s)=>this.registryFactory[s].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let s=0;s<e.length;s++){const r=e[s],{success:o,asyncInit:i}=this.initializeBackend(r);if(i||o)return{name:r,asyncInit:i}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,s){const r=this.state.tensorInfo.get(s),o=r.backend,i=this.readSync(s),a=o.refCount(s);o.disposeData(s,!0),r.backend=e,e.move(s,i,r.shape,r.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,s){let o,r=null;if(null==s){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");s=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof s)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(o),()=>(o=s(),o instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),o))}scopedRun(e,s,r){e();try{const o=r();return s(),o}catch(o){throw s(),o}}nextTensorId(){return n.nextTensorId++}nextVariableId(){return n.nextVariableId++}clone(e){const s=F.runKernel(zi,{x:e});return this.addTapeNode(this.state.activeScope.name,{x:e},[s],a=>({x:()=>F.runKernel(Ti,{x:a},{dtype:"float32"})}),[],{}),s}runKernel(e,s,r){if(null==Au(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:s,attrs:r})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,s,r){const o=this.backend.numDataIds();let i=0;r.forEach(u=>{i+="complex64"===u.dtype?3:1});const l=o-s-i-this.state.numDataMovesStack[this.state.numDataMovesStack.length-1];if(l>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${l} data ids) after running '${e}'`)}runKernelFunc(e){let s,r=[];const o=this.isTapeOn(),i=this.state.numBytes,a=this.state.numTensors;let l,u;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const c=Ed(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Ed(e)){const{kernelName:g,inputs:m,attrs:A}=e,y=Au(g,this.backendName);v(null!=y,()=>`Cannot find registered kernel '${g}' for backend '${this.backendName}'`),l=()=>{const x=this.backend.numDataIds();u=y.kernelFunc({inputs:m,attrs:A,backend:this.backend});const b=Array.isArray(u)?u:[u];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(g,x,b);const I=b.map(S=>null!=S.rank?S:this.makeTensorFromTensorInfo(S));if(o){const S=this.getTensorsForGradient(g,m,I);r=this.saveTensorsForBackwardMode(S)}return I}}else{const{forwardFunc:g}=e,m=A=>{o&&(r=A.map(y=>this.keep(this.clone(y))))};l=()=>{const A=this.backend.numDataIds();u=this.tidy(()=>g(this.backend,m));const y=Array.isArray(u)?u:[u];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(c,A,y),y}}const{inputs:h,attrs:d}=e,p=Ed(e)?null:e.backwardsFunc;let f;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(f=this.profiler.profileKernel(c,h,()=>l()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(f),s=f.outputs):s=l()}),o&&this.addTapeNode(c,h,s,p,r,d),this.state.profiling&&this.state.activeProfile.kernels.push({name:c,bytesAdded:this.state.numBytes-i,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(h).map(g=>null!=h[g]?h[g].shape:null),outputShapes:s.map(g=>g.shape),kernelTimeMs:f.timeMs,extraInfo:f.extraInfo}),Array.isArray(u)?s:s[0]}saveTensorsForBackwardMode(e){return e.map(r=>this.keep(this.clone(r)))}getTensorsForGradient(e,s,r){const o=Ig(e);if(null!=o){const i=o.inputsToSave||[],a=o.outputsToSave||[];let l;o.saveAllInputs?(v(Array.isArray(s),()=>"saveAllInputs is true, expected inputs to be an array."),l=Object.keys(s).map(c=>s[c])):l=i.map(c=>s[c]);const u=r.filter((c,h)=>a[h]);return l.concat(u)}return[]}makeTensor(e,s,r,o){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");o=o||this.backend;let i=e;"string"===(r=r||"float32")&&xi(e[0])&&(i=e.map(u=>hr(u)));const a=o.write(i,s,r),l=new mt(s,r,a,this.nextTensorId());if(this.trackTensor(l,o),"string"===r){const u=this.state.tensorInfo.get(a),c=function oC(n){if(null==n)return 0;let t=0;return n.forEach(e=>t+=e.length),t}(i);this.state.numBytes+=c-u.bytes,u.bytes=c}return l}makeTensorFromDataId(e,s,r,o){return this.makeTensorFromTensorInfo({dataId:e,shape:s,dtype:r=r||"float32"},o)}makeTensorFromTensorInfo(e,s){const{dataId:r,shape:o,dtype:i}=e,a=new mt(o,i,r,this.nextTensorId());return this.trackTensor(a,s),a}makeVariable(e,s=!0,r,o){r=r||this.nextVariableId().toString(),null!=o&&o!==e.dtype&&(e=e.cast(o));const i=new wu(e,s,r,this.nextTensorId());if(null!=this.state.registeredVariables[i.name])throw new Error(`Variable with name ${i.name} was already registered`);return this.state.registeredVariables[i.name]=i,this.incRef(i,this.backend),i}trackTensor(e,s){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let r=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(r=e.size*cl(e.dtype)),this.state.numBytes+=r,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:s||this.backend,dtype:e.dtype,shape:e.shape,bytes:r})),e instanceof wu||this.track(e)}incRef(e,s){this.trackTensor(e,s),this.backend.incRef(e.dataId)}removeDataId(e,s){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===s&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const s=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=s.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const r=e.size*cl(e.dtype);this.state.numBytes-=r}s.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,s.backend)}disposeVariables(){for(const e in this.state.registeredVariables)this.disposeVariable(this.state.registeredVariables[e])}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}profile(e){var s=this;return(0,q.Z)(function*(){s.state.profiling=!0;const r=s.state.numBytes,o=s.state.numTensors;s.state.activeProfile.kernels=[],s.state.activeProfile.result=yield e(),s.state.profiling=!1,s.state.activeProfile.peakBytes=Math.max(...s.state.activeProfile.kernels.map(i=>i.totalBytesSnapshot)),s.state.activeProfile.newBytes=s.state.numBytes-r,s.state.activeProfile.newTensors=s.state.numTensors-o;for(const i of s.state.activeProfile.kernels)i.kernelTimeMs=yield i.kernelTimeMs,i.extraInfo=yield i.extraInfo;return s.state.activeProfile})()}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,s,r,o,i,a){const l={id:this.state.nextTapeNodeId++,kernelName:e,inputs:s,outputs:r,saved:i},u=Ig(e);null!=u&&(o=u.gradFunc),null!=o&&(l.gradient=c=>(c=c.map((h,d)=>{if(null==h){const p=r[d],f=dn(p.size,p.dtype);return this.makeTensor(f,p.shape,p.dtype)}return h}),o(c.length>1?c:c[0],i,a))),this.state.activeTape.push(l)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const s={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(s.name=e),this.state.scopeStack.push(s),this.state.activeScope=s}endScope(e){const s=Pg(e),r=new Set(s.map(i=>i.id));for(let i=0;i<this.state.activeScope.track.length;i++){const a=this.state.activeScope.track[i];!a.kept&&!r.has(a.id)&&a.dispose()}const o=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],s.forEach(i=>{!i.kept&&i.scopeId===o.id&&this.track(i)})}gradients(e,s,r,o=!1){if(v(s.length>0,()=>"gradients() received an empty list of xs."),null!=r&&"float32"!==r.dtype)throw new Error(`dy must have 'float32' dtype, but has '${r.dtype}'`);const i=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));v(i instanceof mt,()=>"The result y returned by f() must be a tensor.");const a=function kC(n,t,e){const s={},r={};for(let l=0;l<t.length;l++)s[t[l].id]=!0;for(let l=0;l<n.length;l++){const u=n[l],c=u.inputs;for(const h in c){const d=c[h];let p=!1;for(let f=0;f<t.length;f++)if(s[d.id]){u.outputs.forEach(g=>s[g.id]=!0),p=!0,r[u.id]=!0;break}if(p)break}}const o={};o[e.id]=!0;const i={};for(let l=n.length-1;l>=0;l--){const u=n[l],c=u.inputs;for(let h=0;h<u.outputs.length;h++)if(o[u.outputs[h].id]){for(const d in c)o[c[d].id]=!0,i[u.id]=!0;break}}const a=[];for(let l=0;l<n.length;l++){const u=n[l];if(r[u.id]&&i[u.id]){const c={};for(const d in u.inputs){const p=u.inputs[d];s[p.id]&&(c[d]=p)}const h=Object.assign({},u);h.inputs=c,h.outputs=u.outputs,a.push(h)}}return a}(this.state.activeTape,s,i);if(!o&&0===a.length&&s.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const l={};l[i.id]=null==r?function zC(n){const t=dh(Q(n),"float32");return F.makeTensor(t,n,"float32")}(i.shape):r,function EC(n,t,e,s){for(let r=t.length-1;r>=0;r--){const o=t[r],i=[];if(o.outputs.forEach(l=>{const u=n[l.id];i.push(null!=u?u:null)}),null==o.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${o.kernelName}.`);const a=o.gradient(i);for(const l in o.inputs){if(!(l in a))throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(a)}.`);const u=e(()=>a[l]());if("float32"!==u.dtype)throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${u.dtype}'`);const c=o.inputs[l];if(!Qe(u.shape,c.shape))throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input '${l}' has shape '${u.shape}', which does not match the shape of the input '${c.shape}'`);if(null==n[c.id])n[c.id]=u;else{const h=n[c.id];n[c.id]=s(h,u),h.dispose()}}}}(l,a,c=>this.tidy(c),VC);const u=s.map(c=>l[c.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(c=>{for(const h of c.saved)h.dispose()}),this.state.activeTape=null),{value:i,grads:u}})}customGrad(e){return v(ch(e),()=>"The f passed in customGrad(f) must be a function."),(...s)=>{let r;v(s.every(l=>l instanceof mt),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const o={};return s.forEach((l,u)=>{o[u]=l}),this.runKernelFunc({forwardFunc:(l,u)=>(r=e(...s,u),v(r.value instanceof mt,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),v(ch(r.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),r.value),backwardsFunc:(l,u)=>{const c=r.gradFunc(l,u),h=Array.isArray(c)?c:[c];v(h.length===s.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),v(h.every(p=>p instanceof mt),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const d={};return h.forEach((p,f)=>{d[f]=()=>p}),d},inputs:o})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,s){return this.state.tensorInfo.get(e).backend.readToGPU(e,s)}time(e){var s=this;return(0,q.Z)(function*(){const r=Tn(),o=yield s.backend.time(e);return o.wallMs=Tn()-r,o})()}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Bg;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}return n.nextTensorId=0,n.nextVariableId=0,n})();function zg(){const n=wg();if(null==n._tfengine){const t=new lC(n);n._tfengine=new BC(t)}return function dC(n){bg=n}(n._tfengine.ENV),function RC(n){gs=n}(()=>n._tfengine),n._tfengine}const F=zg();function VC(n,t){return F.runKernel(_o,{a:n,b:t})}function Vg(n){if(n||function UC(){return typeof navigator<"u"&&null!=navigator}()){if(n||(n=navigator),"ReactNative"===n.product)return!0;const t=n.userAgent||n.vendor||(typeof window<"u"?window.opera:"");return t?/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4)):n.userAgentData&&n.userAgentData.mobile}return!1}function Ug(){return typeof window<"u"&&null!=window.document||typeof WorkerGlobalScope<"u"}const kn=W();function pr(n,t){let e=n;if(ss(n))return"string"===t?[]:[n.length];if(Og(n))return[n.height,n.width*(n.channels||"RGBA").length];if(Lg(n))return[n.buffer.size/(null==t?4:cl(t))];if(!Array.isArray(n))return[];const s=[];for(;Array.isArray(e)||ss(e)&&"string"!==t;)s.push(e.length),e=e[0];return Array.isArray(n)&&W().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Wg(n,s,[]),s}function Wg(n,t,e){if(e=e||[],!Array.isArray(n)&&!ss(n))return void v(0===t.length,()=>`Element arr[${e.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);v(t.length>0,()=>`Element arr[${e.join("][")}] should be a primitive, but is an array of ${n.length} elements`),v(n.length===t[0],()=>`Element arr[${e.join("][")}] should have ${t[0]} elements, but has ${n.length} elements`);const s=t.slice(1);for(let r=0;r<n.length;++r)Wg(n[r],s,e.concat(r))}function Gg(n,t,e,s){if("string_or_numeric"!==n){if(null==n)throw new Error("Expected dtype cannot be null.");if("numeric"!==n&&n!==t||"numeric"===n&&"string"===t)throw new Error(`Argument '${e}' passed to '${s}' must be ${n} tensor, but got ${t} tensor`)}}function N(n,t,e,s="numeric"){if(n instanceof mt)return Gg(s,n.dtype,t,e),n;let r=ko(n);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),Gg(s,r,t,e),null==n||!ss(n)&&!Array.isArray(n)&&"number"!=typeof n&&"boolean"!=typeof n&&"string"!=typeof n)throw new Error(`Argument '${t}' passed to '${e}' must be a Tensor or TensorLike, but got '${null==n?"null":n.constructor.name}'`);const o=pr(n,r);!ss(n)&&!Array.isArray(n)&&(n=[n]);const a="string"!==r?qr(n,r):jr(n,[],!0);return F.makeTensor(a,o,r)}function Iu(n,t,e,s="numeric"){if(!Array.isArray(n))throw new Error(`Argument ${t} passed to ${e} must be a \`Tensor[]\` or \`TensorLike[]\``);return n.map((o,i)=>N(o,`${t}[${i}]`,e,s))}kn.registerFlag("DEBUG",()=>!1,n=>{n&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),kn.registerFlag("IS_BROWSER",()=>Ug()),kn.registerFlag("IS_NODE",()=>typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u"),kn.registerFlag("IS_CHROME",()=>typeof navigator<"u"&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),kn.registerFlag("IS_SAFARI",()=>typeof navigator<"u"&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor)),kn.registerFlag("PROD",()=>!1),kn.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>kn.getBool("DEBUG")),kn.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),kn.registerFlag("IS_TEST",()=>!1),kn.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>kn.getBool("DEBUG")),kn.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),kn.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),kn.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);const Hg="__op";function $(n){const t=Object.keys(n);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let e=t[0];const s=n[e];e.endsWith("_")&&(e=e.substring(0,e.length-1)),e+=Hg;const r=(...o)=>{F.startScope(e);try{const i=s(...o);return Gr(i)&&console.error("Cannot return a Promise inside of tidy."),F.endScope(i),i}catch(i){throw F.endScope(null),i}};return Object.defineProperty(r,"name",{value:e,configurable:!0}),r}const fr=$({complex_:function WC(n,t){const e=N(n,"real","complex"),s=N(t,"imag","complex");return $n(e.shape,s.shape,`real and imag shapes, ${e.shape} and ${s.shape}, must match in call to tf.complex().`),F.runKernel(wh,{real:e,imag:s})}});function mr(n,t,e,s){if(null==s)s=ko(n);else if("complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(Lg(n)||Og(n)){if("float32"!==s&&"int32"!==s)throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${s}.`);return F.backend.createTensorFromGPUData(n,t||e,s)}if(!ss(n)&&!Array.isArray(n)&&"number"!=typeof n&&"boolean"!=typeof n&&"string"!=typeof n)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Un(t);const r=Q(t),o=Q(e);v(r===o,()=>`Based on the provided shape, [${t}], the tensor should have ${r} values but has ${o}`);for(let i=0;i<e.length;++i){const l=i!==e.length-1||e[i]!==Q(t.slice(i));v(e[i]===t[i]||!l,()=>`Error creating a new Tensor. Inferred shape (${e}) does not match the provided shape (${t}). `)}}return!ss(n)&&!Array.isArray(n)&&(n=[n]),t=t||e,n="string"!==s?qr(n,s):jr(n,[],!0),F.makeTensor(n,t,s)}function St(n,t,e){return mr(n,t,pr(n,e),e)}const Dd={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};class As{static join(t){return new As(t).slice()}constructor(t){if(this.shards=[],this.previousShardIndex=0,null==t||(t instanceof Array||(t=[t]),0===(t=t.map(s=>ss(s)?s.buffer:s)).length))return;this.bufferUniformSize=t[0].byteLength;let e=0;for(let s=0;s<t.length;s++){const r=t[s];s!==t.length-1&&r.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const o=e+r.byteLength;this.shards.push({buffer:r,start:e,end:o}),e=o}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(t=0,e=this.byteLength){if(0===this.shards.length)return new ArrayBuffer(0);if(t=isNaN(Number(t))?0:t,e=isNaN(Number(e))?0:e,t=Math.max(0,t),(e=Math.min(this.byteLength,e))<=t)return new ArrayBuffer(0);const s=this.findShardForByte(t);if(-1===s)throw new Error(`Could not find start shard for byte ${t}`);const o=new ArrayBuffer(e-t),i=new Uint8Array(o);let a=0;for(let l=s;l<this.shards.length;l++){const u=this.shards[l],h=t+a-u.start,d=a,f=Math.min(e,u.end)-u.start,g=new Uint8Array(u.buffer,h,f-h);if(i.set(g,d),a+=g.length,e<u.end)break}return o}findShardForByte(t){if(0===this.shards.length||t<0||t>=this.byteLength)return-1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(t/this.bufferUniformSize),this.previousShardIndex;function e(r){return t<r.start?-1:t>=r.end?1:0}if(0===e(this.shards[this.previousShardIndex]))return this.previousShardIndex;const s=function GC(n,t){let e=0,s=n.length;for(;e<=s;){const r=Math.floor((s-e)/2)+e,o=t(n[r]);if(0===o)return r;o<0?s=r:e=r+1}return-1}(this.shards,e);return-1===s?-1:(this.previousShardIndex=s,this.previousShardIndex)}}const Cu=4;function Rd(n,t){return $d.apply(this,arguments)}function $d(){return $d=(0,q.Z)(function*(n,t){const e=[],s=[],r=Array.isArray(n)?n.map(i=>i.name):Object.keys(n);for(let i=0;i<r.length;++i){const a=r[i],l=Array.isArray(n)?n[i].tensor:n[a];if("float32"!==l.dtype&&"int32"!==l.dtype&&"bool"!==l.dtype&&"string"!==l.dtype&&"complex64"!==l.dtype)throw new Error(`Unsupported dtype in weight '${a}': ${l.dtype}`);const u={name:a,shape:l.shape,dtype:l.dtype};if("string"===l.dtype){const c=new Promise(function(){var h=(0,q.Z)(function*(d){const p=yield l.bytes(),f=p.reduce((A,y)=>A+y.length,0)+Cu*p.length,g=new Uint8Array(f);let m=0;for(let A=0;A<p.length;A++){const y=p[A],x=new Uint8Array(new Uint32Array([y.length]).buffer);g.set(x,m),m+=Cu,g.set(y,m),m+=y.length}d(g)});return function(d){return h.apply(this,arguments)}}());s.push(c)}else s.push(l.data());null!=t&&(u.group=t),e.push(u)}return{data:HC(yield Promise.all(s)),specs:e}}),$d.apply(this,arguments)}function Kg(n,t){const e=new As(n),s={};let r,o=0;for(const i of t){const a=i.name,l=i.dtype,u=i.shape,c=Q(u);let h;if("quantization"in i){const d=i.quantization;if("uint8"===d.dtype||"uint16"===d.dtype){if(!("min"in d)||!("scale"in d))throw new Error(`Weight ${i.name} with quantization ${d.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==d.dtype)throw new Error(`Weight ${i.name} has unknown quantization dtype ${d.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==l)throw new Error(`Weight ${i.name} is quantized with ${d.dtype} which only supports weights of type float32 not ${l}.`)}const p=Dd[d.dtype],f=e.slice(o,o+c*p),g="uint8"===d.dtype?new Uint8Array(f):new Uint16Array(f);if("float32"===l)if("uint8"===d.dtype||"uint16"===d.dtype){h=new Float32Array(g.length);for(let m=0;m<g.length;m++)h[m]=g[m]*d.scale+d.min}else{if("float16"!==d.dtype)throw new Error(`Unsupported quantization type ${d.dtype} for weight type float32.`);void 0===r&&(r=ZC()),h=r(g)}else{if("int32"!==l)throw new Error(`Unsupported dtype in weight '${a}': ${l}`);if("uint8"!==d.dtype&&"uint16"!==d.dtype)throw new Error(`Unsupported quantization type ${d.dtype} for weight type int32.`);h=new Int32Array(g.length);for(let m=0;m<g.length;m++)h[m]=Math.round(g[m]*d.scale+d.min)}o+=c*p}else if("string"===l){const d=Q(i.shape);h=[];for(let p=0;p<d;p++){const f=new Uint32Array(e.slice(o,o+Cu))[0];o+=Cu;const g=new Uint8Array(e.slice(o,o+f));h.push(g),o+=f}}else{const d=Dd[l],p=e.slice(o,o+c*d);if("float32"===l)h=new Float32Array(p);else if("int32"===l)h=new Int32Array(p);else if("bool"===l)h=new Uint8Array(p);else{if("complex64"!==l)throw new Error(`Unsupported dtype in weight '${a}': ${l}`);{h=new Float32Array(p);const f=new Float32Array(h.length/2),g=new Float32Array(h.length/2);for(let y=0;y<f.length;y++)f[y]=h[2*y],g[y]=h[2*y+1];const m=St(f,u,"float32"),A=St(g,u,"float32");s[a]=fr(m,A),m.dispose(),A.dispose()}}o+=c*d}"complex64"!==l&&(s[a]=St(h,u,l))}return s}function HC(n){if(null===n)throw new Error(`Invalid input value: ${JSON.stringify(n)}`);let t=0;const e=[];n.forEach(o=>{if(t+=o.byteLength,e.push(o.byteLength===o.buffer.byteLength?o:new o.constructor(o)),!(o instanceof Float32Array||o instanceof Int32Array||o instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${o.constructor.name}`)});const s=new Uint8Array(t);let r=0;return e.forEach(o=>{s.set(new Uint8Array(o.buffer),r),r+=o.byteLength}),s.buffer}const Fd=typeof Buffer<"u"&&(typeof Blob>"u"||typeof atob>"u"||typeof btoa>"u");function qg(n){return Fd?Buffer.byteLength(n,"utf8"):new Blob([n]).size}function jg(n){return As.join(n)}function Qg(n){for(n=n.trim();n.endsWith("/");)n=n.slice(0,n.length-1);const e=n.split("/");return e[e.length-1]}function Xg(n,t){const e={modelTopology:n.modelTopology,format:n.format,generatedBy:n.generatedBy,convertedBy:n.convertedBy,weightsManifest:t};return null!=n.signature&&(e.signature=n.signature),null!=n.userDefinedMetadata&&(e.userDefinedMetadata=n.userDefinedMetadata),null!=n.modelInitializer&&(e.modelInitializer=n.modelInitializer),null!=n.initializerSignature&&(e.initializerSignature=n.initializerSignature),null!=n.trainingConfig&&(e.trainingConfig=n.trainingConfig),e}function Zg(n,t,e){const s={modelTopology:n.modelTopology,format:n.format,generatedBy:n.generatedBy,convertedBy:n.convertedBy};if(null!=n.trainingConfig&&(s.trainingConfig=n.trainingConfig),null!=n.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!e)throw new Error("modelJSON has weightsManifest but weightData is null");s.weightSpecs=t,s.weightData=e}return null!=n.signature&&(s.signature=n.signature),null!=n.userDefinedMetadata&&(s.userDefinedMetadata=n.userDefinedMetadata),null!=n.modelInitializer&&(s.modelInitializer=n.modelInitializer),null!=n.initializerSignature&&(s.initializerSignature=n.initializerSignature),s}function Od(n,t){return Ld.apply(this,arguments)}function Ld(){return(Ld=(0,q.Z)(function*(n,t){let e,s;return null!=n.weightsManifest&&([e,s]=yield t(n.weightsManifest)),Zg(n,e,s)})).apply(this,arguments)}function xa(n){if(n.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==n.modelTopology?0:qg(JSON.stringify(n.modelTopology)),weightSpecsBytes:null==n.weightSpecs?0:qg(JSON.stringify(n.weightSpecs)),weightDataBytes:null==n.weightData?0:new As(n.weightData).byteLength}}function Yg(n){const t=[];for(const e of n)t.push(...e.weights);return t}function ZC(){const n=function jC(){const n=e=>{let s=e<<13,r=0;for(;!(8388608&s);)r-=8388608,s<<=1;return s&=-8388609,r+=947912704,s|r},t=new Uint32Array(2048);t[0]=0;for(let e=1;e<1024;e++)t[e]=n(e);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function QC(){const n=new Uint32Array(64);n[0]=0,n[31]=1199570944,n[32]=2147483648,n[63]=3347054592;for(let t=1;t<31;t++)n[t]=t<<23;for(let t=33;t<63;t++)n[t]=2147483648+(t-32<<23);return n}(),e=function XC(){const n=new Uint32Array(64);for(let t=0;t<64;t++)n[t]=1024;return n[0]=n[32]=0,n}();return s=>{const r=new ArrayBuffer(4*s.length),o=new Uint32Array(r);for(let i=0;i<s.length;i++){const a=s[i];o[i]=n[e[a>>10]+(1023&a)]+t[a>>10]}return new Float32Array(r)}}class Nt{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Nt.instance&&(Nt.instance=new Nt),Nt.instance}static registerSaveRouter(t){Nt.getInstance().saveRouters.push(t)}static registerLoadRouter(t){Nt.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return Nt.getHandlers(t,"save")}static getLoadHandlers(t,e){return Nt.getHandlers(t,"load",e)}static getHandlers(t,e,s){const r=[];return("load"===e?Nt.getInstance().loadRouters:Nt.getInstance().saveRouters).forEach(i=>{const a=i(t,s);null!==a&&r.push(a)}),r}}const YC=n=>Nt.registerSaveRouter(n),JC=n=>Nt.registerLoadRouter(n),Jg=n=>Nt.getSaveHandlers(n),ev=(n,t)=>Nt.getLoadHandlers(n,t),vu="tensorflowjs",Qr="models_store",gr="model_info_store";function Bd(){if(!W().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const n=typeof window>"u"?self:window,t=n.indexedDB||n.mozIndexedDB||n.webkitIndexedDB||n.msIndexedDB||n.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function zd(n){const t=n.result;t.createObjectStore(Qr,{keyPath:"modelPath"}),t.createObjectStore(gr,{keyPath:"modelPath"})}let Fo=(()=>{class n{constructor(e){if(this.indexedDB=Bd(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}save(e){var s=this;return(0,q.Z)(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return s.databaseAction(s.modelPath,e)})()}load(){var e=this;return(0,q.Z)(function*(){return e.databaseAction(e.modelPath)})()}databaseAction(e,s){return new Promise((r,o)=>{const i=this.indexedDB.open(vu,1);i.onupgradeneeded=()=>zd(i),i.onsuccess=()=>{const a=i.result;if(null==s){const l=a.transaction(Qr,"readonly"),c=l.objectStore(Qr).get(this.modelPath);c.onsuccess=()=>{if(null==c.result)return a.close(),o(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));r(c.result.modelArtifacts)},c.onerror=h=>(a.close(),o(c.error)),l.oncomplete=()=>a.close()}else{s.weightData=As.join(s.weightData);const l=xa(s),u=a.transaction(gr,"readwrite");let h,d,c=u.objectStore(gr);try{h=c.put({modelPath:this.modelPath,modelArtifactsInfo:l})}catch(p){return o(p)}h.onsuccess=()=>{d=a.transaction(Qr,"readwrite");const p=d.objectStore(Qr);let f;try{f=p.put({modelPath:this.modelPath,modelArtifacts:s,modelArtifactsInfo:l})}catch(g){return o(g)}f.onsuccess=()=>r({modelArtifactsInfo:l}),f.onerror=g=>{c=u.objectStore(gr);const m=c.delete(this.modelPath);m.onsuccess=()=>(a.close(),o(f.error)),m.onerror=A=>(a.close(),o(f.error))}},h.onerror=p=>(a.close(),o(h.error)),u.oncomplete=()=>{null==d?a.close():d.oncomplete=()=>a.close()}}},i.onerror=a=>o(i.error)})}}return n.URL_SCHEME="indexeddb://",n})();const eA=n=>W().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(Fo.URL_SCHEME)?function tv(n){return new Fo(n)}(n.slice(Fo.URL_SCHEME.length)):null;Nt.registerSaveRouter(eA),Nt.registerLoadRouter(eA);class sv{constructor(){this.indexedDB=Bd()}listModels(){var t=this;return(0,q.Z)(function*(){return new Promise((e,s)=>{const r=t.indexedDB.open(vu,1);r.onupgradeneeded=()=>zd(r),r.onsuccess=()=>{const o=r.result,i=o.transaction(gr,"readonly"),l=i.objectStore(gr).getAll();l.onsuccess=()=>{const u={};for(const c of l.result)u[c.modelPath]=c.modelArtifactsInfo;e(u)},l.onerror=u=>(o.close(),s(l.error)),i.oncomplete=()=>o.close()},r.onerror=o=>s(r.error)})})()}removeModel(t){var e=this;return(0,q.Z)(function*(){return t=function nv(n){return n.startsWith(Fo.URL_SCHEME)?n.slice(Fo.URL_SCHEME.length):n}(t),new Promise((s,r)=>{const o=e.indexedDB.open(vu,1);o.onupgradeneeded=()=>zd(o),o.onsuccess=()=>{const i=o.result,a=i.transaction(gr,"readwrite"),l=a.objectStore(gr),u=l.get(t);let c;u.onsuccess=()=>{if(null==u.result)return i.close(),r(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const h=l.delete(t),d=()=>{c=i.transaction(Qr,"readwrite");const f=c.objectStore(Qr).delete(t);f.onsuccess=()=>s(u.result.modelArtifactsInfo),f.onerror=g=>r(u.error)};h.onsuccess=d,h.onerror=p=>(d(),i.close(),r(u.error))}},u.onerror=h=>(i.close(),r(u.error)),a.oncomplete=()=>{null==c?i.close():c.oncomplete=()=>i.close()}},o.onerror=i=>r(o.error)})})()}}const _s="/",Xr="tensorflowjs_models",tA="info",rv="model_topology",ov="weight_specs",iv="weight_data",av="model_metadata";function nA(n){return{info:[Xr,n,tA].join(_s),topology:[Xr,n,rv].join(_s),weightSpecs:[Xr,n,ov].join(_s),weightData:[Xr,n,iv].join(_s),modelMetadata:[Xr,n,av].join(_s)}}function sA(n){for(const t of Object.values(n))window.localStorage.removeItem(t)}function rA(n){const t=n.split(_s);if(t.length<3)throw new Error(`Invalid key format: ${n}`);return t.slice(1,t.length-1).join(_s)}let Oo=(()=>{class n{constructor(e){if(!W().getBool("IS_BROWSER")||typeof window>"u"||typeof window.localStorage>"u")throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=nA(this.modelPath)}save(e){var s=this;return(0,q.Z)(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const r=JSON.stringify(e.modelTopology),o=JSON.stringify(e.weightSpecs),i=xa(e),a=As.join(e.weightData);try{return s.LS.setItem(s.keys.info,JSON.stringify(i)),s.LS.setItem(s.keys.topology,r),s.LS.setItem(s.keys.weightSpecs,o),s.LS.setItem(s.keys.weightData,function KC(n){if(Fd)return Buffer.from(n).toString("base64");const t=new Uint8Array(n);let e="";for(let s=0,r=t.length;s<r;s++)e+=String.fromCharCode(t[s]);return btoa(e)}(a)),s.LS.setItem(s.keys.modelMetadata,JSON.stringify({format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0})),{modelArtifactsInfo:i}}catch{throw sA(s.keys),new Error(`Failed to save model '${s.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${i.modelTopologyBytes}, weightSpecsBytes=${i.weightSpecsBytes}, weightDataBytes=${i.weightDataBytes}.`)}}})()}load(){var e=this;return(0,q.Z)(function*(){const s=JSON.parse(e.LS.getItem(e.keys.info));if(null==s)throw new Error(`In local storage, there is no model with name '${e.modelPath}'`);if("JSON"!==s.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const r={},o=JSON.parse(e.LS.getItem(e.keys.topology));if(null==o)throw new Error(`In local storage, the topology of model '${e.modelPath}' is missing.`);r.modelTopology=o;const i=JSON.parse(e.LS.getItem(e.keys.weightSpecs));if(null==i)throw new Error(`In local storage, the weight specs of model '${e.modelPath}' are missing.`);r.weightSpecs=i;const a=e.LS.getItem(e.keys.modelMetadata);if(null!=a){const u=JSON.parse(a);r.format=u.format,r.generatedBy=u.generatedBy,r.convertedBy=u.convertedBy,null!=u.signature&&(r.signature=u.signature),null!=u.userDefinedMetadata&&(r.userDefinedMetadata=u.userDefinedMetadata),null!=u.modelInitializer&&(r.modelInitializer=u.modelInitializer),null!=u.initializerSignature&&(r.initializerSignature=u.initializerSignature),null!=u.trainingConfig&&(r.trainingConfig=u.trainingConfig)}const l=e.LS.getItem(e.keys.weightData);if(null==l)throw new Error(`In local storage, the binary weight values of model '${e.modelPath}' are missing.`);return r.weightData=function qC(n){if(Fd){const s=Buffer.from(n,"base64");return s.buffer.slice(s.byteOffset,s.byteOffset+s.byteLength)}const t=atob(n),e=new Uint8Array(t.length);for(let s=0;s<t.length;++s)e.set([t.charCodeAt(s)],s);return e.buffer}(l),r})()}}return n.URL_SCHEME="localstorage://",n})();const oA=n=>W().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(Oo.URL_SCHEME)?function uv(n){return new Oo(n)}(n.slice(Oo.URL_SCHEME.length)):null;Nt.registerSaveRouter(oA),Nt.registerLoadRouter(oA);class cv{constructor(){v(W().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),v(typeof window>"u"||typeof window.localStorage<"u",()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}listModels(){var t=this;return(0,q.Z)(function*(){const e={},s=Xr+_s,r=_s+tA;for(let o=0;o<t.LS.length;++o){const i=t.LS.key(o);i.startsWith(s)&&i.endsWith(r)&&(e[rA(i)]=JSON.parse(t.LS.getItem(i)))}return e})()}removeModel(t){var e=this;return(0,q.Z)(function*(){const s=nA(t=function lv(n){return n.startsWith(Oo.URL_SCHEME)?n.slice(Oo.URL_SCHEME.length):n}(t));if(null==e.LS.getItem(s.info))throw new Error(`Cannot find model at path '${t}'`);const r=JSON.parse(e.LS.getItem(s.info));return sA(s),r})()}}const Lo="://";class wn{constructor(){this.managers={}}static getInstance(){return null==wn.instance&&(wn.instance=new wn),wn.instance}static registerManager(t,e){v(null!=t,()=>"scheme must not be undefined or null."),t.endsWith(Lo)&&(t=t.slice(0,t.indexOf(Lo))),v(t.length>0,()=>"scheme must not be an empty string.");const s=wn.getInstance();v(null==s.managers[t],()=>`A model store manager is already registered for scheme '${t}'.`),s.managers[t]=e}static getManager(t){const e=wn.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(wn.getInstance().managers)}}function Su(n){if(-1===n.indexOf(Lo))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${wn.getSchemes().join(",")}`);return{scheme:n.split(Lo)[0],path:n.split(Lo)[1]}}function iA(n,t){return Vd.apply(this,arguments)}function Vd(){return(Vd=(0,q.Z)(function*(n,t,e=!1){v(n!==t,()=>`Old path and new path are the same: '${n}'`);const s=Nt.getLoadHandlers(n);v(s.length>0,()=>`Copying failed because no load handler is found for source URL ${n}.`),v(s.length<2,()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${n}.`);const r=s[0],o=Nt.getSaveHandlers(t);v(o.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),v(o.length<2,()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`);const i=o[0],a=Su(n).scheme,l=Su(n).path,u=a===Su(n).scheme,c=yield r.load();e&&u&&(yield wn.getManager(a).removeModel(l));const h=yield i.save(c);return e&&!u&&(yield wn.getManager(a).removeModel(l)),h.modelArtifactsInfo})).apply(this,arguments)}function hv(){return Ud.apply(this,arguments)}function Ud(){return(Ud=(0,q.Z)(function*(){const n=wn.getSchemes(),t={};for(const e of n){const s=yield wn.getManager(e).listModels();for(const r in s)t[e+Lo+r]=s[r]}return t})).apply(this,arguments)}function dv(n){return Wd.apply(this,arguments)}function Wd(){return(Wd=(0,q.Z)(function*(n){const t=Su(n);return wn.getManager(t.scheme).removeModel(t.path)})).apply(this,arguments)}function pv(n,t){return Gd.apply(this,arguments)}function Gd(){return(Gd=(0,q.Z)(function*(n,t){return iA(n,t,!1)})).apply(this,arguments)}function fv(n,t){return Hd.apply(this,arguments)}function Hd(){return(Hd=(0,q.Z)(function*(n,t){return iA(n,t,!0)})).apply(this,arguments)}class mv{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}setTimeoutCustom(t,e){typeof window>"u"||!W().getBool("USE_SETTIMEOUTCUSTOM")?setTimeout(t,e):(this.functionRefs.push(t),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},e),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",s=>{s.source===window&&s.data.name===this.messageName&&(s.stopPropagation(),(0,this.functionRefs[s.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))},!0)))}isTypedArray(t){return Cg(t)}}if(W().get("IS_BROWSER")){W().setPlatform("browser",new mv);try{wn.registerManager(Oo.URL_SCHEME,new cv)}catch{}try{wn.registerManager(Fo.URL_SCHEME,new sv)}catch{}}let Po;function Be(n,t="float32",e){return t=t||"float32",Un(n),new Gt(n,t,e)}W().get("IS_NODE")&&!W().get("IS_BROWSER")&&W().setPlatform("node",new class Av{constructor(){this.util=j(8628),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=W().global.fetch?W().global.fetch(t,e):(null==Po&&(Po=j(5410)),Po(t,e))}now(){const t=process.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}isTypedArray(t){return this.util.types.isFloat32Array(t)||this.util.types.isInt32Array(t)||this.util.types.isUint8Array(t)||this.util.types.isUint8ClampedArray(t)}});const he=$({cast_:function yv(n,t){const e=N(n,"x","cast");if(!function rC(n){return"bool"===n||"complex64"===n||"float32"===n||"int32"===n||"string"===n}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==e.dtype||"string"!==t&&"string"===e.dtype)throw new Error("Only strings can be casted to strings");return F.runKernel(Ti,{x:e},{dtype:t})}}),qs=$({clone_:function xv(n){const e={x:N(n,"x","clone","string_or_numeric")};return F.runKernel(zi,e)}});function aA(n,t=!1){console.log(n.toString(t))}function lA(){F.disposeVariables()}function Ds(){return F}function Kd(){return F.memory()}function U(n,t){return F.tidy(n,t)}function ze(n){Pg(n).forEach(e=>e.dispose())}function en(n){return F.keep(n)}function uA(n,t,e=1){return F.registerBackend(n,t,e)}zg(),function $C(n){$o=n}({buffer:Be,cast:he,clone:qs,print:aA}),function FC(n){_g=n}(function bv(n){W().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(n+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")});const ne=$({add_:function Iv(n,t){let e=N(n,"a","add"),s=N(t,"b","add");return[e,s]=Dt(e,s),F.runKernel(_o,{a:e,b:s})}}),qd=$({floorDiv_:function Cv(n,t){let e=N(n,"a","floorDiv"),s=N(t,"b","floorDiv");return[e,s]=Dt(e,s),F.runKernel(Mi,{a:e,b:s})}}),Se=$({div_:function vv(n,t){let e=N(n,"a","div"),s=N(t,"b","div");return[e,s]=Dt(e,s),"int32"===e.dtype&&"int32"===s.dtype?qd(e,s):F.runKernel(Ri,{a:e,b:s},{})}}),L=$({mul_:function Sv(n,t){let e=N(n,"a","mul"),s=N(t,"b","mul");return[e,s]=Dt(e,s),F.runKernel(Qi,{a:e,b:s})}}),pn=$({sqrt_:function Nv(n){const e={x:N(n,"x","sqrt","float32")};return F.runKernel(la,e)}}),dt=$({square_:function Tv(n){const t=N(n,"x","square");return F.runKernel("Square",{x:t},{})}}),Ze=$({zerosLike_:function kv(n){const e={x:N(n,"x","zerosLike")};return F.runKernel(pu,e)}});function js(n){return F.customGrad(n)}function ke(n,t){if((ss(n)&&"string"!==t||Array.isArray(n))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&ss(n)&&!(n instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return mr(n,[],[],t)}const _v=new Map,jd=new Map;class Mo{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class rs{constructor(){this.classNameMap={}}static getMap(){return null==rs.instance&&(rs.instance=new rs),rs.instance}static register(t){rs.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function se(n,t,e){v(null!=n.className,()=>"Class being registered does not have the static className property defined."),v("string"==typeof n.className,()=>"className is required to be a string, but got type "+typeof n.className),v(n.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),typeof t>"u"&&(t="Custom"),typeof e>"u"&&(e=n.className);const r=t+">"+e;return rs.register(n),_v.set(r,n),jd.set(n,r),n}class Ar extends Mo{minimize(t,e=!1,s){const{value:r,grads:o}=this.computeGradients(t,s);if(null!=s){const i=s.map(a=>({name:a.name,tensor:o[a.name]}));this.applyGradients(i)}else this.applyGradients(o);return ze(o),e?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return function Ev(n,t){v(ch(n),()=>"The f passed in variableGrads(f) must be a function"),v(null==t||Array.isArray(t)&&t.every(u=>u instanceof wu),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const e=null!=t;if(!e){t=[];for(const u in F.registeredVariables)t.push(F.registeredVariables[u])}const s=e?t.filter(u=>!u.trainable):null,r=t.length;v((t=t.filter(u=>u.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`);const{value:i,grads:a}=F.gradients(n,t,null,!0);v(a.some(u=>null!=u),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),v(0===i.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`);const l={};return t.forEach((u,c)=>{null!=a[c]&&(l[u.name]=a[c])}),null!=s&&s.forEach(u=>l[u.name]=null),{value:i,grads:l}}(t,e)}dispose(){null!=this.iterations_&&ze(this.iterations_)}saveIterations(){var t=this;return(0,q.Z)(function*(){return null==t.iterations_&&(t.iterations_=0),{name:"iter",tensor:ke(t.iterations_,"int32")}})()}getWeights(){return(0,q.Z)(function*(){throw new Error("getWeights() is not implemented for this optimizer yet.")})()}setWeights(t){var e=this;return(0,q.Z)(function*(){throw new Error(`setWeights() is not implemented for this optimizer class ${e.getClassName()}`)})()}extractIterations(t){var e=this;return(0,q.Z)(function*(){return e.iterations_=(yield t[0].tensor.data())[0],t.slice(1)})()}}Object.defineProperty(Ar,Symbol.hasInstance,{value:n=>null!=n.minimize&&null!=n.computeGradients&&null!=n.applyGradients});class cA extends Ar{static get className(){return"Adadelta"}constructor(t,e,s=null){super(),this.learningRate=t,this.rho=e,this.epsilon=s,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==s&&(this.epsilon=F.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=F.registeredVariables[s];null==this.accumulatedGrads[r]&&(this.accumulatedGrads[r]={originalName:`${s}/accum_grad`,variable:U(()=>Ze(o).variable(!1))}),null==this.accumulatedUpdates[r]&&(this.accumulatedUpdates[r]={originalName:`${s}/accum_var`,variable:U(()=>Ze(o).variable(!1))});const a=Array.isArray(t)?t[r].tensor:t[s];if(null==a)return;const l=this.accumulatedGrads[r].variable,u=this.accumulatedUpdates[r].variable;U(()=>{const c=ne(L(l,this.rho),L(dt(a),1-this.rho)),h=L(Se(pn(ne(u,this.epsilon)),pn(ne(l,this.epsilon))),a),d=ne(L(u,this.rho),L(dt(h),1-this.rho));l.assign(c),u.assign(d);const p=ne(L(h,-this.learningRate),o);o.assign(p)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(ze(this.accumulatedGrads.map(t=>t.variable)),ze(this.accumulatedUpdates.map(t=>t.variable)))}getWeights(){var t=this;return(0,q.Z)(function*(){const e=[...t.accumulatedGrads,...t.accumulatedUpdates];return[yield t.saveIterations()].concat(e.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(t){var e=this;return(0,q.Z)(function*(){const s=(t=yield e.extractIterations(t)).length/2;e.accumulatedGrads=t.slice(0,s).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)})),e.accumulatedUpdates=t.slice(s,2*s).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}}function Bo(n,t,e){return Un(n),e=e||ko(t),F.runKernel(Mh,{},{shape:n,value:t,dtype:e})}class hA extends Ar{static get className(){return"Adagrad"}constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=F.registeredVariables[s];null==this.accumulatedGrads[r]&&(this.accumulatedGrads[r]={originalName:`${s}/accumulator`,variable:U(()=>Bo(o.shape,this.initialAccumulatorValue).variable(!1))});const i=Array.isArray(t)?t[r].tensor:t[s];if(null==i)return;const a=this.accumulatedGrads[r].variable;U(()=>{const l=ne(a,dt(i));a.assign(l);const u=ne(L(Se(i,pn(ne(l,F.backend.epsilon()))),-this.learningRate),o);o.assign(u)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&ze(this.accumulatedGrads.map(t=>t.variable))}getWeights(){var t=this;return(0,q.Z)(function*(){return[yield t.saveIterations()].concat(t.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))})()}setWeights(t){var e=this;return(0,q.Z)(function*(){t=yield e.extractIterations(t),e.accumulatedGrads=t.map(r=>({originalName:r.name,variable:r.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}}const yr=$({pow_:function Dv(n,t){let e=N(n,"base","pow"),s=N(t,"exp","pow");return[e,s]=Dt(e,s),F.runKernel(Xi,{a:e,b:s})}}),xe=$({sub_:function Rv(n,t){let e=N(n,"a","sub"),s=N(t,"b","sub");return[e,s]=Dt(e,s),F.runKernel(ca,{a:e,b:s})}});class dA extends Ar{static get className(){return"Adam"}constructor(t,e,s,r=null){super(),this.learningRate=t,this.beta1=e,this.beta2=s,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],U(()=>{this.accBeta1=ke(e).variable(),this.accBeta2=ke(s).variable()}),null==r&&(this.epsilon=F.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(s=>s.name):Object.keys(t);U(()=>{const s=xe(1,this.accBeta1),r=xe(1,this.accBeta2);e.forEach((o,i)=>{const a=F.registeredVariables[o];null==this.accumulatedFirstMoment[i]&&(this.accumulatedFirstMoment[i]={originalName:`${o}/m`,variable:U(()=>Ze(a).variable(!1))}),null==this.accumulatedSecondMoment[i]&&(this.accumulatedSecondMoment[i]={originalName:`${o}/v`,variable:U(()=>Ze(a).variable(!1))});const u=Array.isArray(t)?t[i].tensor:t[o];if(null==u)return;const c=this.accumulatedFirstMoment[i].variable,h=this.accumulatedSecondMoment[i].variable,d=ne(L(c,this.beta1),L(u,1-this.beta1)),p=ne(L(h,this.beta2),L(dt(u),1-this.beta2)),f=Se(d,s),g=Se(p,r);c.assign(d),h.assign(p);const m=ne(L(Se(f,ne(pn(g),this.epsilon)),-this.learningRate),a);a.assign(m)}),this.accBeta1.assign(L(this.accBeta1,this.beta1)),this.accBeta2.assign(L(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&ze(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedSecondMoment&&ze(this.accumulatedSecondMoment.map(t=>t.variable))}getWeights(){var t=this;return(0,q.Z)(function*(){const e=[...t.accumulatedFirstMoment,...t.accumulatedSecondMoment];return[yield t.saveIterations()].concat(e.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(t){var e=this;return(0,q.Z)(function*(){t=yield e.extractIterations(t),U(()=>{e.accBeta1.assign(yr(e.beta1,e.iterations_+1)),e.accBeta2.assign(yr(e.beta2,e.iterations_+1))});const s=t.length/2;e.accumulatedFirstMoment=t.slice(0,s).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)})),e.accumulatedSecondMoment=t.slice(s,2*s).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}}const Ht=$({abs_:function $v(n){const t=N(n,"x","abs");return F.runKernel("complex64"===t.dtype?bl:hl,{x:t})}});function zo(n,t){const e=n.length,s=[];for(let r=0;r<e;r++){const o=e-1-r;(t[t.length-1-r]||1)>1&&1===(n[o]||1)&&s.unshift(o)}return s}function Kt(n,t){const e=[];for(let s=0;s<t.length;s++){const r=n[n.length-s-1],o=t.length-s-1;(null==r||1===r&&t[o]>1)&&e.unshift(o)}return e}function Le(n,t){const e=Math.max(n.length,t.length),s=new Array(e);for(let r=0;r<e;r++){let o=n[n.length-r-1];null==o&&(o=1);let i=t[t.length-r-1];if(null==i&&(i=1),1===o)s[e-r-1]=i;else if(1===i)s[e-r-1]=o;else{if(o!==i)throw Error(`Operands could not be broadcast together with shapes ${n} and ${t}.`);s[e-r-1]=o}}return s}const ys=$({maximum_:function Fv(n,t){let e=N(n,"a","maximum"),s=N(t,"b","maximum");return[e,s]=Dt(e,s),"bool"===e.dtype&&(e=he(e,"int32"),s=he(s,"int32")),Le(e.shape,s.shape),F.runKernel(Ki,{a:e,b:s})}});class pA extends Ar{static get className(){return"Adamax"}constructor(t,e,s,r=null,o=0){super(),this.learningRate=t,this.beta1=e,this.beta2=s,this.epsilon=r,this.decay=o,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],U(()=>{this.iteration=ke(0).variable(),this.accBeta1=ke(e).variable()}),null==r&&(this.epsilon=F.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(s=>s.name):Object.keys(t);U(()=>{const s=xe(1,this.accBeta1),r=Se(-this.learningRate,ne(L(this.iteration,this.decay),1));e.forEach((o,i)=>{const a=F.registeredVariables[o];null==this.accumulatedFirstMoment[i]&&(this.accumulatedFirstMoment[i]={originalName:`${o}/m`,variable:Ze(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[i]&&(this.accumulatedWeightedInfNorm[i]={originalName:`${o}/v`,variable:Ze(a).variable(!1)});const u=Array.isArray(t)?t[i].tensor:t[o];if(null==u)return;const c=this.accumulatedFirstMoment[i].variable,h=this.accumulatedWeightedInfNorm[i].variable,d=ne(L(c,this.beta1),L(u,1-this.beta1)),p=L(h,this.beta2),f=Ht(u),g=ys(p,f);c.assign(d),h.assign(g);const m=ne(L(Se(r,s),Se(d,ne(g,this.epsilon))),a);a.assign(m)}),this.iteration.assign(ne(this.iteration,1)),this.accBeta1.assign(L(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&ze(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedWeightedInfNorm&&ze(this.accumulatedWeightedInfNorm.map(t=>t.variable))}getWeights(){return(0,q.Z)(function*(){throw new Error("getWeights() is not implemented for Adamax yet.")})()}setWeights(t){return(0,q.Z)(function*(){throw new Error("setWeights() is not implemented for Adamax yet.")})()}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}}class Qd extends Ar{static get className(){return"SGD"}constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=Array.isArray(t)?t[r].tensor:t[s];if(null==o)return;const i=F.registeredVariables[s];U(()=>{const a=ne(L(this.c,o),i);i.assign(a)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=en(ke(-t))}dispose(){this.c.dispose()}getWeights(){var t=this;return(0,q.Z)(function*(){return[yield t.saveIterations()]})()}setWeights(t){var e=this;return(0,q.Z)(function*(){if(0!==(t=yield e.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")})()}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}class fA extends Qd{static get className(){return"Momentum"}constructor(t,e,s=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=s,this.accumulations=[],this.m=ke(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=F.registeredVariables[s];null==this.accumulations[r]&&(this.accumulations[r]={originalName:`${s}/momentum`,variable:U(()=>Ze(o).variable(!1))});const i=this.accumulations[r].variable,a=Array.isArray(t)?t[r].tensor:t[s];null!=a&&U(()=>{let l;const u=ne(L(this.m,i),a);l=ne(L(this.c,this.useNesterov?ne(a,L(u,this.m)):u),o),i.assign(u),o.assign(l)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&ze(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}getWeights(){var t=this;return(0,q.Z)(function*(){return[yield t.saveIterations()].concat(t.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))})()}setWeights(t){var e=this;return(0,q.Z)(function*(){t=yield e.extractIterations(t),e.accumulations=t.map(r=>({originalName:r.name,variable:r.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}}class mA extends Ar{static get className(){return"RMSProp"}constructor(t,e=.9,s=0,r=null,o=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=s,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=o,null==r&&(this.epsilon=F.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=F.registeredVariables[s],i=!1;null==this.accumulatedMeanSquares[r]&&(this.accumulatedMeanSquares[r]={originalName:`${s}/rms`,variable:U(()=>Ze(o).variable(i))}),null==this.accumulatedMoments[r]&&(this.accumulatedMoments[r]={originalName:`${s}/momentum`,variable:U(()=>Ze(o).variable(i))}),null==this.accumulatedMeanGrads[r]&&this.centered&&(this.accumulatedMeanGrads[r]={originalName:`${s}/mg`,variable:U(()=>Ze(o).variable(i))});const a=Array.isArray(t)?t[r].tensor:t[s];if(null==a)return;const l=this.accumulatedMeanSquares[r].variable,u=this.accumulatedMoments[r].variable;U(()=>{const c=ne(L(l,this.decay),L(dt(a),1-this.decay));if(this.centered){const h=this.accumulatedMeanGrads[r].variable,d=ne(L(h,this.decay),L(a,1-this.decay)),p=Se(L(a,this.learningRate),pn(xe(c,ne(dt(d),this.epsilon)))),f=ne(L(u,this.momentum),p);l.assign(c),h.assign(d),u.assign(f);const g=xe(o,f);o.assign(g)}else{const h=ne(L(l,this.decay),L(dt(a),1-this.decay)),d=ne(L(u,this.momentum),Se(L(a,this.learningRate),pn(ne(h,this.epsilon))));l.assign(h),u.assign(d);const p=xe(o,d);o.assign(p)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&ze(this.accumulatedMeanSquares.map(t=>t.variable)),null!=this.accumulatedMeanGrads&&this.centered&&ze(this.accumulatedMeanGrads.map(t=>t.variable)),null!=this.accumulatedMoments&&ze(this.accumulatedMoments.map(t=>t.variable))}getWeights(){var t=this;return(0,q.Z)(function*(){const e=[...t.accumulatedMeanSquares,...t.accumulatedMoments];return t.centered&&e.push(...t.accumulatedMeanGrads),[yield t.saveIterations()].concat(e.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(t){var e=this;return(0,q.Z)(function*(){t=yield e.extractIterations(t);const s=e.centered?t.length/3:t.length/2,r=!1;e.accumulatedMeanSquares=t.slice(0,s).map(o=>({originalName:o.name,variable:o.tensor.variable(r)})),e.accumulatedMoments=t.slice(s,2*s).map(o=>({originalName:o.name,variable:o.tensor.variable(r)})),e.centered&&(e.accumulatedMeanGrads=t.slice(2*s,3*s).map(o=>({originalName:o.name,variable:o.tensor.variable(r)})))})()}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}}const Ov=[cA,hA,dA,pA,fA,mA,Qd];function gA(n){return new Promise(t=>setTimeout(t)).then(n)}let Xd=(()=>{class n{constructor(e){if(!W().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(n.URL_SCHEME)&&(e=e.slice(n.URL_SCHEME.length)),(null==e||0===e.length)&&(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}save(e){var s=this;return(0,q.Z)(function*(){if(typeof document>"u")throw new Error("Browser downloads are not supported in this environment since `document` is not present");const r=As.join(e.weightData),o=window.URL.createObjectURL(new Blob([r],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const a=Xg(e,[{paths:["./"+s.weightDataFileName],weights:e.weightSpecs}]),l=window.URL.createObjectURL(new Blob([JSON.stringify(a)],{type:"application/json"})),u=null==s.modelJsonAnchor?document.createElement("a"):s.modelJsonAnchor;if(u.download=s.modelJsonFileName,u.href=l,yield gA(()=>u.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const c=null==s.weightDataAnchor?document.createElement("a"):s.weightDataAnchor;c.download=s.weightDataFileName,c.href=o,yield gA(()=>c.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:xa(e)}}})()}}return n.URL_SCHEME="downloads://",n})();class zv{constructor(t){if(null==t||t.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${t}`);this.jsonFile=t[0],this.weightsFiles=t.slice(1)}load(){var t=this;return(0,q.Z)(function*(){return new Promise((e,s)=>{const r=new FileReader;r.onload=o=>{const i=JSON.parse(o.target.result),a=i.modelTopology;if(null==a)return void s(new Error(`modelTopology field is missing from file ${t.jsonFile.name}`));if(null==i.weightsManifest)return void s(new Error(`weightManifest field is missing from file ${t.jsonFile.name}`));if(0===t.weightsFiles.length)return void e({modelTopology:a});const u=Od(i,c=>t.loadWeights(c));e(u)},r.onerror=o=>s(`Failed to read model topology and weights manifest JSON from file '${t.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),r.readAsText(t.jsonFile)})})()}loadWeights(t){const e=[],s=[];for(const i of t)e.push(...i.weights),s.push(...i.paths);const r=this.checkManifestAndWeightFiles(t),o=s.map(i=>this.loadWeightsFile(i,r[i]));return Promise.all(o).then(i=>[e,i])}loadWeightsFile(t,e){return new Promise((s,r)=>{const o=new FileReader;o.onload=i=>{s(i.target.result)},o.onerror=i=>r(`Failed to weights data from file of path '${t}'.`),o.readAsArrayBuffer(e)})}checkManifestAndWeightFiles(t){const e=[],s=this.weightsFiles.map(o=>Qg(o.name)),r={};for(const o of t)o.paths.forEach(i=>{const a=Qg(i);if(-1!==e.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(e.push(a),-1===s.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);r[i]=this.weightsFiles[s.indexOf(a)]});if(e.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${e.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function Wv(n){return new zv(n)}function AA(n,t,e,s){(function i(l){v(null!=l&&Array.isArray(l)&&l.length>0,()=>"promises must be a none empty array")})(n),function a(l,u){v(l>=0&&l<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${l}`),v(u>=0&&u<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${u}`),v(u>=l,()=>`startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${u}`)}(e=null==e?0:e,s=null==s?1:s);let r=0;return Promise.all(n.map(l=>(l.then(u=>{const c=e+ ++r/n.length*(s-e);return t(c),u}),l)))}function yA(n,t){return Zd.apply(this,arguments)}function Zd(){return(Zd=(0,q.Z)(function*(n,t){null==t&&(t={});const e=null==t.fetchFunc?W().platform.fetch:t.fetchFunc,s=n.map(h=>e(h,t.requestInit,{isBinary:!0})),a=(null==t.onProgress?yield Promise.all(s):yield AA(s,t.onProgress,0,.5)).map(h=>h.arrayBuffer());return null==t.onProgress?yield Promise.all(a):yield AA(a,t.onProgress,.5,1)})).apply(this,arguments)}function Gv(n){return Yd.apply(this,arguments)}function Yd(){return(Yd=(0,q.Z)(function*(n,t="",e,s){return xA(i=>yA(i,{requestInit:s}))(n,t,e)})).apply(this,arguments)}function xA(n){return function(){var t=(0,q.Z)(function*(e,s="",r){const o=e.map(()=>!1),i={},a=null!=r?r.map(()=>!1):[],l=[];if(e.forEach((f,g)=>{let m=0;f.weights.forEach(A=>{const x=Dd["quantization"in A?A.quantization.dtype:A.dtype]*Q(A.shape),b=()=>{o[g]=!0,null==i[g]&&(i[g]=[]),i[g].push({manifestEntry:A,groupOffset:m,sizeBytes:x})};null!=r?r.forEach((I,S)=>{I===A.name&&(b(),a[S]=!0)}):b(),l.push(A.name),m+=x})}),!a.every(f=>f)){const f=r.filter((g,m)=>!a[m]);throw new Error(`Could not find weights in manifest with names: ${f.join(", ")}. \nManifest JSON has weights with names: ${l.join(", ")}.`)}const u=o.reduce((f,g,m)=>(g&&f.push(m),f),[]),c=[];u.forEach(f=>{e[f].paths.forEach(g=>{const m=s+(s.endsWith("/")?"":"/")+g;c.push(m)})});const h=yield n(c),d={};let p=0;return u.forEach(f=>{const g=e[f].paths.length,m=new As(h.slice(p,p+g));i[f].forEach(y=>{const b=Kg(m.slice(y.groupOffset,y.groupOffset+y.sizeBytes),[y.manifestEntry]);for(const I in b)d[I]=b[I]}),p+=g}),d});return function(e){return t.apply(this,arguments)}}()}Nt.registerSaveRouter(n=>W().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(Xd.URL_SCHEME)?function Uv(n="model"){return new Xd(n)}(n.slice(Xd.URL_SCHEME.length)):null);let bA=(()=>{class n{constructor(e,s){if(this.DEFAULT_METHOD="POST",null==s&&(s={}),this.weightPathPrefix=s.weightPathPrefix,this.onProgress=s.onProgress,this.weightUrlConverter=s.weightUrlConverter,null!=s.fetchFunc?(v("function"==typeof s.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=s.fetchFunc):this.fetch=W().platform.fetch,v(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&v(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=s.requestInit&&null!=s.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=s.requestInit||{}}save(e){var s=this;return(0,q.Z)(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const r=Object.assign({method:s.DEFAULT_METHOD},s.requestInit);r.body=new FormData;const i=Xg(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);if(r.body.append("model.json",new Blob([JSON.stringify(i)],{type:"application/json"}),"model.json"),null!=e.weightData){const l=As.join(e.weightData);r.body.append("model.weights.bin",new Blob([l],{type:"application/octet-stream"}),"model.weights.bin")}const a=yield s.fetch(s.path,r);if(a.ok)return{modelArtifactsInfo:xa(e),responses:[a]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${a.status}.`)})()}load(){var e=this;return(0,q.Z)(function*(){const s=yield e.fetch(e.path,e.requestInit);if(!s.ok)throw new Error(`Request to ${e.path} failed with status code ${s.status}. Please verify this URL points to the model JSON of the model to load.`);let r;try{r=yield s.json()}catch{let l=`Failed to parse model JSON of response from ${e.path}.`;throw e.path.endsWith(".pb")?l+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":l+=" Please make sure the server is serving valid JSON for this request.",new Error(l)}if(null==r.modelTopology&&null==r.weightsManifest)throw new Error(`The JSON from HTTP path ${e.path} contains neither model topology or manifest for weights.`);return Od(r,a=>e.loadWeights(a))})()}loadWeights(e){var s=this;return(0,q.Z)(function*(){const r=Array.isArray(s.path)?s.path[1]:s.path,[o,i]=function qv(n){const t=n.lastIndexOf("/"),e=n.lastIndexOf("?");return[n.substring(0,t)+"/",e>t?n.substring(e):""]}(r),a=s.weightPathPrefix||o,l=Yg(e),u=[],c=[];for(const d of e)for(const p of d.paths)null!=s.weightUrlConverter?c.push(s.weightUrlConverter(p)):u.push(a+p+i);return s.weightUrlConverter&&u.push(...yield Promise.all(c)),[l,yield yA(u,{requestInit:s.requestInit,fetchFunc:s.fetch,onProgress:s.onProgress})]})()}}return n.URL_SCHEME_REGEX=/^https?:\/\//,n})();function Jd(n){return null!=n.match(bA.URL_SCHEME_REGEX)}const wA=(n,t)=>{if(typeof fetch>"u"&&(null==t||null==t.fetchFunc))return null;{let e=!0;if(e=Array.isArray(n)?n.every(s=>Jd(s)):Jd(n),e)return ep(n,t)}return null};function ep(n,t){return new bA(n,t)}function jv(n,t){return ep(n,t)}Nt.registerSaveRouter(wA),Nt.registerLoadRouter(wA);class tp{constructor(t){this.modelArtifacts=t}load(){return this.modelArtifacts}}class IA{constructor(t){this.saveHandler=t}save(t){return this.saveHandler(t)}}class Qv{constructor(t){t.load&&(this.load=()=>Promise.resolve(t.load())),t.save&&(this.save=e=>Promise.resolve(t.save(e)))}}function Xv(n,t,e,s){return new Qv(CA(...arguments))}function CA(n,t,e,s){return 1===arguments.length?null!=n.modelTopology||null!=n.weightSpecs?new tp(n):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new tp({modelTopology:n})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new tp({modelTopology:n,weightSpecs:t,weightData:e,trainingConfig:s}))}function Zv(n){return new IA(n)}function Yv(n){return new IA(n)}function vA(n,t,e){if(So(n),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=pr(n,e);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return mr(n,t,s,e)}let Zr;const kA=$({fromPixels_:function NA(n,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==n)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let e=!1,s=!1,r=!1,o=!1,i=!1,a=!1;if(n.data instanceof Uint8Array)e=!0;else if(typeof ImageData<"u"&&n instanceof ImageData)s=!0;else if(typeof HTMLVideoElement<"u"&&n instanceof HTMLVideoElement)r=!0;else if(typeof HTMLImageElement<"u"&&n instanceof HTMLImageElement)o=!0;else if(null!=n.getContext)i=!0;else{if(!(typeof ImageBitmap<"u"&&n instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${n.constructor.name}`);a=!0}if(null!=Au(wd,F.backendName))return F.runKernel(wd,{pixels:n},{numChannels:t});const[u,c]=r?[n.videoWidth,n.videoHeight]:[n.width,n.height];let h,d;if(i)h=n.getContext("2d").getImageData(0,0,u,c).data;else if(s||e)h=n.data;else if(o||r||a){if(null==Zr)if(typeof document>"u"){if(!(typeof OffscreenCanvas<"u"&&typeof OffscreenCanvasRenderingContext2D<"u"))throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");Zr=new OffscreenCanvas(1,1).getContext("2d")}else Zr=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});Zr.canvas.width=u,Zr.canvas.height=c,Zr.drawImage(n,0,0,u,c),h=Zr.getImageData(0,0,u,c).data}if(4===t)d=new Int32Array(h);else{const f=u*c;d=new Int32Array(f*t);for(let g=0;g<f;g++)for(let m=0;m<t;++m)d[g*t+m]=h[4*g+m]}return vA(d,[c,u,t],"int32")}}),rp=-2,r1=-1;function op(n,t,e){const s=n.shape.length;v(s===t.length,()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`),v(s===e.length,()=>`Error in slice${s}D: Length of size ${e} must match the rank of the array (${s}).`);for(let r=0;r<s;++r)v(t[r]+e[r]<=n.shape[r],()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+e[r]}) would overflow input.shape[${r}] (${n.shape[r]})`)}function o1(n){const t=[];let e=0;for(;n>0;)1&n&&t.push(e),n/=2,e++;return t}function ip(n,t,e){const s=[];for(let r=0;r<n.length;r++)s[r]=Math.ceil((t[r]-n[r])/e[r]);return s}function EA(n,t,e,s){const r=[...n];for(let o=r.length;o<s.length;o++)r.push(1);for(let o=0;o<e;o++)0===o?r[t]=1:(r.splice(t,0,1),r.pop());return r}function _A(n,t,e){return e<=n?e:e-(t-1)}function DA(n,t){const e=[];for(let s=0;s<n;s++)e.push(t+s);return e}function i1(n,t,e,s,r,o,i,a,l){const u=n.length;let c=new Array(u),h=new Array(u),d=new Array(u);if(t.length&&e>0){const p=t[0],f=e+1;c=RA(i,p,f,s,n),h=$A(a,p,f,r,n),d=EA(o,p,f,n)}else for(let p=0;p<u;p++)c[p]=OA(i,s,o,n,p,l),h[p]=LA(a,r,o,n,p,l),d[p]=FA(o,p,l);return{begin:c,end:h,strides:d}}function RA(n,t,e,s,r){const o=[...r],i=DA(e,t);for(let a=0;a<o.length;a++)if(i.indexOf(a)>-1)o[a]=0;else{const l=_A(t,e,a);let u=s[l];n&1<<l&&(u=0),o[a]=u}return o}function $A(n,t,e,s,r){const o=[...r],i=DA(e,t);for(let a=0;a<o.length;a++)if(i.indexOf(a)>-1)o[a]=Number.MAX_SAFE_INTEGER;else{const l=_A(t,e,a);let u=s[l];n&1<<l&&(u=Number.MAX_SAFE_INTEGER),o[a]=u}for(let a=0;a<o.length;a++)o[a]<0&&(o[a]+=r[a]),o[a]=Wr(0,o[a],r[a]);return o}function FA(n,t,e){let s=n[t];return(e&1<<t||null==s)&&(s=1),s}function OA(n,t,e,s,r,o){let i=t[r];(n&1<<r||o&1<<r||null==i)&&(i=(e[r]||1)>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=Wr(0,i,l-1),i}function LA(n,t,e,s,r,o){let i=t[r];const a=e[r]||1;(n&1<<r||o&1<<r||null==i)&&(i=a>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=a>0?Wr(0,i,l):Wr(-1,i,l-1),i}function ap(n,t,e){let s=e.length;for(let r=0;r<e.length;r++)if(e[r]>1){s=r;break}for(let r=s+1;r<e.length;r++)if(t[r]>0||e[r]!==n[r])return!1;return!0}function lp(n,t){let e=n.length>0?n[n.length-1]:1;for(let s=0;s<n.length-1;s++)e+=n[s]*t[s];return e}function Tu(n,t,e){let s;const r=n.shape.length;let o;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach(i=>{v(-1!==i,()=>"slice() does not support negative begin indexing.")}),o=null==e?new Array(r).fill(-1):"number"==typeof e?[e,...new Array(r-1).fill(-1)]:e.length<r?e.concat(new Array(r-e.length).fill(-1)):e,o=o.map((i,a)=>i>=0?i:(v(-1===i,()=>`Negative size values should be exactly -1 but got ${i} for the slice() size at index ${a}.`),n.shape[a]-s[a])),[s,o]}function up(n,t,e,s,r,o,i,a,l){let u;if(null==s?(u=new Array(t.length),u.fill(1)):u=s,null!=i&&i&i-1)throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:e.slice(),strides:u.slice(),beginMask:r,endMask:o,ellipsisMask:i,newAxisMask:a,shrinkAxisMask:l};for(let x=0;x<h.dims;x++)c&&1<<x&a&&h.numAddAxisAfterEllipsis++,1<<x&i&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const d={dims:n.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function a1(n,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let e=0;t.beginValid=null!=n.begin,t.endValid=null!=n.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let s=0;s<n.dims;s++)if(1<<s&n.ellipsisMask){const r=Math.min(t.dims-(n.dims-s)+1+n.numAddAxisAfterEllipsis,t.dims);for(;e<r;e++)t.begin[e]=0,t.end[e]=0,t.strides[e]=1,t.beginMask|=1<<e,t.endMask|=1<<e,t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[e]=s}else if(1<<s&n.newAxisMask)t.finalShapeGatherIndices.push(rp),t.finalShapeGatherIndicesSparse.push(-1);else{if(e===t.begin.length)throw Error(`Index out of range using input dim ${e}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=n.begin&&(t.begin[e]=n.begin[s]),null!=n.end&&(t.end[e]=n.end[s]),t.strides[e]=n.strides[s],n.beginMask&1<<s&&(t.beginMask|=1<<e),n.endMask&1<<s&&(t.endMask|=1<<e),n.shrinkAxisMask&1<<s?(t.finalShapeGatherIndices.push(r1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<e):(t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(s)),t.inputShapeGatherIndicesSparse[e]=s,e++}}(h,d);let p=!0,f=!0,g=!0;const m=[],A=[];for(let x=0;x<n.length;++x){if(0===d.strides[x])throw Error(`strides[${x}] must be non-zero`);const b=!!(d.shrinkAxisMask&1<<x),I=n[x];if(-1===I){m.push(b?1:-1);continue}const S=[d.beginMask&1<<x,d.endMask&1<<x],k=[d.strides[x]>0?0:-1,d.strides[x]>0?I:I-1];if(b&&d.strides[x]<=0)throw Error("only stride 1 allowed on non-range indexing.");g=g&&1===d.strides[x];const E=!!(d.beginMask&1<<x&&d.endMask&1<<x);if(d.beginValid&&d.endValid){if(b){const T=d.begin[x]<0?I+d.begin[x]:d.begin[x];if(d.begin[x]=T,d.end[x]=d.begin[x]+1,T<0||T>=I)throw Error(`slice index ${d.begin[x]} of dimension ${x} out of bounds.`)}else d.begin[x]=PA(d.begin[x],0,d.strides[x],I,S,k),d.end[x]=PA(d.end[x],1,d.strides[x],I,S,k);const C=1===d.strides[x]&&0===d.begin[x]&&d.end[x]===I;p=p&&C,f=f&&(0===x&&1===d.strides[x]||C)}else p=p&&1===d.strides[x]&&E,f=f&&(0===x&&1===d.strides[x]||E);let D,O=!1;if(d.beginValid&&d.endValid?(D=d.end[x]-d.begin[x],O=!0):b?(D=1,O=!0):E&&I>=0&&(D=d.strides[x]<0?-I:I,O=!0),O){let C;C=0===D||D<0!=d.strides[x]<0?0:Math.trunc(D/d.strides[x])+(D%d.strides[x]!=0?1:0),m.push(C)}else m.push(-1)}for(let x=0;x<d.finalShapeGatherIndices.length;++x){const b=d.finalShapeGatherIndices[x];b>=0?A.push(m[b]):b===rp&&A.push(1)}return{finalShapeSparse:A.filter((x,b)=>d.finalShapeGatherIndices[b]!==rp),finalShape:A,isIdentity:p,sliceDim0:f,isSimpleSlice:g,begin:d.begin,end:d.end,strides:d.strides}}function PA(n,t,e,s,r,o){if(r[t])return e>0?o[t]:o[t+1&1];{const i=n<0?s+n:n;return i<o[0]?o[0]:i>o[1]?o[1]:i}}const MA=$({acos_:function u1(n){const e={x:N(n,"x","acos")};return F.runKernel(bi,e)}}),BA=$({acosh_:function c1(n){const e={x:N(n,"x","acosh")};return F.runKernel(wi,e)}}),d1=$({addN_:function h1(n){v(Array.isArray(n),()=>"The argument passed to tf.addN() must be a list of tensors"),v(n.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${n.length}`);const t=n.map((r,o)=>N(r,`tensors${o}`,"addN")),e=t[0];return t.forEach(r=>{if(r.dtype!==e.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(r=>{if(!Qe(r.shape,e.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}),F.runKernel(dl,t)}}),cp=$({all_:function p1(n,t=null,e=!1){const r={x:N(n,"x","all","bool")};return F.runKernel("All",r,{axis:t,keepDims:e})}}),ku=$({any_:function f1(n,t=null,e=!1){const r={x:N(n,"x","any","bool")};return F.runKernel("Any",r,{axis:t,keepDims:e})}}),Yr=$({argMax_:function m1(n,t=0){const s={x:N(n,"x","argMax")};return F.runKernel(pl,s,{axis:t})}}),zA=$({argMin_:function g1(n,t=0){const s={x:N(n,"x","argMin")};return F.runKernel(fl,s,{axis:t})}}),VA=$({asin_:function A1(n){const e={x:N(n,"x","asin")};return F.runKernel(Ii,e)}}),UA=$({asinh_:function y1(n){const e={x:N(n,"x","asinh")};return F.runKernel(Ci,e)}}),WA=$({atan_:function x1(n){const e={x:N(n,"x","atan")};return F.runKernel(vi,e)}}),GA=$({atan2_:function b1(n,t){let e=N(n,"a","atan2"),s=N(t,"b","atan2");return[e,s]=Dt(e,s),F.runKernel(Ni,{a:e,b:s})}}),HA=$({atanh_:function w1(n){const e={x:N(n,"x","atanh")};return F.runKernel(Si,e)}});function ba(n,t,e,s,r="NHWC",o){return tn(n,[...t,n[3]],e,o,s,null,null,Xs(r))}function os(n,t,e,s,r,o,i="channelsLast"){const[a,l]=wa(t);let u;if("channelsLast"===i)u=[a,l,n[3],n[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);u=[a,l,n[1],n[1]]}return tn(n,u,e,s,r,o,!1,i)}function Qs(n,t,e,s,r,o,i="NDHWC"){const[a,l,u]=dp(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[a,l,u,n[4],n[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[a,l,u,n[1],n[1]]}return xr(n,c,e,s,r,!1,h,o)}function tn(n,t,e,s,r,o,i=!1,a="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===a)[l,u,c,h]=n;else{if("channelsFirst"!==a)throw new Error(`Unknown dataFormat ${a}`);[l,h,u,c]=n}const[d,p,,f]=t,[g,m]=wa(e),[A,y]=wa(s),x=Vo(d,A),b=Vo(p,y),{padInfo:I,outHeight:S,outWidth:k}=function v1(n,t,e,s,r,o,i,a,l){let u,c,h;if("number"==typeof n){u={top:n,bottom:n,left:n,right:n,type:0===n?"VALID":"NUMBER"};const p=function I1(n,t,e,s,r){null==s&&(s=hp(n,t,e));const i=n[1];return[Ia((n[0]-t+2*s)/e+1,r),Ia((i-t+2*s)/e+1,r)]}([t,e],o,s,n,a);c=p[0],h=p[1]}else if("same"===n){c=Math.ceil(t/s),h=Math.ceil(e/r);const d=Math.max(0,(c-1)*s+o-t),p=Math.max(0,(h-1)*r+i-e),f=Math.floor(d/2),g=d-f,m=Math.floor(p/2);u={top:f,bottom:g,left:m,right:p-m,type:"SAME"}}else if("valid"===n)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-o+1)/s),h=Math.ceil((e-i+1)/r);else{if("object"!=typeof n)throw Error(`Unknown padding parameter: ${n}`);{const d="channelsLast"===l?n[1][0]:n[2][0],p="channelsLast"===l?n[1][1]:n[2][1],f="channelsLast"===l?n[2][0]:n[3][0],g="channelsLast"===l?n[2][1]:n[3][1];u={top:d,bottom:p,left:f,right:g,type:0===d&&0===p&&0===f&&0===g?"VALID":"EXPLICIT"},c=Ia((t-o+d+p)/s+1,a),h=Ia((e-i+f+g)/r+1,a)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,g,m,x,b,o,a),E=i?f*h:f;let D;return"channelsFirst"===a?D=[l,E,S,k]:"channelsLast"===a&&(D=[l,S,k,E]),{batchSize:l,dataFormat:a,inHeight:u,inWidth:c,inChannels:h,outHeight:S,outWidth:k,outChannels:E,padInfo:I,strideHeight:g,strideWidth:m,filterHeight:d,filterWidth:p,effectiveFilterHeight:x,effectiveFilterWidth:b,dilationHeight:A,dilationWidth:y,inShape:n,outShape:D,filterShape:t}}function xr(n,t,e,s,r,o=!1,i="channelsLast",a){let[l,u,c,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,d]=n;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,d,u,c,h]=n}const[p,f,g,,m]=t,[A,y,x]=dp(e),[b,I,S]=dp(s),k=Vo(p,b),E=Vo(f,I),D=Vo(g,S),{padInfo:O,outDepth:C,outHeight:T,outWidth:_}=function S1(n,t,e,s,r,o,i,a,l,u,c){let h,d,p,f;if("valid"===n&&(n=0),"number"==typeof n){h={top:n,bottom:n,left:n,right:n,front:n,back:n,type:0===n?"VALID":"NUMBER"};const m=function C1(n,t,e,s,r,o){null==r&&(r=hp(n,t[0],s[0]));const i=[0,0,0,e];for(let a=0;a<3;a++)n[a]+2*r>=t[a]&&(i[a]=Ia((n[a]-t[a]+2*r)/s[a]+1,o));return i}([t,e,s,1],[a,l,u],1,[r,o,i],n,c);d=m[0],p=m[1],f=m[2]}else{if("same"!==n)throw Error(`Unknown padding parameter: ${n}`);{d=Math.ceil(t/r),p=Math.ceil(e/o),f=Math.ceil(s/i);const g=(d-1)*r+a-t,m=(p-1)*o+l-e,A=(f-1)*i+u-s,y=Math.floor(g/2),x=g-y,b=Math.floor(m/2),I=m-b,S=Math.floor(A/2);h={top:b,bottom:I,left:S,right:A-S,front:y,back:x,type:"SAME"}}}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(r,u,c,h,A,y,x,k,E,D,a),P=o?m*d:m;let z;return"channelsFirst"===i?z=[l,P,C,T,_]:"channelsLast"===i&&(z=[l,C,T,_,P]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:d,outDepth:C,outHeight:T,outWidth:_,outChannels:P,padInfo:O,strideDepth:A,strideHeight:y,strideWidth:x,filterDepth:p,filterHeight:f,filterWidth:g,effectiveFilterDepth:k,effectiveFilterHeight:E,effectiveFilterWidth:D,dilationDepth:b,dilationHeight:I,dilationWidth:S,inShape:n,outShape:z,filterShape:t}}function hp(n,t,e,s=1){const r=Vo(t,s);return Math.floor((n[0]*(e-1)-e+r)/2)}function wa(n){return"number"==typeof n?[n,n,n]:2===n.length?[n[0],n[1],1]:n}function dp(n){return"number"==typeof n?[n,n,n]:n}function Vo(n,t){return t<=1?n:n+(n-1)*(t-1)}function Ia(n,t){if(!t)return Math.trunc(n);switch(t){case"round":return Math.round(n);case"ceil":return Math.ceil(n);case"floor":return Math.floor(n);default:throw new Error(`Unknown roundingMode ${t}`)}}function br(n){const[t,e,s]=wa(n);return 1===t&&1===e&&1===s}function an(n,t){return br(n)||br(t)}function Jr(n){return wa(n).every(t=>t>0)}function Xs(n){if("NHWC"===n)return"channelsLast";if("NCHW"===n)return"channelsFirst";throw new Error(`Unknown dataFormat ${n}`)}function In(n,t,e){if(null!=e){if("string"==typeof t)throw Error(`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);if("number"==typeof t)v(No(t),()=>`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);else{if("object"!=typeof t)throw Error(`Error in ${n}: Unknown padding parameter: ${t}`);t.forEach(s=>{s.forEach(r=>{v(No(r),()=>`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${r}.`)})})}}}const M=$({reshape_:function N1(n,t){const s={x:N(n,"x","reshape","string_or_numeric")};return F.runKernel(eu,s,{shape:t})}}),Eu=$({avgPool_:function T1(n,t,e,s,r){const o=N(n,"x","avgPool","float32");v(an(e,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${e} and dilations '1'`);let a=o,l=!1;3===o.rank&&(l=!0,a=M(o,[1,o.shape[0],o.shape[1],o.shape[2]])),v(4===a.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${a.rank}.`),In("avgPool",s,r);let h=F.runKernel(ml,{x:a},{filterSize:t,strides:e,pad:s,dimRoundingMode:r});return h=he(h,o.dtype),l?M(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),KA=$({avgPool3d_:function k1(n,t,e,s,r,o="NDHWC"){const i=N(n,"x","avgPool3d","float32");let a=i,l=!1;4===i.rank&&(l=!0,a=M(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),v(5===a.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${a.rank}.`),v("NDHWC"===o,()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`),v("number"==typeof e&&e>0||Array.isArray(e)&&e[0]>0&&e[1]>0&&e[2]>0,()=>`Error in avgPool3d: Stride must be > 0, but got '${e}'`),In("avgPool3d",s,r);let h=F.runKernel(gl,{x:a},{filterSize:t,strides:e,pad:s,dimRoundingMode:r,dataFormat:o});return h=he(h,a.dtype),l?M(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),zt=$({concat_:function E1(n,t=0){v(n.length>=1,()=>"Pass at least one tensor to concat");const e=Iu(n,"tensors","concat","string_or_numeric");return"complex64"===e[0].dtype&&e.forEach(o=>{if("complex64"!==o.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${o.dtype}. `)}),1===e.length?qs(e[0]):F.runKernel(wl,e,{axis:t})}}),qe=$({matMul_:function _1(n,t,e=!1,s=!1){let r=N(n,"a","matMul"),o=N(t,"b","matMul");return[r,o]=Dt(r,o),F.runKernel(Al,{a:r,b:o},{transposeA:e,transposeB:s})}}),Rs=$({sigmoid_:function D1(n){const e={x:N(n,"x","sigmoid","float32")};return F.runKernel(ia,e)}}),Ye=$({slice_:function R1(n,t,e){const s=N(n,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");return F.runKernel(ou,{x:s},{begin:t,size:e})}}),Uo=$({tanh_:function $1(n){const e={x:N(n,"x","tanh","float32")};return F.runKernel(da,e)}}),O1=$({basicLSTMCell_:function F1(n,t,e,s,r,o){const i=N(n,"forgetBias","basicLSTMCell"),a=N(t,"lstmKernel","basicLSTMCell"),l=N(e,"lstmBias","basicLSTMCell"),u=N(s,"data","basicLSTMCell"),c=N(r,"c","basicLSTMCell"),h=N(o,"h","basicLSTMCell"),d=zt([u,h],1),p=qe(d,a),f=ne(p,l),m=f.shape[1]/4,A=[f.shape[0],m],y=Ye(f,[0,0],A),x=Ye(f,[0,m],A),b=Ye(f,[0,2*m],A),I=Ye(f,[0,3*m],A),S=ne(L(Rs(y),Uo(x)),L(c,Rs(ne(i,b))));return[S,L(Uo(S),Rs(I))]}}),_u=$({batchToSpaceND_:function L1(n,t,e){const s=N(n,"x","batchToSpaceND"),r=t.reduce((a,l)=>a*l);return v(s.rank>=1+t.length,()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`),v(e.length===t.length,()=>`crops.length is ${e.length} but should be equal to blockShape.length  ${t.length}`),v(s.shape[0]%r==0,()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`),F.runKernel(yl,{x:s},{blockShape:t,crops:e})}});function P1(n){let t;return t=0===n.rank||1===n.rank?M(n,[1,1,1,n.size]):2===n.rank?M(n,[1,1,n.shape[0],n.shape[1]]):3===n.rank?M(n,[1,n.shape[0],n.shape[1],n.shape[2]]):n,t}const Ca=$({batchNorm_:function M1(n,t,e,s,r,o){null==o&&(o=.001);const i=N(n,"x","batchNorm"),a=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm");let u,c;null!=r&&(u=N(r,"scale","batchNorm")),null!=s&&(c=N(s,"offset","batchNorm")),v(a.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),v(null==c||a.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),v(null==u||a.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const d={x:P1(i),scale:u,offset:c,mean:a,variance:l},f=F.runKernel(_l,d,{varianceEpsilon:o});return M(f,i.shape)}}),qA=$({batchNorm2d_:function B1(n,t,e,s,r,o){const i=N(n,"x","batchNorm"),a=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm");let u,c;return null!=r&&(u=N(r,"scale","batchNorm")),null!=s&&(c=N(s,"offset","batchNorm")),v(2===i.rank,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`),v(2===a.rank||1===a.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${a.rank}.`),v(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=u&&v(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=c&&v(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),Ca(i,a,l,c,u,o)}}),jA=$({batchNorm3d_:function z1(n,t,e,s,r,o){const i=N(n,"x","batchNorm"),a=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm");let u,c;return null!=r&&(u=N(r,"scale","batchNorm")),null!=s&&(c=N(s,"offset","batchNorm")),v(3===i.rank,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`),v(3===a.rank||1===a.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${a.rank}.`),v(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=u&&v(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=c&&v(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),Ca(i,a,l,c,u,o)}}),QA=$({batchNorm4d_:function V1(n,t,e,s,r,o){const i=N(n,"x","batchNorm"),a=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm");let u,c;return null!=r&&(u=N(r,"scale","batchNorm")),null!=s&&(c=N(s,"offset","batchNorm")),v(4===i.rank,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`),v(4===a.rank||1===a.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${a.rank}.`),v(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=u&&v(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=c&&v(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),Ca(i,a,l,c,u,o)}}),XA=$({bincount_:function U1(n,t,e){const s=N(n,"x","bincount"),r=N(t,"weights","bincount");return v("int32"===s.dtype,()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`),v(e>=0,()=>`size must be non-negative, but got ${e}.`),v(r.size===s.size||0===r.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`),F.runKernel(xh,{x:s,weights:r},{size:e})}}),G1=$({bitwiseAnd_:function W1(n,t){const e=N(n,"x","bitwiseAnd"),s=N(t,"y","bitwiseAnd");if(!Qe(e.shape,s.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${e.shape}, y: ${s.shape}`);if("int32"!==e.dtype||"int32"!==s.dtype)throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${e.dtype} and type of y: ${s.dtype}`);return F.runKernel(xl,{a:e,b:s})}}),K1=$({broadcastArgs_:function H1(n,t){const e=N(n,"s0","broadcastArgs","int32"),s=N(t,"s1","broadcastArgs","int32");if(1!==e.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${e.rank}`);if(1!==s.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);return F.runKernel(bh,{s0:e,s1:s})}}),Wo=$({broadcastTo_:function q1(n,t){let e=N(n,"broadcastTo","x");const s=e.shape;if(Un(t),t.length<e.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${e.rank}.`);if(t.length>e.rank){const u=e.shape.slice();for(;u.length<t.length;)u.unshift(1);e=M(e,u)}const r=e.shape,o=Array.from(t);for(let u=t.length-1;u>=0;u--)if(r[u]===t[u])o[u]=1;else if(1!==e.shape[u])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);return 0===o.map((u,c)=>u>1?c:-1).filter(u=>u>=0).length?qs(e):F.runKernel(pa,{x:e},{reps:o})}}),ZA=$({ceil_:function j1(n){const e={x:N(n,"x","ceil","float32")};return F.runKernel(ki,e)}}),On=$({clipByValue_:function Q1(n,t,e){const s=N(n,"x","clipByValue");return v(t<=e,()=>`Error in clip: min (${t}) must be less than or equal to max (${e}).`),t===e?Bo(s.shape,t,s.dtype):F.runKernel(Ei,{x:s},{clipValueMin:t,clipValueMax:e})}}),YA=$({concat1d_:function X1(n){return zt(n,0)}}),JA=$({concat2d_:function Z1(n,t){return zt(n,t)}}),ey=$({concat3d_:function Y1(n,t){return zt(n,t)}}),ty=$({concat4d_:function J1(n,t){return zt(n,t)}}),wr=$({conv2d_:function eS(n,t,e,s,r="NHWC",o=[1,1],i){const a=N(n,"x","conv2d","float32"),l=N(t,"filter","conv2d","float32");let u=a,c=!1;3===a.rank&&(c=!0,u=M(a,[1,a.shape[0],a.shape[1],a.shape[2]])),v(4===u.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),v(4===l.rank,()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`),In("conv2d",s,i);const h="NHWC"===r?u.shape[3]:u.shape[1];v(h===l.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`),v(an(e,o),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),v(Jr(o),()=>"Error in conv2D: Dilated rates should be larger than 0."),v(Jr(e),()=>"Error in conv2D: Strides should be larger than 0.");const f=F.runKernel(Il,{x:u,filter:l},{strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:i});return c?M(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),pp=$({conv1d_:function tS(n,t,e,s,r="NWC",o=1,i){const a=N(n,"x","conv1d"),l=N(t,"filter","conv1d");let u=a,c=!1;2===a.rank&&(c=!0,u=M(a,[1,a.shape[0],a.shape[1]])),v(3===u.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),v(3===l.rank,()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`),In("conv1d",s,i),v(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),v(an(e,o),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${o}'`),v(Jr(o),()=>"Error in conv1D: Dilated rates should be larger than 0."),v(Jr(e),()=>"Error in conv1D: Stride should be larger than 0."),v("NWC"===r,()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`);const h=M(l,[1,l.shape[0],l.shape[1],l.shape[2]]),d=M(u,[u.shape[0],1,u.shape[1],u.shape[2]]),m=wr(d,h,[1,e],s,"NHWC",[1,o],i);return M(m,c?[m.shape[2],m.shape[3]]:[m.shape[0],m.shape[2],m.shape[3]])}}),fp=$({conv2DBackpropInput_:function nS(n,t,e,s,r,o="NHWC",i){v(n.length===t.rank,()=>`Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);let a=n,l=t,u=!1;3===t.rank&&(u=!0,l=M(t,[1,t.shape[0],t.shape[1],t.shape[2]]),a=[1,n[0],n[1],n[2]]),v(4===a.length,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${a.length}.`),v(4===l.rank,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`),v(4===e.rank,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${e.rank}`);const c="NHWC"===o?a[3]:a[1],h="NHWC"===o?l.shape[3]:l.shape[1];v(c===e.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${e.shape[2]}.`),v(h===e.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${e.shape[3]}.`),In("conv2dDerInput",r,i);const f=F.runKernel(Cl,{dy:l,filter:e},{strides:s,pad:r,dataFormat:o,dimRoundingMode:i,inputShape:a});return u?M(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),mp=$({conv2dTranspose_:function sS(n,t,e,s,r,o){const i=N(n,"x","conv2dTranspose"),a=N(t,"filter","conv2dTranspose");return fp(e,i,a,s,r,"NHWC",o)}}),ny=$({conv3d_:function rS(n,t,e,s,r="NDHWC",o=[1,1,1]){const i=N(n,"x","conv3d"),a=N(t,"filter","conv3d");let l=i,u=!1;4===i.rank&&(u=!0,l=M(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),v(5===l.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),v(5===a.rank,()=>`Error in conv3d: filter must be rank 5, but got rank ${a.rank}.`),v(l.shape[4]===a.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${a.shape[3]}.`),v(an(e,o),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),v("NDHWC"===r,()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`),v(Jr(o),()=>"Error in conv3D: Dilated rates should be larger than 0."),v(Jr(e),()=>"Error in conv3D: Strides should be larger than 0.");const d=F.runKernel(vl,{x:l,filter:a},{strides:e,pad:s,dataFormat:r,dilations:o});return u?M(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),sy=$({conv3DBackpropInput_:function oS(n,t,e,s,r){v(n.length===t.rank,()=>`Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);let o=n,i=t,a=!1;4===t.rank&&(a=!0,i=M(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),o=[1,n[0],n[1],n[2],n[3]]);const l=o[4],u=i.shape[4];v(5===o.length,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${o.length}.`),v(5===i.rank,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`),v(5===e.rank,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${e.rank}`),v(l===e.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${e.shape[3]}.`),v(u===e.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${e.shape[4]}.`);const d=F.runKernel(vh,{dy:i,filter:e},{pad:r,strides:s,inputShape:o});return a?M(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),ry=$({conv3dTranspose_:function iS(n,t,e,s,r){const o=N(n,"x","conv3dTranspose"),i=N(t,"filter","conv3dTranspose");return sy(e,o,i,s,r)}}),Du=$({cos_:function aS(n){const e={x:N(n,"x","cos","float32")};return F.runKernel(_i,e)}}),gp=$({cosh_:function lS(n){const e={x:N(n,"x","cosh","float32")};return F.runKernel(Di,e)}}),Ru=$({cumprod_:function uS(n,t=0,e=!1,s=!1){const o={x:N(n,"x","cumprod")};return F.runKernel(Sh,o,{axis:t,exclusive:e,reverse:s})}}),Ap=$({cumsum_:function cS(n,t=0,e=!1,s=!1){const o={x:N(n,"x","cumsum")};return F.runKernel(Sl,o,{axis:t,exclusive:e,reverse:s})}}),yp=$({denseBincount_:function hS(n,t,e,s=!1){const r=N(n,"x","denseBincount"),o=N(t,"weights","denseBincount");return v("int32"===r.dtype,()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`),v(r.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`),v(e>=0,()=>`size must be non-negative, but got ${e}.`),v(o.size===r.size||0===o.size,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${o.shape}.`),F.runKernel(Th,{x:r,weights:o},{size:e,binaryOutput:s})}}),oy=$({depthToSpace_:function dS(n,t,e="NHWC"){const s=N(n,"x","depthToSpace","float32"),r="NHWC"===e?s.shape[1]:s.shape[2],o="NHWC"===e?s.shape[2]:s.shape[3],i="NHWC"===e?s.shape[3]:s.shape[1];return v(t>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`),v(r*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`),v(o*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${o} and ${t} for depthToSpace with input shape\n        ${s.shape}`),v(i%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${s.shape}`),F.runKernel(kh,{x:s},{blockSize:t,dataFormat:e})}}),va=$({depthwiseConv2d_:function pS(n,t,e,s,r="NHWC",o=[1,1],i){const a=N(n,"x","depthwiseConv2d","float32"),l=N(t,"filter","depthwiseConv2d","float32");let u=a,c=!1;3===a.rank&&(c=!0,u=M(a,[1,a.shape[0],a.shape[1],a.shape[2]])),v(4===u.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),v(4===l.rank,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);const h="NHWC"===r?u.shape[3]:u.shape[1];v(h===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${l.shape[2]}.`),In("depthwiseConv2d",s,i);const f=F.runKernel(Nl,{x:u,filter:l},{strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:i});return c?M(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),mS=$({diag_:function fS(n){const e={x:N(n,"x","diag")};return F.runKernel(Dh,e)}}),iy=$({dilation2d_:function gS(n,t,e,s,r=[1,1],o="NHWC"){const i=N(n,"x","dilation2d"),a=N(t,"filter","dilation2d");v(3===i.rank||4===i.rank,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`),v(3===a.rank,()=>`Error in dilation2d: filter must be rank 3, but got rank ${a.rank}.`),v("NHWC"===o,()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${o}`);let l=i,u=!1;3===i.rank&&(l=M(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0),v(l.shape[3]===a.shape[2],()=>`Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${a.shape[2]}`);const d=F.runKernel(Tl,{x:l,filter:a},{strides:e,pad:s,dilations:r});return u?M(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),xs=$({equal_:function AS(n,t){let e=N(n,"a","equal","string_or_numeric"),s=N(t,"b","equal","string_or_numeric");return[e,s]=Dt(e,s),Le(e.shape,s.shape),F.runKernel(kl,{a:e,b:s})}}),fn=$({where_:function yS(n,t,e){const s=N(t,"a","where"),r=N(e,"b","where"),o=N(n,"condition","where","bool"),i=Le(Le(o.shape,s.shape),r.shape),a=Wo(o,i),l=Wo(s,i),u=Wo(r,i);return F.runKernel(ru,{condition:a,t:l,e:u})}}),ay=$({divNoNan_:function xS(n,t){let e=N(n,"a","div"),s=N(t,"b","div");[e,s]=Dt(e,s);const r=Se(e,s),o=Ze(r),i=xs(s,o);return fn(i,o,r)}}),ly=$({dot_:function bS(n,t){const e=N(n,"t1","dot"),s=N(t,"t2","dot");v(!(1!==e.rank&&2!==e.rank||1!==s.rank&&2!==s.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${e.rank} and ${s.rank}.`);const r=1===e.rank?e.size:e.shape[1],o=1===s.rank?s.size:s.shape[0];if(v(r===o,()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${o}.`),1===e.rank&&1===s.rank){const i=M(e,[1,-1]),a=M(s,[-1,1]),l=qe(i,a);return M(l,[])}if(1===e.rank&&2===s.rank){const i=M(e,[1,-1]),a=M(s,[s.shape[0],s.shape[1]]),l=qe(i,a);return M(l,[l.size])}if(2===e.rank&&1===s.rank){const i=M(s,[-1,1]),a=qe(e,i);return M(a,[a.size])}{const i=M(s,[s.shape[0],s.shape[1]]);return qe(e,i)}}}),Go=$({einsum_:function wS(n,...t){const e=t.map((r,o)=>N(r,`tensors${o}`,"einsum"));return F.runKernel(Oh,e,{equation:n})}}),Sa=$({elu_:function IS(n){const e={x:N(n,"x","elu","float32")};return F.runKernel($i,e)}}),vS=$({ensureShape_:function CS(n,t){const e=N(n,"x","ensureShape","string_or_numeric");if(!function nC(n,t){if(n===t)return!0;if(null==n||null==t||n.length!==t.length)return!1;for(let e=0;e<n.length;e++)if(null!==n[e]&&null!==t[e]&&n[e]!==t[e])return!1;return!0}(e.shape,t))throw new Error(`EnsureShape: Shape of tensor ${e.shape} is not compatible with expected shape ${t}`);return n}}),uy=$({erf_:function SS(n){let t=N(n,"x","erf");return v("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=he(t,"float32")),F.runKernel(Fi,{x:t})}});function xp(n,t){for(let e=0;e<n.length;++e)if(n[n.length-e-1]!==t-1-e)return!1;return!0}function cy(n,t,e){const s=n.length+t.length,r=[];let o=0,i=0;for(let a=0;a<s;a++)-1===e.indexOf(a)?r.push(n[o++]):r.push(t[i++]);return r}function nn(n,t){const e=[],s=n.length;for(let o=0;o<s;o++)-1===t.indexOf(o)&&e.push(n[o]);return[e,t.map(o=>n[o])]}function Ot(n,t){return cy(n,t.map(s=>1),t)}function ln(n,t,e){v(xp(t,e),()=>`${n} supports only inner-most axes for now. Got axes ${t} and rank-${e} input.`)}function Tt(n,t){if(xp(n,t))return null;const e=[];for(let s=0;s<t;++s)-1===n.indexOf(s)&&e.push(s);return n.forEach(s=>e.push(s)),e}function Ir(n){return n.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function Lt(n,t){const e=[];for(let s=t-n;s<t;++s)e.push(s);return e}const Gn=$({max_:function NS(n,t=null,e=!1){const r={x:N(n,"x","max")};return F.runKernel(zl,r,{reductionIndices:t,keepDims:e})}}),Na=$({min_:function TS(n,t=null,e=!1){const r={x:N(n,"x","min")};return F.runKernel(Gl,r,{axis:t,keepDims:e})}}),we=$({sum_:function kS(n,t=null,e=!1){let s=N(n,"x","sum");return"bool"===s.dtype&&(s=he(s,"int32")),F.runKernel(iu,{x:s},{axis:t,keepDims:e})}});function hy(n,t,e=null){if(0===n.rank)return Ht(n);if(1!==n.rank&&null===e)return hy(M(n,[-1]),t,e);if(1===n.rank||"number"==typeof e||Array.isArray(e)&&1===e.length){if(1===t)return we(Ht(n),e);if(t===1/0)return Gn(Ht(n),e);if(t===-1/0)return Na(Ht(n),e);if("euclidean"===t||2===t)return pn(we(yr(Ht(n),ke(2,"int32")),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(e)&&2===e.length){if(1===t)return Gn(we(Ht(n),e[0]),e[1]-1);if(t===1/0)return Gn(we(Ht(n),e[1]),e[0]);if(t===-1/0)return Na(we(Ht(n),e[1]),e[0]);if("fro"===t||"euclidean"===t)return pn(we(dt(n),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${e}`)}const Ta=$({norm_:function ES(n,t="euclidean",e=null,s=!1){const r=hy(n=N(n,"x","norm"),t,e);let o=r.shape;if(s){const i=Ge(e,n.shape);o=Ot(r.shape,i)}return M(r,o)}}),dy=$({euclideanNorm_:function _S(n,t=null,e=!1){return Ta(n,"euclidean",t,e)}}),Hn=$({exp_:function DS(n){const e={x:N(n,"x","exp")};return F.runKernel(Oi,e)}}),Cn=$({expandDims_:function RS(n,t=0){const e=N(n,"x","expandDims","string_or_numeric");return v(t<=e.rank,()=>"Axis must be <= rank of the tensor"),F.runKernel(El,{input:e},{dim:t})}}),py=$({expm1_:function $S(n){const e={x:N(n,"x","expm1")};return F.runKernel(Li,e)}}),is=$({tile_:function FS(n,t){const e=N(n,"x","tile","string_or_numeric");return v(e.rank===t.length,()=>`Error in transpose: rank of input ${e.rank} must match length of reps ${t}.`),F.runKernel(pa,{x:e},{reps:t})}}),bp=$({eye_:function OS(n,t,e,s="float32"){null==t&&(t=n);const r=Be([n,t],s),o=n<=t?n:t;for(let a=0;a<o;++a)r.set(1,a,a);const i=M(r.toTensor(),[n,t]);if(null==e)return i;if(1===e.length)return is(Cn(i,0),[e[0],1,1]);if(2===e.length)return is(Cn(Cn(i,0),0),[e[0],e[1],1,1]);if(3===e.length)return is(Cn(Cn(Cn(i,0),0),0),[e[0],e[1],e[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${e.length}D.`)}}),ka=$({floor_:function LS(n){const e={x:N(n,"x","floor","float32")};return F.runKernel(Pi,e)}}),Ea=$({gather_:function PS(n,t,e=0,s=0){const r=N(n,"x","gather"),o=N(t,"indices","gather","int32");return F.runKernel(Dl,{x:r,indices:o},{axis:e,batchDims:s})}}),En=$({greater_:function MS(n,t){let e=N(n,"a","greater","string_or_numeric"),s=N(t,"b","greater","string_or_numeric");return[e,s]=Dt(e,s),Le(e.shape,s.shape),F.runKernel(Rl,{a:e,b:s})}}),Cr=$({greaterEqual_:function BS(n,t){let e=N(n,"a","greaterEqual","string_or_numeric"),s=N(t,"b","greaterEqual","string_or_numeric");return[e,s]=Dt(e,s),Le(e.shape,s.shape),F.runKernel(Bi,{a:e,b:s})}}),$u=$({imag_:function zS(n){const e={input:N(n,"input","imag")};return F.runKernel(Uh,e)}}),fy=$({isFinite_:function VS(n){const e={x:N(n,"x","isFinite")};return F.runKernel(Vi,e)}}),my=$({isInf_:function US(n){const e={x:N(n,"x","isInf")};return F.runKernel(Ui,e)}}),gy=$({isNaN_:function WS(n){const e={x:N(n,"x","isNaN")};return F.runKernel(Wi,e)}}),Fu=$({leakyRelu_:function GS(n,t=.2){const s={x:N(n,"x","leakyRelu")};return F.runKernel($l,s,{alpha:t})}}),_a=$({less_:function HS(n,t){let e=N(n,"a","less","string_or_numeric"),s=N(t,"b","less","string_or_numeric");return[e,s]=Dt(e,s),Le(e.shape,s.shape),F.runKernel(Fl,{a:e,b:s})}}),eo=$({lessEqual_:function KS(n,t){let e=N(n,"a","lessEqual","string_or_numeric"),s=N(t,"b","lessEqual","string_or_numeric");return[e,s]=Dt(e,s),Le(e.shape,s.shape),F.runKernel(Ol,{a:e,b:s})}});function qS(n,t,e){if(e<=0)throw new Error("The number of values should be positive.");return F.runKernel(Wh,{},{start:n,stop:t,num:e})}const Ay=$({localResponseNormalization_:function jS(n,t=5,e=1,s=1,r=.5){const o=N(n,"x","localResponseNormalization");v(4===o.rank||3===o.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${o.rank}.`),v(No(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let i=o,a=!1;3===o.rank&&(a=!0,i=M(o,[1,o.shape[0],o.shape[1],o.shape[2]]));const c=F.runKernel(Bl,{x:i},{depthRadius:t,bias:e,alpha:s,beta:r});return a?M(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Kn=$({log_:function QS(n){const e={x:N(n,"x","log","float32")};return F.runKernel(Gi,e)}}),Ou=$({log1p_:function XS(n){const e={x:N(n,"x","log1p")};return F.runKernel(Hi,e)}}),bt=$({neg_:function ZS(n){const e={x:N(n,"x","neg")};return F.runKernel(Kl,e)}}),Ho=$({softplus_:function YS(n){const e={x:N(n,"x","softplus")};return F.runKernel(aa,e)}}),yy=$({logSigmoid_:function JS(n){const t=N(n,"x","logSigmoid");return js(s=>({value:bt(Ho(bt(s))),gradFunc:i=>L(i,Rs(bt(s)))}))(t)}}),wp=$({logSoftmax_:function eN(n,t=-1){const e=N(n,"logits","logSoftmax");if(-1===t&&(t=e.rank-1),t!==e.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and axis was ${t}`);return js((r,o)=>{const a=Gn(r,t,!0),l=xe(r,a),u=xe(he(l,"float32"),Kn(we(Hn(l),t,!0)));return o([u]),{value:u,gradFunc:(h,d)=>{const[p]=d,g=Hn(p);return xe(h,L(we(h,t,!0),g))}}})(e)}}),Ip=$({logSumExp_:function tN(n,t=null,e=!1){const s=N(n,"x","logSumExp"),r=Ge(t,s.shape),o=Gn(s,r,!0),i=xe(s,o),a=Hn(i),l=we(a,r),u=Kn(l),c=ne(M(o,u.shape),u);if(e){const h=Ot(c.shape,r);return M(c,h)}return c}}),$s=$({logicalAnd_:function nN(n,t){const e=N(n,"a","logicalAnd","bool"),s=N(t,"b","logicalAnd","bool");return Le(e.shape,s.shape),F.runKernel(Ll,{a:e,b:s})}}),Lu=$({logicalNot_:function sN(n){const e={x:N(n,"x","logicalNot","bool")};return F.runKernel(Pl,e)}}),Cp=$({logicalOr_:function rN(n,t){const e=N(n,"a","logicalOr","bool"),s=N(t,"b","logicalOr","bool");return Le(e.shape,s.shape),F.runKernel(Ml,{a:e,b:s})}}),xy=$({logicalXor_:function oN(n,t){const e=N(n,"a","logicalXor","bool"),s=N(t,"b","logicalXor","bool");return Le(e.shape,s.shape),$s(Cp(n,t),Lu($s(n,t)))}}),Pu=2147483648,vp=$({searchSorted_:function iN(n,t,e="left"){const s=N(n,"sortedSequence","searchSorted"),r=N(t,"values","searchSorted"),i=r.shape[r.shape.length-1],a=M(s,[-1,s.shape[s.shape.length-1]]),l=M(r,[-1,i]);if(a.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(a.shape[0]!==l.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(Q(l.shape)>=Pu)throw new Error(`values tensor size must less than ${Pu}`);if(a.shape[1]>=Pu)throw new Error(`trailing dim_size must less than ${Pu} for int32 output type, was ${a.shape[1]}`);return F.runKernel(ad,{sortedSequence:a,values:l},{side:e})}});function aN(n,t){return vp(n,t,"left")}const Mu=$({maxPool_:function lN(n,t,e,s,r){const o=N(n,"x","maxPool");let a=o,l=!1;3===o.rank&&(l=!0,a=M(o,[1,o.shape[0],o.shape[1],o.shape[2]])),v(4===a.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${a.rank}.`),v(an(e,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${e} and dilations '1'`),In("maxPool",s,r);const h=F.runKernel(Vl,{x:a},{filterSize:t,strides:e,pad:s,dimRoundingMode:r});return l?M(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),by=$({maxPool3d_:function uN(n,t=[1,1,1],e,s,r,o="NDHWC"){const i=N(n,"x","maxPool3d");let a=i,l=!1;4===i.rank&&(l=!0,a=M(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),v(5===a.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${a.rank}.`),v("NDHWC"===o,()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`),In("maxPool3d",s,r);const h=F.runKernel(Ul,{x:a},{filterSize:t,strides:e,pad:s,dimRoundingMode:r,dataFormat:o});return l?M(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),hN=$({maxPoolWithArgmax_:function cN(n,t,e,s,r=!1){const i={x:N(n,"x","maxPoolWithArgmax")},l=F.runKernel(qh,i,{filterSize:t,strides:e,pad:s,includeBatchInIndex:r});return{result:l[0],indexes:l[1]}}}),Rt=$({mean_:function dN(n,t=null,e=!1){const r={x:N(n,"x","mean")};return F.runKernel(Wl,r,{axis:t,keepDims:e})}});function qt(n,t="float32"){if(Un(n),"complex64"===t){const s=qt(n,"float32"),r=qt(n,"float32");return fr(s,r)}const e=dn(Q(n),t);return F.makeTensor(e,n,t)}function qn(n,t="float32"){if(Un(n),"complex64"===t){const s=qn(n,"float32"),r=qt(n,"float32");return fr(s,r)}const e=dh(Q(n),t);return F.makeTensor(e,n,t)}function pN(n,t,{indexing:e="xy"}={}){if("xy"!==e&&"ij"!==e)throw new TypeError(`${e} is not a valid third argument to meshgrid`);if(void 0===n)return[];let s=N(n,"x","meshgrid",n instanceof mt?n.dtype:"float32");if(void 0===t)return[s];let r=N(t,"y","meshgrid",t instanceof mt?t.dtype:"float32");const o=Q(s.shape),i=Q(r.shape);return"xy"===e?(s=M(s,[1,-1]),r=M(r,[-1,1]),[qe(qn([i,1],s.dtype),s),qe(r,qn([1,o],r.dtype))]):(s=M(s,[-1,1]),r=M(r,[1,-1]),[qe(s,qn([1,i],s.dtype)),qe(qn([o,1],r.dtype),r)])}const to=$({minimum_:function fN(n,t){let e=N(n,"a","minimum"),s=N(t,"b","minimum");return[e,s]=Dt(e,s),"bool"===e.dtype&&(e=he(e,"int32"),s=he(s,"int32")),Le(e.shape,s.shape),F.runKernel(qi,{a:e,b:s})}}),wy=$({mirrorPad_:function mN(n,t,e){v("reflect"===e||"symmetric"===e,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${e}.`);const s=N(n,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");v(t.length===s.rank,()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`);const r="reflect"===e?1:0;for(let a=0;a<s.rank;a++)v(2===t[a].length,()=>"Invalid number of paddings. Must be length of 2 each."),v(t[a][0]>=0&&t[a][0]<=s.shape[a]-r&&t[a][1]>=0&&t[a][1]<=s.shape[a]-r,()=>`Padding in dimension ${a} cannot be greater than or equal to ${s.shape[a]-r} or less than 0 for input of shape ${s.shape}`);return F.runKernel(Hl,{x:s},{paddings:t,mode:e})}}),Iy=$({mod_:function gN(n,t){let e=N(n,"a","mod"),s=N(t,"b","mod");return[e,s]=Dt(e,s),F.runKernel(ji,{a:e,b:s})}}),Bu=$({moments_:function AN(n,t=null,e=!1){const s=Ge(t,(n=N(n,"x","moments")).shape),r=Rt(n,s,e);let o=r.shape;e||(o=Ot(r.shape,s));const i=dt(xe(he(n,"float32"),M(r,o)));return{mean:r,variance:Rt(i,s,e)}}}),xN=$({multiRNNCell_:function yN(n,t,e,s){const r=N(t,"data","multiRNNCell"),o=Iu(e,"c","multiRNNCell"),i=Iu(s,"h","multiRNNCell");let a=r;const l=[];for(let h=0;h<n.length;h++){const d=n[h](a,o[h],i[h]);l.push(d[0]),l.push(d[1]),a=d[1]}const u=[],c=[];for(let h=0;h<l.length;h+=2)u.push(l[h]),c.push(l[h+1]);return[u,c]}}),wN=$({multinomial_:function bN(n,t,e,s=!1){const r=N(n,"logits","multinomial"),o=r.size,i=r.rank;if(o<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${o}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);e=e||Math.random();const l={logits:1===i?M(r,[1,-1]):r},c=F.runKernel(jh,l,{numSamples:t,seed:e,normalized:s});return 1===i?M(c,[c.size]):c}}),Ko=$({notEqual_:function IN(n,t){let e=N(n,"a","notEqual","string_or_numeric"),s=N(t,"b","notEqual","string_or_numeric");return[e,s]=Dt(e,s),Le(e.shape,s.shape),F.runKernel(ql,{a:e,b:s})}}),Sp=$({oneHot_:function CN(n,t,e=1,s=0,r="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const i={indices:N(n,"indices","oneHot","int32")};return F.runKernel(Ql,i,{dtype:r,depth:t,onValue:e,offValue:s})}}),jn=$({onesLike_:function vN(n){const e={x:N(n,"x","onesLike")};return F.runKernel(jl,e)}}),NN=$({outerProduct_:function SN(n,t){const e=N(n,"v1","outerProduct"),s=N(t,"v2","outerProduct");v(1===e.rank&&1===s.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${e.rank} and ${s.rank}.`);const r=M(e,[-1,1]),o=M(s,[1,-1]);return qe(r,o)}}),vr=$({pad_:function TN(n,t,e=0){const s=N(n,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");return F.runKernel(Zl,{x:s},{paddings:t,constantValue:e})}}),EN=$({pad1d_:function kN(n,t,e=0){return v(2===t.length,()=>"Invalid number of paddings. Must be length of 2."),vr(n,[t],e)}}),DN=$({pad2d_:function _N(n,t,e=0){return v(2===t.length&&2===t[0].length&&2===t[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),vr(n,t,e)}}),$N=$({pad3d_:function RN(n,t,e=0){return v(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),vr(n,t,e)}}),ON=$({pad4d_:function FN(n,t,e=0){return v(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),vr(n,t,e)}}),zu=$({spaceToBatchND_:function LN(n,t,e){const s=N(n,"x","spaceToBatchND");return v(s.rank>=1+t.length,()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`),v(e.length===t.length,()=>`paddings.shape[0] ${e.length} must be equal to [blockShape] ${t.length}`),v(s.shape.reduce((i,a,l)=>l>0&&l<=t.length?i&&(a+e[l-1][0]+e[l-1][1])%t[l-1]==0:i,!0),()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${e.toString()} must be divisible by blockShapes ${t.toString()}`),F.runKernel(au,{x:s},{blockShape:t,paddings:e})}}),Cy=$({pool_:function PN(n,t,e,s,r,o,i){null==r&&(r=[1,1]),null==o&&(o=1),0===s&&(s="valid");const a=N(n,"x","maxPool");let l=a,u=!1;3===a.rank&&(u=!0,l=M(a,[1,a.shape[0],a.shape[1],a.shape[2]])),v(an(o,r),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${o} and dilations '${r}'`);const c=os(l.shape,t,o,r,s),h=[c.dilationHeight,c.dilationWidth];let d;d="same"===s?function BN(n,t){const s=n.map((i,a)=>i+(i-1)*(t[a]-1)).map(i=>i-1),r=s.map(i=>Math.floor(i/2)),o=s.map((i,a)=>i-r[a]);return s.map((i,a)=>[r[a],o[a]])}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const p=1===h[0]&&1===h[1],[f,g]=function MN(n,t,e){const s=e.map(c=>c[0]),r=e.map(c=>c[1]),o=n.concat(s,r),i=t.map((c,h)=>(c-o[h]%c)%c),a=r.map((c,h)=>c+i[h]),l=t.map((c,h)=>[s[h],a[h]]),u=t.map((c,h)=>[0,i[h]]);return[l,u]}([c.inHeight,c.inWidth],h,d),m=p?s:"valid",A=p?l:zu(l,h,f),x=("avg"===e?()=>Eu(A,t,o,m,i):()=>Mu(A,t,o,m,i))(),b=p?x:_u(x,h,g);return u?M(b,[b.shape[1],b.shape[2],b.shape[3]]):b}}),Vu=$({prelu_:function zN(n,t){const e=N(n,"x","prelu"),s=N(t,"alpha","prelu");return F.runKernel(Yl,{x:e,alpha:s})}}),vy=$({prod_:function VN(n,t=null,e=!1){let s=N(n,"x","prod");return"bool"===s.dtype&&(s=he(s,"int32")),F.runKernel(Jl,{x:s},{axis:t,keepDims:e})}}),WN=$({raggedGather_:function UN(n,t,e,s){const r=n.map((c,h)=>N(c,`tensors${h}`,"raggedGather","int32")),o=N(t,"paramsDenseValues","raggedGather"),i=N(e,"indices","raggedGather","int32"),u=F.runKernel(Yh,{paramsNestedSplits:r,paramsDenseValues:o,indices:i},{outputRaggedRank:s});return{outputNestedSplits:u.slice(0,u.length-1),outputDenseValues:u[u.length-1]}}}),HN=$({raggedRange_:function GN(n,t,e){const s=N(n,"starts","raggedRange"),r=N(t,"limits","raggedRange",s.dtype),o=N(e,"deltas","raggedRange",s.dtype),a=F.runKernel(Jh,{starts:s,limits:r,deltas:o});return{rtNestedSplits:a[0],rtDenseValues:a[1]}}}),qN=$({raggedTensorToTensor_:function KN(n,t,e,s,r){const o=N(n,"shape","raggedTensorToTensor","int32"),i=N(t,"values","raggedTensorToTensor"),a=N(e,"defaultValue","raggedTensorToTensor",i.dtype),l=s.map((h,d)=>N(h,`tensors${d}`,"raggedTensorToTensor","int32"));return F.runKernel(ed,{shape:o,values:i,defaultValue:a,rowPartitionTensors:l},{rowPartitionTypes:r})}}),QN=$({rand_:function jN(n,t,e){Un(n);const s=Q(n);let r=null;if(null==e||"float32"===e)r=new Float32Array(s);else if("int32"===e)r=new Int32Array(s);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);r=new Uint8Array(s)}for(let o=0;o<s;o++)r[o]=t();return F.makeTensor(r,n,e)}});var Uu=j(1315);class Np{constructor(t,e,s,r,o){this.mean=t,this.stdDev=e,this.dtype=s,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const i=o||Math.random();this.random=Uu.alea(i.toString())}nextValue(){if(!isNaN(this.nextVal)){const r=this.nextVal;return this.nextVal=NaN,r}let t,e,s=!1;for(;!s;){let r,o,i;do{r=2*this.random()-1,o=2*this.random()-1,i=r*r+o*o}while(i>=1||0===i);const a=Math.sqrt(-2*Math.log(i)/i);t=this.mean+this.stdDev*r*a,e=this.mean+this.stdDev*o*a,(!this.truncated||this.isValidTruncated(t))&&(s=!0)}return(!this.truncated||this.isValidTruncated(e))&&(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class XN{constructor(t,e,s,r){this.alpha=t,this.beta=1/e,this.dtype=s;const o=r||Math.random();this.randu=Uu.alea(o.toString()),this.randn=new Np(0,1,s,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,s,r,o,i;for(;;){do{r=this.randn.nextValue(),i=1+this.c*r}while(i<=0);if(i*=i*i,t=r*r,e=1-.331*t*t,s=.5*t+this.d*(1-i+Math.log(i)),o=this.randu(),o<e||Math.log(o)<s)break}return i*=1/this.beta*this.d,this.alpha<1&&(i*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(i)}convertValue(t){return"float32"===this.dtype?t:Math.round(t)}}class ZN{constructor(t=0,e=1,s,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=s,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=Uu.alea(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const nT=$({randomGamma_:function tT(n,t,e=1,s="float32",r){if(Un(n),null==e&&(e=1),null==s&&(s="float32"),"float32"!==s&&"int32"!==s)throw new Error(`Unsupported data type ${s}`);const o=new XN(t,e,s,r),i=Be(n,s);for(let a=0;a<i.values.length;a++)i.values[a]=o.nextValue();return i.toTensor()}}),kp=$({randomNormal_:function sT(n,t=0,e=1,s,r){if(Un(n),null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const o=new Np(t,e,s,!1,r),i=Be(n,s);for(let a=0;a<i.values.length;a++)i.values[a]=o.nextValue();return i.toTensor()}}),oT=$({randomStandardNormal_:function rT(n,t,e){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return kp(n,0,1,t,e)}}),no=$({randomUniform_:function iT(n,t=0,e=1,s="float32",r){Un(n);const o=Be(n,s),i=new ZN(t,e,null,r);for(let a=0;a<o.values.length;a++)o.values[a]=i.nextValue();return o.toTensor()}}),lT=$({randomUniformInt_:function aT(n,t,e,s){return no(n,t,e,"int32",s)}});function qo(n,t,e=1,s="float32"){if(0===e)throw new Error("Cannot have a step of zero");return F.runKernel(td,{},{start:n,stop:t,step:e,dtype:s})}const Da=$({real_:function uT(n){const e={input:N(n,"input","real")};return F.runKernel(nd,e)}}),Sy=$({reciprocal_:function cT(n){const e={x:N(n,"x","reciprocal")};return F.runKernel(Zi,e)}}),Fs=$({relu_:function hT(n){const e={x:N(n,"x","relu")};return F.runKernel(Yi,e)}}),Ep=$({relu6_:function dT(n){const e={x:N(n,"x","relu6")};return F.runKernel(Ji,e)}}),as=$({reverse_:function pT(n,t){const s={x:N(n,"x","reverse")};return F.runKernel(su,s,{dims:t})}}),mT=$({reverse1d_:function fT(n){const t=N(n,"x","reverse");return v(1===t.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),as(t,0)}}),AT=$({reverse2d_:function gT(n,t){const e=N(n,"x","reverse");return v(2===e.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${e.rank}.`),as(e,t)}}),xT=$({reverse3d_:function yT(n,t){const e=N(n,"x","reverse");return v(3===e.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${e.rank}.`),as(e,t)}}),wT=$({reverse4d_:function bT(n,t){const e=N(n,"x","reverse");return v(4===e.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${e.rank}.`),as(e,t)}}),_p=$({round_:function IT(n){const e={x:N(n,"x","round")};return F.runKernel(ea,e)}}),Dp=$({rsqrt_:function CT(n){const e={x:N(n,"x","rsqrt","float32")};return F.runKernel(ta,e)}}),Rp=$({selu_:function vT(n){const e={x:N(n,"x","selu")};return F.runKernel(na,e)}}),$p=$({separableConv2d_:function ST(n,t,e,s,r,o=[1,1],i="NHWC"){const a=N(n,"x","separableConv2d"),l=N(t,"depthwiseFilter","separableConv2d"),u=N(e,"pointwiseFilter","separableConv2d");let c=a,h=!1;if(3===a.rank&&(h=!0,c=M(a,[1,a.shape[0],a.shape[1],a.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");v(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),v(4===l.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),v(4===u.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),v(1===u.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),v(1===u.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);const d=l.shape[2],p=l.shape[3];v(u.shape[2]===d*p,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*p}, but got ${u.shape[2]}.`);const f=va(c,l,s,r,i,o),m=wr(f,u,1,"valid",i);return h?M(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});function Fp(){return(Fp=(0,q.Z)(function*(n,t){const e=N(n,"x","setdiff1d"),s=N(t,"y","setdiff1d");v(e.dtype===s.dtype,()=>`x and y should have the same dtype, but got x (${e.dtype}) and y (${s.dtype}).`),v(1===e.rank,()=>`x should be 1D tensor, but got x (${e.shape}).`),v(1===s.rank,()=>`y should be 1D tensor, but got y (${s.shape}).`);const r=yield e.data(),o=yield s.data(),i=new Set(o);let a=0;for(let c=0;c<r.length;c++)i.has(r[c])||a++;const l=new Gt([a],e.dtype),u=new Gt([a],"int32");for(let c=0,h=0;c<r.length;c++)i.has(r[c])||(l.values[h]=r[c],u.values[h]=c,h++);return[l.toTensor(),u.toTensor()]})).apply(this,arguments)}const TT=function NT(n,t){return Fp.apply(this,arguments)},Ny=$({sign_:function kT(n){const e={x:N(n,"x","sign")};return F.runKernel(oa,e)}}),Op=$({sin_:function ET(n){const e={x:N(n,"x","sin","float32")};return F.runKernel(sa,e)}}),Lp=$({sinh_:function _T(n){const e={x:N(n,"x","sinh")};return F.runKernel(ra,e)}}),Wu=$({slice1d_:function DT(n,t,e){const s=N(n,"x","slice1d");return v(1===s.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`),Ye(s,[t],[e])}}),Pp=$({slice2d_:function RT(n,t,e){const s=N(n,"x","slice2d");return v(2===s.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`),Ye(s,t,e)}}),Gu=$({slice3d_:function $T(n,t,e){const s=N(n,"x","slice3d");return v(3===s.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`),Ye(s,t,e)}}),Ra=$({slice4d_:function FT(n,t,e){const s=N(n,"x","slice4d");return v(4===s.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`),Ye(s,t,e)}}),Hu=$({softmax_:function OT(n,t=-1){const e=N(n,"logits","softmax","float32");if(-1===t&&(t=e.rank-1),t!==e.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and dim was ${t}`);return F.runKernel(uu,{logits:e},{dim:t})}}),Ku=$({fft_:function LT(n){return v("complex64"===n.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${n.dtype}.`),F.runKernel("FFT",{input:n})}}),$a=$({ifft_:function PT(n){return v("complex64"===n.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${n.dtype}.`),F.runKernel(Vh,{input:n})}}),Mp=$({irfft_:function MT(n){const t=n.shape[n.shape.length-1],e=n.size/t;let s;if(t<=2){const r=M(n,[e,t]);s=$a(r)}else{const r=[e,2*(t-1)],o=M(Da(n),[e,t]),i=M($u(n),[e,t]),a=as(Ye(o,[0,1],[e,t-2]),1),l=L(as(Ye(i,[0,1],[e,t-2]),1),ke(-1)),u=zt([o,a],1),c=zt([i,l],1),h=M(fr(u,c),[r[0],r[1]]);s=$a(h)}if(s=Da(s),3===n.rank&&0!==n.shape[0]){const r=s,o=n.shape[0];s=M(s,[o,s.shape[0]/o,s.shape[1]]),r.dispose()}return s}}),Ln=$({split_:function BT(n,t,e=0){const r={x:N(n,"x","split")};return F.runKernel(lu,r,{numOrSizeSplits:t,axis:e})}}),qu=$({rfft_:function zT(n,t){v("float32"===n.dtype,()=>`The dtype for rfft() must be real value but got ${n.dtype}`);let e=n.shape[n.shape.length-1];const s=n.size/e;let r;if(null!=t&&t<e){const f=n.shape.map(m=>0),g=n.shape.map(m=>m);g[n.shape.length-1]=t,r=Ye(n,f,g),e=t}else if(null!=t&&t>e){const f=n.shape.map(g=>g);f[n.shape.length-1]=t-e,r=zt([n,qt(f)],n.shape.length-1),e=t}else r=n;const o=Ze(r),i=M(fr(r,o),[s,e]),a=Ku(i),l=Math.floor(e/2)+1,u=Da(a),c=$u(a),h=Ln(u,[l,e-l],u.shape.length-1),d=Ln(c,[l,e-l],c.shape.length-1),p=r.shape.slice();return p[r.shape.length-1]=l,M(fr(h[0],d[0]),p)}}),Bp=$({squaredDifference_:function VT(n,t){let e=N(n,"a","squaredDifference"),s=N(t,"b","squaredDifference");return[e,s]=Dt(e,s),Le(e.shape,s.shape),F.runKernel(ua,{a:e,b:s},{})}}),so=$({squeeze_:function UT(n,t){const e=N(n,"x","squeeze","string_or_numeric");return M(e,lr(e.shape,t).newShape)}}),Qn=$({stack_:function WT(n,t=0){const e=Iu(n,"tensors","stack","string_or_numeric");return v(e.length>=1,()=>"Pass at least one tensor to tf.stack"),e.length>0&&v(t<=e[0].rank,()=>"Axis must be <= rank of the tensor"),F.runKernel(Xl,e,{axis:t})}}),jo=$({step_:function GT(n,t=0){const s={x:N(n,"x","step")};return F.runKernel(fa,s,{alpha:t})}}),Ty=$({stridedSlice_:function HT(n,t,e,s,r=0,o=0,i=0,a=0,l=0){const c={x:N(n,"x","stridedSlice","string_or_numeric")};return F.runKernel(fd,c,{begin:t,end:e,strides:s,beginMask:r,endMask:o,ellipsisMask:i,newAxisMask:a,shrinkAxisMask:l})}}),ky=$({tan_:function KT(n){const e={x:N(n,"x","tan","float32")};return F.runKernel(ha,e)}});function mn(n,t){So(n);const e=pr(n,t);if(1!==e.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return mr(n,null,e,t)}function Fa(n,t,e){if(So(n),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=pr(n,e);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return mr(n,t,s,e)}function qT(n,t,e){if(So(n),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const s=pr(n,e);if(4!==s.length&&1!==s.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return mr(n,t,s,e)}function jT(n,t,e){if(So(n),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const s=pr(n,e);if(5!==s.length&&1!==s.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return mr(n,t,s,e)}function QT(n,t,e){if(So(n),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const s=pr(n,e);if(6!==s.length&&1!==s.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return mr(n,t=t||s,s,e)}function Ey(n,t,e){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,o=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${e.shape}, indices.shape: ${t.shape}, shape: ${n}, sliceDim: ${s}, and batchDim: ${r}.`;if(e.rank<r)throw new Error(o+` update.rank < ${r}. `);if(n.length<s+(e.rank-r))throw new Error(o+` Output shape length < ${s+(e.rank-r)}`);if(e.rank!==r+n.length-s)throw new Error(o+" update.rank != "+(r+n.length-s));for(let i=0;i<r;++i)if(e.shape[i]!==t.shape[i])throw new Error(o+` updates.shape[${i}] (${e.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`);for(let i=0;i<e.rank-r;++i)if(e.shape[i+r]!==n[i+s])throw new Error(o+` updates.shape[${i+r}] (${e.shape[i+r]}) != shape[${i+r}] (${n[i+r]})`)}function zp(n,t,e){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(n.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${n.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(e.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${e}`);if(0===e.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===n.size)throw new Error(`Updates specified for empty output. updates shape: ${n.shape}`)}Ey(e,t,n)}function ro(n,t,e){const s=t.shape.length,r=s>1?t.shape[s-1]:1,o=e.length;let i=1;for(let h=r;h<o;++h)i*=e[h];const a=r<1?1:r;return{sliceRank:r,numUpdates:Q(t.shape)/a,sliceSize:i,strides:[...Ne(e.slice(0,r)),1],outputSize:Q(e)}}const ZT=$({tensorScatterUpdate_:function XT(n,t,e){const s=N(n,"tensor","tensorScatterupdate"),r=N(t,"indices","tensorScatterupdate","int32"),o=N(e,"updates","tensorScatterupdate");if(zp(o,r,s.shape),s.dtype!==o.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${s.dtype} and ${o.dtype}.`);return F.runKernel(id,{tensor:s,indices:r,updates:o},{})}}),_y=$({topk_:function YT(n,t=1,e=!0){const s=N(n,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const o={x:s},i={k:t,sorted:e},[a,l]=F.runKernel(yd,o,i);return{values:a,indices:l}}}),Vp=$({truncatedNormal_:function JT(n,t=0,e=1,s,r){if(Un(n),null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const o=new Np(t,e,s,!0,r),i=Be(n,s);for(let a=0;a<i.values.length;a++)i.values[a]=o.nextValue();return i.toTensor()}}),Dy=$({unique_:function ek(n,t=0){const e=N(n,"x","unique","string_or_numeric");v(e.rank>0,()=>"The input tensor must be at least 1D");const s={x:e},r={axis:t},[o,i]=F.runKernel(bd,s,r);return{values:o,indices:i}}}),Up=$({unsortedSegmentSum_:function tk(n,t,e){const s=N(n,"x","unsortedSegmentSum"),r=N(t,"segmentIds","unsortedSegmentSum","int32");return v(No(e),()=>"numSegments must be of dtype int"),F.runKernel(du,{x:s,segmentIds:r},{numSegments:e})}}),ls=$({unstack_:function nk(n,t=0){const e=N(n,"x","unstack","string_or_numeric");return v(t>=-e.shape.length&&t<e.shape.length,()=>`Axis = ${t} is not in [-${e.shape.length}, ${e.shape.length})`),F.runKernel(hu,{value:e},{axis:t})}});function sk(n,t){return vp(n,t,"right")}function Ry(n,t=!0,e,s){return F.makeVariable(n,t,e,s)}function Wp(n,t){const e=[];for(let o=0;o<t.length;o++)t[o]&&e.push(o);const s=Be(n,"int32"),r=Be([e.length,n.length],"int32");for(let o=0;o<e.length;o++){const i=s.indexToLoc(e[o]);r.values.set(i,o*n.length)}return r.toTensor()}function Gp(){return(Gp=(0,q.Z)(function*(n){const t=N(n,"condition","whereAsync","bool"),e=yield t.data(),s=Wp(t.shape,e);return n!==t&&t.dispose(),s})).apply(this,arguments)}const $y=function rk(n){return Gp.apply(this,arguments)};function Hp(){return(Hp=(0,q.Z)(function*(n,t,e){const s=N(n,"tensor","boolMask"),r=N(t,"mask","boolMask","bool"),o=null==e?0:e,i=r.rank,a=s.shape;v(i>0,()=>"mask cannot be scalar"),$n(a.slice(o,o+i),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let g=o;g<o+i;g++)l*=a[g];const u=a.slice(0,o).concat([l],a.slice(o+i)),c=M(s,u),h=M(r,[-1]),d=yield $y(h),p=so(d,[1]),f=Ea(c,p,o);return n!==s&&s.dispose(),t!==r&&r.dispose(),p.dispose(),c.dispose(),h.dispose(),d.dispose(),f})).apply(this,arguments)}const Kp=function ok(n,t,e){return Hp.apply(this,arguments)},Je=$({transpose_:function ik(n,t,e){const s=N(n,"x","transpose");if(null==t&&(t=s.shape.map((i,a)=>a).reverse()),v(s.rank===t.length,()=>`Error in transpose: rank of input ${s.rank} must match length of perm ${t}.`),t.forEach(i=>{v(i>=0&&i<s.rank,()=>`All entries in 'perm' must be between 0 and ${s.rank-1} but got ${t}`)}),s.rank<=1)return s.clone();const r={x:s},o={perm:t};return"complex64"===s.dtype?U(()=>{let i=Da(s),a=$u(s);return i=F.runKernel(Do,{x:i},o),a=F.runKernel(Do,{x:a},o),e&&(a=bt(a)),fr(i,a)}):F.runKernel(Do,r,o)}}),lk=$({movingAverage_:function ak(n,t,e,s,r=!0){const o=N(n,"v","movingAverage"),i=N(t,"x","movingAverage"),a=N(e,"decay","movingAverage");(function PC(n,t){v(n.dtype===t.dtype,()=>`The dtypes of the first(${n.dtype}) and second(${t.dtype}) input must match`)})(o,i),v(Qe(o.shape,i.shape),()=>"Shape mismatch in v and x");const l=ke(1),u=xe(l,a);let c=L(xe(i,o),u);if(r){v(null!=s,()=>"When using zeroDebias: true, step is required.");const h=N(s,"step","movingAverage");c=Se(c,xe(l,yr(a,h)))}return ne(o,c)}}),ck=$({scatterND_:function uk(n,t,e){Un(e);const s=N(n,"indices","scatterND","int32"),r=N(t,"updates","scatterND");return zp(r,s,e),F.runKernel(od,{indices:s,updates:r},{shape:e})}}),pk=$({sparseToDense_:function dk(n,t,e,s=0){Un(e);const r=N(n,"sparseIndices","sparseToDense","int32"),o=N(t,"sparseValues","sparseToDense","string_or_numeric"),i=N(s,"defaultValue","sparseToDense",o.dtype);return function hk(n,t,e,s){if("int32"!==n.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${n.dtype}.`);if(n.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${n.shape}.`);const r=n.rank>0?n.shape[0]:1,o=n.rank>1?n.shape[1]:1;if(e.length!==o)throw new Error(`outputShape has incorrect number of elements:, ${e.length}, should be: ${o}.`);if(0!==t.rank&&(1!==t.rank||t.size!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,o,e,i),F.runKernel(dd,{sparseIndices:r,sparseValues:o,defaultValue:i},{outputShape:e})}}),mk=$({gatherND_:function fk(n,t){const e=N(t,"indices","gatherND","int32"),r={params:N(n,"x","gatherND","string_or_numeric"),indices:e};return F.runKernel(zh,r)}}),Fy=$({dropout_:function Ak(n,t,e,s){const r=N(n,"x","dropout");if(v("float32"===r.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`),v(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return n instanceof mt?r.clone():r;const o=function gk(n,t){if(null==t)return n.shape.slice();if(Qe(n.shape,t))return t;if(n.shape.length===t.length){const e=[];for(let s=0;s<n.shape.length;s++)e.push(null==t[s]&&null!=n.shape[s]?n.shape[s]:t[s]);return e}return t}(r,e),i=1-t,a=Se(ka(ne(no(o,0,1,"float32",s),i)),i);return L(r,a)}});function Oy(n){return Math.floor(Math.pow(2,Math.ceil(Math.log(n)/Math.log(2))))}function qp(n,t,e){const s=1-n%2,r=new Float32Array(n);for(let o=0;o<n;++o){const i=2*Math.PI*o/(n+s-1);r[o]=t-e*Math.cos(i)}return mn(r,"float32")}function jp(){return(jp=(0,q.Z)(function*(n,t,e=1){const s=N(n,"predictions","inTopK"),r=N(t,"targets","inTopK");v(s.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`),v(s.rank-1===r.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`),$n(s.shape.slice(0,s.shape.length-1),r.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const o=s.shape[s.shape.length-1];v(e>0&&e<=o,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${o}), but got ${e}`);const i=yield s.data(),a=yield r.data(),[l,u]=[i.length/o,o],c=on("bool",l);for(let h=0;h<l;h++){const d=h*u,p=i.subarray(d,d+u),f=[];for(let g=0;g<p.length;g++)f.push({value:p[g],index:g});f.sort((g,m)=>m.value-g.value),c[h]=0;for(let g=0;g<e;g++)if(f[g].index===a[h]){c[h]=1;break}}return n!==s&&s.dispose(),t!==r&&r.dispose(),St(c,r.shape,"bool")})).apply(this,arguments)}const xk=function yk(n,t){return jp.apply(this,arguments)},Qp=$({conv2DBackpropFilter_:function bk(n,t,e,s,r,o="NHWC",i){let a=n;3===n.rank&&(a=M(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let l=t;3===l.rank&&(l=M(t,[1,t.shape[0],t.shape[1],t.shape[2]])),v(4===a.rank,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${a.shape}.`),v(4===l.rank,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`),v(4===e.length,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${e}.`);const u="NHWC"===o?a.shape[3]:a.shape[1],c="NHWC"===o?l.shape[3]:l.shape[1];return v(u===e[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${e[2]}.`),v(c===e[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${e[3]}).`),In("conv2dDerFilter",r,i),F.runKernel(Ih,{x:a,dy:l},{strides:s,pad:r,dataFormat:o,dimRoundingMode:i,filterShape:e})}});function ju(n,t,e){if(null==e||"linear"===e)return n;if("relu"===e)return L(n,jo(t));throw new Error(`Cannot compute gradient for fused activation ${e}.`)}function Qu(n,t){let e=t;const s=Kt(n.shape,t.shape);return s.length>0&&(e=we(e,s)),M(e,n.shape)}function Xu(n,t,e,s){if("linear"===t)return n;if("relu"===t)return Fs(n);if("elu"===t)return Sa(n);if("relu6"===t)return Ep(n);if("prelu"===t)return Vu(n,e);if("leakyrelu"===t)return Fu(n,s);if("sigmoid"===t)return Rs(n);throw new Error(`Unknown fused activation ${t}.`)}const Zu=(n,t)=>!(n>0)||"linear"===t,Ly=$({fusedConv2d_:function wk({x:n,filter:t,strides:e,pad:s,dataFormat:r="NHWC",dilations:o=[1,1],dimRoundingMode:i,bias:a,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===Zu(F.state.gradientDepth,l=l||"linear")){v("NHWC"===r,()=>`Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let S=wr(n,t,e,s,r,o,i);return null!=a&&(S=ne(S,a)),Xu(S,l,u,c)}const h=N(n,"x","conv2d","float32"),d=N(t,"filter","conv2d","float32");let p=h,f=!1;3===h.rank&&(f=!0,p=M(h,[1,h.shape[0],h.shape[1],h.shape[2]])),v(4===p.rank,()=>`Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`),v(4===d.rank,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`),In("fused conv2d",s,i);const g="NHWC"===r?p.shape[3]:p.shape[1];v(d.shape[2]===g,()=>`Error in conv2d: depth of input (${g}) must match input depth for filter ${d.shape[2]}.`),v(an(e,o),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`);const m=tn(p.shape,d.shape,e,o,s,i);let A,y;if(null!=a&&(A=N(a,"bias","fused conv2d"),[A]=Dt(A,h),"NHWC"===r?Le(m.outShape,A.shape):(v(A.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${A.shape.length}.`),v(0===A.shape.length||A.shape[0]===m.outChannels||1===A.shape[0],()=>`Error in fused conv2d: bias shape (${A.shape}) is not compatible with the number of output channels (${m.outChannels})`))),null!=u){const S=u.shape;if(v(S.length<=1||3===S.length,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${S.length}.`),1===S.length)v(1===S[0]||S[0]===m.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${S}) is not compatible with the number of output channels (${m.outChannels}).`);else if(3===S.length)try{Le(S,m.outShape)}catch{throw Error(`Error in fused conv2d: PReLU activation weights (${S}) is not compatible with the output shape of the conv2d (${m.outShape}).`)}y=N(u,"prelu weights","fused conv2d")}const x=(S,k)=>{v("NHWC"===r,()=>`Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`);const[E,D,O,C]=k,T=ju(S,O,l);v(br(o),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`);const z=[fp(D.shape,T,E,e,s),Qp(D,T,E.shape,e,s)];if(null!=C){const V=Qu(C,T);z.push(V)}return z},b={x:p,filter:d,bias:A,preluActivationWeights:y},I={strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:i,activation:l,leakyreluAlpha:c};return null==a?js((k,E,D)=>{let O=F.runKernel(mu,b,I);return D([E,k,O]),f&&(O=M(O,[O.shape[1],O.shape[2],O.shape[3]])),{value:O,gradFunc:x}})(p,d):js((k,E,D,O)=>{let C=F.runKernel(mu,b,I);return O([E,k,C,D]),f&&(C=M(C,[C.shape[1],C.shape[2],C.shape[3]])),{value:C,gradFunc:x}})(p,d,A)}}),Py=$({depthwiseConv2dNativeBackpropFilter_:function Ik(n,t,e,s,r,o=[1,1],i){let a=n;3===n.rank&&(a=M(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let l=t;return 3===l.rank&&(l=M(t,[1,t.shape[0],t.shape[1],t.shape[2]])),F.runKernel(Eh,{x:a,dy:l},{strides:s,pad:r,dimRoundingMode:i,dilations:o,filterShape:e})}}),My=$({depthwiseConv2dNativeBackpropInput_:function Ck(n,t,e,s,r,o=[1,1],i){let a=t,l=!1;3===t.rank&&(l=!0,a=M(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const h=F.runKernel(_h,{dy:a,filter:e},{strides:s,pad:r,dimRoundingMode:i,dilations:o,inputShape:n});return l?M(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),Sk=$({fusedDepthwiseConv2d_:function vk({x:n,filter:t,strides:e,pad:s,dataFormat:r="NHWC",dilations:o=[1,1],dimRoundingMode:i,bias:a,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===Zu(F.state.gradientDepth,l)){let I=va(n,t,e,s,r,o,i);return null!=a&&(I=ne(I,a)),Xu(I,l,u,c)}const h=N(n,"x","depthwiseConv2d","float32"),d=N(t,"filter","depthwiseConv2d","float32");let p=h,f=!1;3===h.rank&&(f=!0,p=M(h,[1,h.shape[0],h.shape[1],h.shape[2]])),v(4===p.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`),v(4===d.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`),v(p.shape[3]===d.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`),null==o&&(o=[1,1]),v(an(e,o),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),In("fused depthwiseConv2d",s,i);const g=tn(p.shape,d.shape,e,o,s,i,!0);let m,A;null!=a&&(m=N(a,"bias","fused conv2d"),[m]=Dt(m,h),Le(g.outShape,m.shape)),null!=u&&(A=N(u,"prelu weights","fused depthwiseConv2d"));const y=(I,S)=>{v(br(o),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);const[k,E,D,O]=S,C=ju(I,D,l),T=My(E.shape,C,k,e,s,o,i),_=Py(E,C,k.shape,e,s,o,i);return null!=O?[T,_,Qu(m,C)]:[T,_]},x={x:p,filter:d,bias:m,preluActivationWeights:A},b={strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:i,activation:l,leakyreluAlpha:c};return null==a?js((S,k,E)=>{let D=F.runKernel(gu,x,b);return E([k,S,D]),f&&(D=M(D,[D.shape[1],D.shape[2],D.shape[3]])),{value:D,gradFunc:y}})(p,d):js((S,k,E,D)=>{let O=F.runKernel(gu,x,b);return D([k,S,O,E]),f&&(O=M(O,[O.shape[1],O.shape[2],O.shape[3]])),{value:O,gradFunc:y}})(p,d,m)}}),Xp=$({fusedMatMul_:function Nk({a:n,b:t,transposeA:e=!1,transposeB:s=!1,bias:r,activation:o="linear",preluActivationWeights:i,leakyreluAlpha:a=.2}){if(!1===Zu(F.state.gradientDepth,o)){let C=qe(n,t,e,s);return null!=r&&(C=ne(C,r)),Xu(C,o,i,a)}let l=N(n,"a","fused matMul"),u=N(t,"b","fused matMul");[l,u]=Dt(l,u);const c=e?l.shape[l.rank-2]:l.shape[l.rank-1],h=s?u.shape[u.rank-1]:u.shape[u.rank-2],d=e?l.shape[l.rank-1]:l.shape[l.rank-2],p=s?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),g=u.shape.slice(0,-2),m=Q(f),A=Q(g);v(c===h,()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${e} and transposeB=${s} must match.`);const x=Le(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([d,p]),b=M(l,e?[m,c,d]:[m,d,c]),I=M(u,s?[A,p,h]:[A,h,p]);let S,k;null!=r&&(S=N(r,"bias","fused matMul"),[S]=Dt(S,l),Le(x,S.shape)),null!=i&&(k=N(i,"prelu weights","fused matMul"));const E=(C,T)=>{const[_,P,z,V]=T,H=ju(M(C,z.shape),z,o);let K,Z;return e||s?!e&&s?(K=qe(H,P,!1,!1),Z=qe(H,_,!0,!1)):e&&!s?(K=qe(P,H,!1,!0),Z=qe(_,H,!1,!1)):(K=qe(P,H,!0,!0),Z=qe(H,_,!0,!0)):(K=qe(H,P,!1,!0),Z=qe(_,H,!0,!1)),null!=r?[K,Z,Qu(V,H)]:[K,Z]},D={a:b,b:I,bias:S,preluActivationWeights:k},O={transposeA:e,transposeB:s,activation:o,leakyreluAlpha:a};return null==r?js((T,_,P)=>{const z=F.runKernel(fu,D,O);return P([T,_,z]),{value:M(z,x),gradFunc:E}})(b,I):js((T,_,P,z)=>{const V=F.runKernel(fu,D,O);return z([T,_,V,P]),{value:M(V,x),gradFunc:E}})(b,I,S)}}),kk=$({hammingWindow_:function Tk(n){return qp(n,.54,.46)}}),By=$({hannWindow_:function Ek(n){return qp(n,.5,.5)}}),zy=$({frame_:function _k(n,t,e,s=!1,r=0){let o=0;const i=[];for(;o+t<=n.size;)i.push(Ye(n,o,t)),o+=e;if(s)for(;o<n.size;){const a=o+t-n.size,l=zt([Ye(n,o,t-a),Bo([a],r)]);i.push(l),o+=e}return 0===i.length?Fa([],[0,t]):M(zt(i),[i.length,t])}}),Rk=$({stft_:function Dk(n,t,e,s,r=By){null==s&&(s=Oy(t));const o=zy(n,t,e),i=L(o,r(t));return qu(i,s)}}),Fk=$({cropAndResize_:function $k(n,t,e,s,r="bilinear",o=0){const i=N(n,"image","cropAndResize"),a=N(t,"boxes","cropAndResize","float32"),l=N(e,"boxInd","cropAndResize","int32"),u=a.shape[0];return v(4===i.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),v(2===a.rank&&4===a.shape[1],()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${a.shape}.`),v(1===l.rank&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${a.shape}.`),v(2===s.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`),v(s[0]>=1&&s[1]>=1,()=>`cropSize must be atleast [1,1], but was ${s}`),v("bilinear"===r||"nearest"===r,()=>`method must be bilinear or nearest, but was ${r}`),F.runKernel(Nh,{image:i,boxes:a,boxInd:l},{method:r,extrapolationValue:o,cropSize:s})}}),Lk=$({flipLeftRight_:function Ok(n){const t=N(n,"image","flipLeftRight","float32");return v(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`),F.runKernel(Bh,{image:t},{})}}),Mk=$({grayscaleToRGB_:function Pk(n){const t=N(n,"image","grayscaleToRGB"),e=t.rank-1,s=t.shape[e];v(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),v(1===s,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`);const r=new Array(t.rank);return r.fill(1,0,e),r[e]=3,is(t,r)}}),zk=$({rgbToGrayscale_:function Bk(n){const t=N(n,"image","RGBToGrayscale"),s=t.shape[t.rank-1];v(t.rank>=2,()=>`Error in RGBToGrayscale: images must be at least rank 2, but got rank ${t.rank}.`),v(3===s,()=>`Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${s}.`);const r=t.dtype,o=he(t,"float32"),i=mn([.2989,.587,.114]);let a;switch(t.rank){case 2:a=Go("ij,j->i",o,i);break;case 3:a=Go("ijk,k->ij",o,i);break;case 4:a=Go("ijkl,l->ijk",o,i);break;case 5:a=Go("ijklm,m->ijkl",o,i);break;case 6:a=Go("ijklmn,n->ijklm",o,i);break;default:throw new Error("Not a valid tensor rank.")}return a=Cn(a,-1),he(a,r)}}),Uk=$({rotateWithOffset_:function Vk(n,t,e=0,s=.5){const r=N(n,"image","rotateWithOffset","float32");return v(4===r.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`),F.runKernel(Id,{image:r},{radians:t,fillValue:e,center:s})}});function Qo(n,t,e,s,r,o){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==o&&(o=0);const i=n.shape[0];return e=Math.min(e,i),v(0<=s&&s<=1,()=>`iouThreshold must be in [0, 1], but was '${s}'`),v(2===n.rank,()=>`boxes must be a 2D tensor, but was of rank '${n.rank}'`),v(4===n.shape[1],()=>`boxes must have 4 columns, but 2nd dimension was ${n.shape[1]}`),v(1===t.rank,()=>"scores must be a 1D tensor"),v(t.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`),v(0<=o&&o<=1,()=>`softNmsSigma must be in [0, 1], but was '${o}'`),{maxOutputSize:e,iouThreshold:s,scoreThreshold:r,softNmsSigma:o}}const Gk=$({nonMaxSuppression_:function Wk(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY){const o=N(n,"boxes","nonMaxSuppression","float32"),i=N(t,"scores","nonMaxSuppression","float32"),a=Qo(o,i,e,s,r);return F.runKernel(Qh,{boxes:o,scores:i},{maxOutputSize:e=a.maxOutputSize,iouThreshold:s=a.iouThreshold,scoreThreshold:r=a.scoreThreshold})}});function Hk(n,t,e){const s=function Kk(n,t,e){return function jk(n,t,e){let s=0,r=n.length,o=0,i=!1;for(;s<r;){o=s+(r-s>>>1);const a=e(t,n[o]);a>0?s=o+1:(r=o,i=!a)}return i?s:-s-1}(n,t,e||qk)}(n,t,e);n.splice(s<0?-(s+1):s,0,t)}function qk(n,t){return n>t?1:n<t?-1:0}function Zp(n,t,e,s,r){return ef(n,t,e,s,r,0)}function Yp(n,t,e,s,r,o){return ef(n,t,e,s,r,0,!1,o,!0)}function Jp(n,t,e,s,r,o){return ef(n,t,e,s,r,o,!0)}function ef(n,t,e,s,r,o,i=!1,a=!1,l=!1){const u=[];for(let m=0;m<t.length;m++)t[m]>r&&u.push({score:t[m],boxIndex:m,suppressBeginIndex:0});u.sort(Vy);const c=o>0?-.5/o:0,h=[],d=[];for(;h.length<e&&u.length>0;){const m=u.pop(),{score:A,boxIndex:y,suppressBeginIndex:x}=m;if(A<r)break;let b=!1;for(let I=h.length-1;I>=x;--I){const S=Qk(n,y,h[I]);if(S>=s){b=!0;break}if(m.score=m.score*Xk(s,c,S),m.score<=r)break}m.suppressBeginIndex=h.length,b||(m.score===A?(h.push(y),d.push(m.score)):m.score>r&&Hk(u,m,Vy))}const p=h.length,f=e-p;a&&f>0&&(h.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const g={selectedIndices:h};return i&&(g.selectedScores=d),l&&(g.validOutputs=p),g}function Qk(n,t,e){const s=n.subarray(4*t,4*t+4),r=n.subarray(4*e,4*e+4),o=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),a=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),d=Math.max(r[1],r[3]),p=(a-o)*(l-i),f=(h-u)*(d-c);if(p<=0||f<=0)return 0;const g=Math.max(o,u),m=Math.max(i,c),A=Math.min(a,h),y=Math.min(l,d),x=Math.max(A-g,0)*Math.max(y-m,0);return x/(p+f-x)}function Xk(n,t,e){const s=Math.exp(t*e*e);return e<=n?s:0}function Vy(n,t){return n.score-t.score||n.score===t.score&&t.boxIndex-n.boxIndex}function nf(){return(nf=(0,q.Z)(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY){const o=N(n,"boxes","nonMaxSuppressionAsync"),i=N(t,"scores","nonMaxSuppressionAsync"),a=Qo(o,i,e,s,r);e=a.maxOutputSize,s=a.iouThreshold,r=a.scoreThreshold;const l=yield Promise.all([o.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:h}=Zp(u,c,e,s,r);return o!==n&&o.dispose(),i!==t&&i.dispose(),mn(h,"int32")})).apply(this,arguments)}const eE=$({nonMaxSuppressionWithScore_:function Jk(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=0){const i=N(n,"boxes","nonMaxSuppression"),a=N(t,"scores","nonMaxSuppression"),l=Qo(i,a,e,s,r,o),h=F.runKernel(Zh,{boxes:i,scores:a},{maxOutputSize:e=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:o=l.softNmsSigma});return{selectedIndices:h[0],selectedScores:h[1]}}});function sf(){return(sf=(0,q.Z)(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=0){const i=N(n,"boxes","nonMaxSuppressionAsync"),a=N(t,"scores","nonMaxSuppressionAsync"),l=Qo(i,a,e,s,r,o);e=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,o=l.softNmsSigma;const u=yield Promise.all([i.data(),a.data()]),c=u[0],h=u[1],{selectedIndices:d,selectedScores:p}=Jp(c,h,e,s,r,o);return i!==n&&i.dispose(),a!==t&&a.dispose(),{selectedIndices:mn(d,"int32"),selectedScores:mn(p)}})).apply(this,arguments)}const rE=$({nonMaxSuppressionPadded_:function sE(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=!1){const i=N(n,"boxes","nonMaxSuppression"),a=N(t,"scores","nonMaxSuppression"),l=Qo(i,a,e,s,r,null),f=F.runKernel(Xh,{boxes:i,scores:a},{maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:o});return{selectedIndices:f[0],validOutputs:f[1]}}});function rf(){return(rf=(0,q.Z)(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=!1){const i=N(n,"boxes","nonMaxSuppressionAsync"),a=N(t,"scores","nonMaxSuppressionAsync"),l=Qo(i,a,e,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[d,p]=yield Promise.all([i.data(),a.data()]),{selectedIndices:f,validOutputs:g}=Yp(d,p,u,c,h,o);return i!==n&&i.dispose(),a!==t&&a.dispose(),{selectedIndices:mn(f,"int32"),validOutputs:ke(g,"int32")}})).apply(this,arguments)}const Uy=$({resizeBilinear_:function aE(n,t,e=!1,s=!1){const r=N(n,"images","resizeBilinear");v(3===r.rank||4===r.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`),v(2===t.length,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),v(!1===s||!1===e,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let o=r,i=!1;3===r.rank&&(i=!0,o=M(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,u=F.runKernel(nu,{images:o},{alignCorners:e,halfPixelCenters:s,size:t});return i?M(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),Wy=$({resizeNearestNeighbor_:function lE(n,t,e=!1,s=!1){const r=N(n,"images","resizeNearestNeighbor");v(3===r.rank||4===r.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`),v(2===t.length,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),v("float32"===r.dtype||"int32"===r.dtype,()=>"`images` must have `int32` or `float32` as dtype"),v(!1===s||!1===e,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let o=r,i=!1;3===r.rank&&(i=!0,o=M(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,u=F.runKernel(tu,{images:o},{alignCorners:e,halfPixelCenters:s,size:t});return i?M(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),hE=$({threshold_:function uE(n,t="binary",e=!1,s=.5){const r=N(n,"image","threshold"),l=r.shape[0]*r.shape[1];let c,h,d,p,u=L(mn([s]),255);if(v(3===r.rank,()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`),v(3===r.shape[2]||1===r.shape[2],()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`),v("int32"===r.dtype||"float32"===r.dtype,()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`),v("otsu"===t||"binary"===t,()=>`Method must be binary or otsu, but was ${t}`),3===r.shape[2]){[c,h,d]=Ln(r,[1,1,1],-1);const m=L(c,.2989),A=L(h,.587),y=L(d,.114);p=ne(ne(m,A),y)}else p=n;"otsu"===t&&(u=function cE(n,t){let o,i,a,l,u,c,e=mn([-1]),s=mn([0]),r=mn([0]);for(let h=0;h<n.size-1;h++){o=Ye(n,0,h+1),i=Ye(n,h+1),u=Se(we(o),t),c=Se(we(i),t);const d=we(L(o,qo(0,o.size)));a=Se(d,we(o));const p=Bo(i.shape,o.size),f=ne(qo(0,i.size),p),g=L(i,f);l=Se(we(g),we(i));const m=xe(a,l),A=xe(a,l),y=L(u,c);r=L(L(y,m),A);const x=En(r,s);s=fn(x,r,s),e=fn(x,mn([h]),e)}return e}(XA(he(_p(p),"int32"),St([]),256),l));const f=e?eo(p,u):En(p,u);return he(L(f,255),"int32")}}),pE=$({transform_:function dE(n,t,e="nearest",s="constant",r=0,o){const i=N(n,"image","transform","float32"),a=N(t,"transforms","transform","float32");return v(4===i.rank,()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`),v(2===a.rank&&(a.shape[0]===i.shape[0]||1===a.shape[0])&&8===a.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),v(null==o||2===o.length,()=>`Error in transform: outputShape must be [height, width] or null, but got ${o}.`),F.runKernel(xd,{image:i,transforms:a},{interpolation:e,fillMode:s,fillValue:r,outputShape:o})}}),mE=$({bandPart_:function fE(n,t,e){const s=N(n,"a","bandPart");v(s.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`);const r=s.shape,[o,i]=s.shape.slice(-2);let a,l;"number"==typeof t?(v(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),v(t<=o,()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${o}).`),a=N(t<0?o:t,"numLower","bandPart")):(v("int32"===t.dtype,()=>"bandPart(): numLower's dtype must be an int32."),a=fn(_a(t,0),o,to(t,o))),"number"==typeof e?(v(e%1==0,()=>`bandPart(): numUpper must be an integer, got ${e}.`),v(e<=i,()=>`bandPart(): numUpper (${e}) must not be greater than the number of columns (${i}).`),l=N(e<0?i:e,"numUpper","bandPart")):(v("int32"===e.dtype,()=>"bandPart(): numUpper's dtype must be an int32."),l=fn(_a(e,0),i,to(e,i)));const u=M(qo(0,o,1,"int32"),[-1,1]),c=qo(0,i,1,"int32"),h=xe(u,c),d=$s(eo(h,a),Cr(h,bt(l))),p=qt([o,i],s.dtype);return M(Qn(ls(M(s,[-1,o,i])).map(f=>fn(d,f,p))),r)}}),AE=$({gramSchmidt_:function gE(n){let t;if(Array.isArray(n)){t=!1,v(null!=n&&n.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const r=n[0].shape[0];for(let o=1;o<n.length;++o)v(n[o].shape[0]===r,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${n[o].shape[0]} vs. ${r})`)}else t=!0,n=Ln(n,n.shape[0],0).map(r=>so(r,[0]));v(n.length<=n[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${n.length}) exceeds number of dimensions (${n[0].shape[0]}).`);const e=[],s=n;for(let r=0;r<n.length;++r)e.push(F.tidy(()=>{let o=s[r];if(r>0)for(let i=0;i<r;++i){const a=L(we(L(e[i],o)),e[i]);o=xe(o,a)}return Se(o,Ta(o,"euclidean"))}));return t?Qn(e,0):e}});function Gy(n,t=!1){return F.tidy(()=>{v(2===n.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${n.shape.length}D Tensor.`);const e=n.shape[0],s=n.shape[1];let r=bp(e),o=qs(n);const i=Fa([[1]],[1,1]);let a=qs(i);const l=e>=s?s:e;for(let u=0;u<l;++u){const c=o,h=a,d=r;[a,o,r]=F.tidy(()=>{const p=Ye(o,[u,u],[e-u,1]),f=Ta(p),g=Ye(o,[u,u],[1,1]),m=fn(En(g,0),Fa([[-1]]),Fa([[1]])),A=xe(g,L(m,f)),y=Se(p,A);a=1===y.shape[0]?qs(i):zt([i,Ye(y,[1,0],[y.shape[0]-1,y.shape[1]])],0);const x=bt(Se(qe(m,A),f)),b=Ye(o,[u,0],[e-u,s]),I=L(x,a),S=Je(a);if(0===u)o=xe(b,qe(I,qe(S,b)));else{const D=xe(b,qe(I,qe(S,b)));o=zt([Ye(o,[0,0],[u,s]),D],0)}const k=Je(I),E=Ye(r,[0,u],[e,r.shape[1]-u]);if(0===u)r=xe(E,qe(qe(E,a),k));else{const D=xe(E,qe(qe(E,a),k));r=zt([Ye(r,[0,0],[e,u]),D],1)}return[a,o,r]}),ze([c,h,d])}return!t&&e>s&&(r=Ye(r,[0,0],[e,s]),o=Ye(o,[0,0],[s,s])),[r,o]})}const xE=$({qr_:function yE(n,t=!1){if(v(n.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${n.rank}`),2===n.rank)return Gy(n,t);{const e=n.shape.slice(0,n.shape.length-2).reduce((l,u)=>l*u),s=ls(M(n,[e,n.shape[n.shape.length-2],n.shape[n.shape.length-1]]),0),r=[],o=[];return s.forEach(l=>{const[u,c]=Gy(l,t);r.push(u),o.push(c)}),[M(Qn(r,0),n.shape),M(Qn(o,0),n.shape)]}}});var Pn=function(n){return n[n.NONE=0]="NONE",n[n.MEAN=1]="MEAN",n[n.SUM=2]="SUM",n[n.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS",n}(Pn||{});const Zs=$({computeWeightedLoss_:function bE(n,t,e=Pn.SUM_BY_NONZERO_WEIGHTS){const s=N(n,"losses","computeWeightedLoss");let r=null;null!=t&&(r=N(t,"weights","computeWeightedLoss"));const o=null==r?s:L(s,r);if(e===Pn.NONE)return o;if(e===Pn.SUM)return we(o);if(e===Pn.MEAN){if(null==r)return Rt(o);{const i=s.size/r.size,a=Se(we(o),we(r));return i>1?Se(a,ke(i)):a}}if(e===Pn.SUM_BY_NONZERO_WEIGHTS){if(null==r)return Se(we(o),ke(s.size));{const i=L(r,qn(s.shape)),a=he(we(Ko(i,ke(0))),"float32");return Se(we(o),a)}}throw Error(`Unknown reduction: ${e}`)}}),IE=$({absoluteDifference_:function wE(n,t,e,s=Pn.SUM_BY_NONZERO_WEIGHTS){const r=N(n,"labels","absoluteDifference"),o=N(t,"predictions","absoluteDifference");let i=null;null!=e&&(i=N(e,"weights","absoluteDifference")),$n(r.shape,o.shape,"Error in absoluteDifference: ");const a=Ht(xe(r,o));return Zs(a,i,s)}}),vE=$({cosineDistance_:function CE(n,t,e,s,r=Pn.SUM_BY_NONZERO_WEIGHTS){const o=N(n,"labels","cosineDistance"),i=N(t,"predictions","cosineDistance");let a=null;null!=s&&(a=N(s,"weights","cosineDistance")),$n(o.shape,i.shape,"Error in cosineDistance: ");const l=ke(1),u=xe(l,we(L(o,i),e,!0));return Zs(u,a,r)}}),NE=$({hingeLoss_:function SE(n,t,e,s=Pn.SUM_BY_NONZERO_WEIGHTS){let r=N(n,"labels","hingeLoss");const o=N(t,"predictions","hingeLoss");let i=null;null!=e&&(i=N(e,"weights","hingeLoss")),$n(r.shape,o.shape,"Error in hingeLoss: ");const a=ke(1);r=xe(L(ke(2),r),a);const l=Fs(xe(a,L(r,o)));return Zs(l,i,s)}}),kE=$({huberLoss_:function TE(n,t,e,s=1,r=Pn.SUM_BY_NONZERO_WEIGHTS){const o=N(n,"labels","huberLoss"),i=N(t,"predictions","huberLoss");let a=null;null!=e&&(a=N(e,"weights","huberLoss")),$n(o.shape,i.shape,"Error in huberLoss: ");const l=ke(s),u=Ht(xe(i,o)),c=to(u,l),h=xe(u,c),d=ne(L(ke(.5),dt(c)),L(l,h));return Zs(d,a,r)}}),_E=$({logLoss_:function EE(n,t,e,s=1e-7,r=Pn.SUM_BY_NONZERO_WEIGHTS){const o=N(n,"labels","logLoss"),i=N(t,"predictions","logLoss");let a=null;null!=e&&(a=N(e,"weights","logLoss")),$n(o.shape,i.shape,"Error in logLoss: ");const l=ke(1),u=ke(s),c=bt(L(o,Kn(ne(i,u)))),h=L(xe(l,o),Kn(ne(xe(l,i),u))),d=xe(c,h);return Zs(d,a,r)}}),RE=$({meanSquaredError_:function DE(n,t,e,s=Pn.SUM_BY_NONZERO_WEIGHTS){const r=N(n,"labels","meanSquaredError"),o=N(t,"predictions","meanSquaredError");let i=null;null!=e&&(i=N(e,"weights","meanSquaredError")),$n(r.shape,o.shape,"Error in meanSquaredError: ");const a=Bp(r,o);return Zs(a,i,s)}}),OE=$({sigmoidCrossEntropy_:function FE(n,t,e,s=0,r=Pn.SUM_BY_NONZERO_WEIGHTS){let o=N(n,"multiClassLabels","sigmoidCrossEntropy");const i=N(t,"logits","sigmoidCrossEntropy");let a=null;if(null!=e&&(a=N(e,"weights","sigmoidCrossEntropy")),$n(o.shape,i.shape,"Error in sigmoidCrossEntropy: "),s>0){const u=ke(s),c=ke(1),h=ke(.5);o=ne(L(o,xe(c,u)),L(h,u))}const l=function $E(n,t){const e=N(n,"labels","sigmoidCrossEntropyWithLogits"),s=N(t,"logits","sigmoidCrossEntropyWithLogits");$n(e.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=Fs(s),o=L(s,e),i=Ou(Hn(bt(Ht(s))));return ne(xe(r,o),i)}(o,i);return Zs(l,a,r)}}),ME=$({softmaxCrossEntropy_:function PE(n,t,e,s=0,r=Pn.SUM_BY_NONZERO_WEIGHTS){let o=N(n,"onehotLabels","softmaxCrossEntropy");const i=N(t,"logits","softmaxCrossEntropy");let a=null;if(null!=e&&(a=N(e,"weights","softmaxCrossEntropy")),$n(o.shape,i.shape,"Error in softmaxCrossEntropy: "),s>0){const u=ke(s),c=ke(1),h=ke(o.shape[1]);o=ne(L(o,xe(c,u)),Se(u,h))}const l=function LE(n,t,e=-1){if(-1===e&&(e=t.rank-1),e!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${e}`);return js((r,o,i)=>{const l=Ip(o,[e],!0),u=xe(he(o,"float32"),l);i([r,u]);const c=bt(L(u,r));return{value:we(c,[e]),gradFunc:(p,f)=>{const[g,m]=f,A=Ot(p.shape,[e]);return[L(M(p,A),xe(he(g,"float32"),Hn(m))),L(M(p,A),xe(Hn(m),he(g,"float32")))]}}})(n,t)}(o,i);return Zs(l,a,r)}}),t2={fft:Ku,ifft:$a,rfft:qu,irfft:Mp},n2={hammingWindow:kk,hannWindow:By,frame:zy,stft:Rk},Os={flipLeftRight:Lk,grayscaleToRGB:Mk,resizeNearestNeighbor:Wy,resizeBilinear:Uy,rgbToGrayscale:zk,rotateWithOffset:Uk,cropAndResize:Fk,nonMaxSuppression:Gk,nonMaxSuppressionAsync:function Zk(n,t,e){return nf.apply(this,arguments)},nonMaxSuppressionWithScore:eE,nonMaxSuppressionWithScoreAsync:function tE(n,t,e){return sf.apply(this,arguments)},nonMaxSuppressionPadded:rE,nonMaxSuppressionPaddedAsync:function oE(n,t,e){return rf.apply(this,arguments)},threshold:hE,transform:pE},Hy={bandPart:mE,gramSchmidt:AE,qr:xE},s2={absoluteDifference:IE,computeWeightedLoss:Zs,cosineDistance:vE,hingeLoss:NE,huberLoss:kE,logLoss:_E,meanSquaredError:RE,sigmoidCrossEntropy:OE,softmaxCrossEntropy:ME},r2={sparseFillEmptyRows:$({sparseFillEmptyRows_:function BE(n,t,e,s){const r=N(n,"indices","sparseFillEmptyRows","int32"),o=N(t,"values","sparseFillEmptyRows"),i=N(e,"denseShape","sparseFillEmptyRows","int32"),a=N(s,"defaultValue","sparseFillEmptyRows",o.dtype);if(2!==r.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==o.rank)throw new Error(`Values should be Tensor1D but received shape ${o.shape}`);if(1!==i.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(0!==a.rank)throw new Error(`Default value should be a scalar but received shape ${a.shape}`);const u=F.runKernel(ld,{indices:r,values:o,denseShape:i,defaultValue:a});return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}}),sparseReshape:$({sparseReshape_:function VE(n,t,e){const s=N(n,"inputIndices","sparseReshape","int32"),r=N(t,"inputShape","sparseReshape","int32"),o=N(e,"newShape","sparseReshape","int32");if(2!==s.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==r.rank)throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);if(1!==o.rank)throw new Error(`New shape should be Tensor1D but received shape ${o.shape}`);const a=F.runKernel(ud,{inputIndices:s,inputShape:r,newShape:o});return{outputIndices:a[0],outputShape:a[1]}}}),sparseSegmentMean:$({sparseSegmentMean_:function WE(n,t,e){const s=N(n,"data","sparseSegmentMean"),r=N(t,"indices","sparseSegmentMean","int32"),o=N(e,"segmentIds","sparseSegmentMean","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${r.shape}`);if(1!==o.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${o.shape}`);return F.runKernel(cd,{data:s,indices:r,segmentIds:o})}}),sparseSegmentSum:$({sparseSegmentSum_:function HE(n,t,e){const s=N(n,"data","sparseSegmentSum"),r=N(t,"indices","sparseSegmentSum","int32"),o=N(e,"segmentIds","sparseSegmentSum","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${r.shape}`);if(1!==o.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${o.shape}`);return F.runKernel(hd,{data:s,indices:r,segmentIds:o})}})},o2={stringNGrams:$({stringNGrams_:function qE(n,t,e,s,r,o,i,a){const l=N(n,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=N(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");const d=F.runKernel(md,{data:l,dataSplits:u},{separator:e,nGramWidths:s,leftPad:r,rightPad:o,padWidth:i,preserveShortSequences:a});return{nGrams:d[0],nGramsSplits:d[1]}}}),stringSplit:$({stringSplit_:function QE(n,t,e=!0){const s=N(n,"input","stringSplit","string"),r=N(t,"delimiter","stringSplit","string");if(1!==s.rank)throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);if(0!==r.rank)throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);const a=F.runKernel(gd,{input:s,delimiter:r},{skipEmpty:e});return{indices:a[0],values:a[1],shape:a[2]}}}),stringToHashBucketFast:$({stringToHashBucketFast_:function ZE(n,t){const e=N(n,"input","stringToHashBucketFast","string"),s={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");return F.runKernel(Ad,{input:e},s)}}),staticRegexReplace:$({staticRegexReplace_:function JE(n,t,e,s=!0){const r=N(n,"input","staticRegexReplace","string");return F.runKernel(cu,{x:r},{pattern:t,rewrite:e,replaceGlobal:s})}})},Xo=class i2{static sgd(t){return new Qd(t)}static momentum(t,e,s=!1){return new fA(t,e,s)}static rmsprop(t,e=.9,s=0,r=null,o=!1){return new mA(t,e,s,r,o)}static adam(t=.001,e=.9,s=.999,r=null){return new dA(t,e,s,r)}static adadelta(t=.001,e=.95,s=null){return new cA(t,e,s)}static adamax(t=.002,e=.9,s=.999,r=null,o=0){return new pA(t,e,s,r,o)}static adagrad(t,e=.1){return new hA(t,e)}},a2=typeof requestAnimationFrame<"u"?requestAnimationFrame:typeof setImmediate<"u"?setImmediate:n=>n();function Ky(){return new Promise(n=>a2(()=>n()))}function of(n,t){const e=n[0].length;n.forEach((r,o)=>{v(r.length===e,()=>`Error in concat${e}D: rank of tensors[${o}] must be the same as the rank of the rest (${e})`)}),v(t>=0&&t<e,()=>`Error in concat${e}D: axis must be between 0 and ${e-1}.`);const s=n[0];n.forEach((r,o)=>{for(let i=0;i<e;i++)v(i===t||r[i]===s[i],()=>`Error in concat${e}D: Shape of tensors[${o}] (${r}) does not match the shape of the rest (${s}) along the non-concatenated axis ${o}.`)})}function Ls(n,t){const e=n[0].slice();for(let s=1;s<n.length;s++)e[t]+=n[s][t];return e}var Ps=function(n){return n[n.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",n[n.VALUE_ROWIDS=1]="VALUE_ROWIDS",n[n.ROW_LENGTHS=2]="ROW_LENGTHS",n[n.ROW_SPLITS=3]="ROW_SPLITS",n[n.ROW_LIMITS=4]="ROW_LIMITS",n[n.ROW_STARTS=5]="ROW_STARTS",n}(Ps||{});function qy(n,t,e){let s=new Array;if(null==e&&null==t)return s;if(null==t)for(;s.length<n+e.length;)s.push(-1);else s=t.slice();if(null==e)return s;if(n+e.length!==s.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${n+e.length}, but shape.rank = ${s.length}`);for(let r=1;r<e.length;++r){const o=e[r],i=s[s.length-e.length+r],a=s[i];if(o>=0)if(a>=0){if(a!==o)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${r+n}] = ${o} but shape[${r+n}] = ${a}`)}else s[i]=o}return s}function jy(n){const t={FIRST_DIM_SIZE:Ps.FIRST_DIM_SIZE,VALUE_ROWIDS:Ps.VALUE_ROWIDS,ROW_LENGTHS:Ps.ROW_LENGTHS,ROW_SPLITS:Ps.ROW_SPLITS,ROW_LIMITS:Ps.ROW_LIMITS,ROW_STARTS:Ps.ROW_STARTS},e=[];for(const s of n){if(!(s in t))break;e.push(t[s])}return e}function Qy(n){return 0===n.length?0:n[0]===Ps.FIRST_DIM_SIZE?n.length-1:n.length}function Xy(n,t){if(null==n||null==t)return;const e=n.length,s=t.length;if(e>=s)throw new Error(`defaultValue.shape=${n} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${e} must be less than ragged tensor input flatValues.rank = ${s})`);for(let r=0;r<Math.min(e,s-1);++r){const o=n[r],i=t[r+1];if(o>=0&&i>=0&&1!==o&&o!==i)throw new Error(`defaultValue.shape=${n}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${r-n.length}] = ${o} but ragged tensor input.flatValues.shape[${r-n.length}] = ${i}`)}}const af=30;function Yu(n){return n<=af?n:hh(n,Math.floor(Math.sqrt(n)))}function lf(n,t,e){return[e*("number"==typeof n?n:n[0]),t*("number"==typeof n?n:n[1])]}function Oa(n,t,e,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(n[0]/e),r=r.concat(n.slice(1));else{r=r.concat(n[0]);const o=t.length;for(let i=0;i<o;++i)r=r.concat([n[i+1]/t[i],t[i]]);r=r.concat(n.slice(o+1))}return r}function La(n,t,e=!0){const s=[];if(e){s.push(t);for(let r=t+1;r<n;++r)r<=2*t?(s.push(r),s.push(r-(t+1))):s.push(r)}else{const r=[],o=[];for(let i=1;i<n;++i)i>=2*t+1||i%2==1?o.push(i):r.push(i);s.push(...r),s.push(0),s.push(...o)}return s}function Pa(n,t,e,s=!0){const r=[];r.push(s?n[0]/e:n[0]*e);for(let o=1;o<n.length;++o)r.push(o<=t.length?s?t[o-1]*n[o]:n[o]/t[o-1]:n[o]);return r}function uf(n,t){const e=[0];for(let s=0;s<t;++s)e.push(n[s][0]);return e}function cf(n,t,e){const s=n.slice(0,1);for(let r=0;r<e;++r)s.push(n[r+1]-t[r][0]-t[r][1]);return s}function hf(n,t){const e=n.shape.length,s=t.shape.length;if(e<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>e)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${e}`);if(0===Q(n.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${n.shape}.`);const r=t.shape,o=r[r.length-1];let i=1;for(let h=0;h<r.length-1;++h)i*=r[h];const a=n.shape,l=r.slice();l.pop();let u=1;for(let h=o;h<e;++h)u*=a[h],l.push(a[h]);const c=[...Ne(n.shape).map(h=>h/u),1].slice(0,o);return[l,i,u,c]}const Ju=1.7580993408473768,ec=1.0507009873554805,df=.3275911,pf=.254829592,ff=-.284496736,mf=1.421413741,gf=-1.453152027,Af=1.061405429;function Ys(n,t){if(n.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${n.length}, imag: ${t.length}.`);const e=new Float32Array(2*n.length);for(let s=0;s<e.length;s+=2)e[s]=n[s/2],e[s+1]=t[s/2];return e}function Zy(n){const t=new Float32Array(n.length/2),e=new Float32Array(n.length/2);for(let s=0;s<n.length;s+=2)t[s/2]=n[s],e[s/2]=n[s+1];return{real:t,imag:e}}function Yy(n){const t=Math.ceil(n.length/4),e=new Float32Array(t),s=new Float32Array(t);for(let r=0;r<n.length;r+=4)e[Math.floor(r/4)]=n[r],s[Math.floor(r/4)]=n[r+1];return{real:e,imag:s}}function Jy(n){const t=Math.floor(n.length/4),e=new Float32Array(t),s=new Float32Array(t);for(let r=2;r<n.length;r+=4)e[Math.floor(r/4)]=n[r],s[Math.floor(r/4)]=n[r+1];return{real:e,imag:s}}function yf(n,t){return{real:n[2*t],imag:n[2*t+1]}}function ex(n,t,e,s){n[2*s]=t,n[2*s+1]=e}function tx(n,t){const e=new Float32Array(n/2),s=new Float32Array(n/2);for(let r=0;r<Math.ceil(n/2);r++){const o=(t?2:-2)*Math.PI*(r/n);e[r]=Math.cos(o),s[r]=Math.sin(o)}return{real:e,imag:s}}function nx(n,t,e){const s=(e?2:-2)*Math.PI*(n/t);return{real:Math.cos(s),imag:Math.sin(s)}}const xf="->",l2=/->/g,sx=",",rx="...";function bf(n,t){const e=((n=n.replace(/\s/g,"")).length-n.replace(l2,"").length)/xf.length;if(e<1)throw new Error("Equations without an arrow are not supported.");if(e>1)throw new Error(`Equation must contain exactly one arrow ("${xf}").`);const[s,r]=n.split(xf);v(-1===s.indexOf(rx),()=>`The ellipsis notation ("${rx}") is not supported yet.`);const o=s.split(sx),i=o.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const a=[];for(let d=0;d<r.length;++d){const p=r[d];if(!o.some(f=>-1!==f.indexOf(p)))throw new Error(`Output subscripts contain the label ${p} not present in the input subscripts.`);-1===a.indexOf(p)&&a.push(p)}for(let d=0;d<s.length;++d){const p=s[d];-1===a.indexOf(p)&&p!==sx&&a.push(p)}const l=new Array(o.length);for(let d=0;d<i;++d){if(new Set(o[d].split("")).size!==o[d].length)throw new Error(`Found duplicate axes in input component ${o[d]}. Support for duplicate axes in input is not implemented yet.`);l[d]=[];for(let p=0;p<o[d].length;++p)l[d].push(a.indexOf(o[d][p]))}const u=a.length,h=[];for(let d=r.length;d<u;++d)h.push(d);return{allDims:a,summedDims:h,idDims:l}}function wf(n,t){let e=new Array(n);e.fill(-1);for(let r=0;r<t.length;++r)e[t[r]]=r;const s=[];for(let r=0;r<n;++r)-1===e[r]&&s.push(r);return e=e.filter(r=>-1!==r),{permutationIndices:e,expandDims:s}}function If(n,t,e){const s=new Array(n);for(let r=0;r<e.length;++r){const o=e[r].shape;for(let i=0;i<t[r].length;++i)void 0===s[t[r][i]]?s[t[r][i]]=o[i]:v(s[t[r][i]]===o[i],()=>`Expected dimension ${s[t[r][i]]} at axis ${i} of input shaped ${JSON.stringify(o)}, but got dimension ${o[i]}`)}}function Cf(n,t){const e=n,s=[];let r=0;0===n.length&&e.push(-1),r=n.length+1;for(let i=0;i<r;++i)s.push([]);const o=[];for(let i=0;i<e.length;++i){const l=u2(t,e[i]);for(const u of l)-1===o.indexOf(u)&&(s[i].push(u),o.push(u))}return{path:e,steps:s}}function vf(n){return n.every((t,e)=>t===e)}function u2(n,t){const e=[];for(let s=0;s<n.length;++s)(0===n[s].length||-1!==n[s].indexOf(t)||-1===t)&&e.push(s);return e}function Sf(n,t,e=0){let s=[];if("number"==typeof t)v(n.shape[e]%t==0,()=>"Number of splits must evenly divide the axis."),s=new Array(t).fill(n.shape[e]/t);else{v(t.reduce((i,a)=>(-1===a&&(i+=1),i),0)<=1,()=>"There should be only one negative value in split array.");const o=t.indexOf(-1);if(-1!==o){const i=t.reduce((a,l)=>l>0?a+l:a);t[o]=n.shape[e]-i}v(n.shape[e]===t.reduce((i,a)=>i+a),()=>"The sum of sizes must match the size of the axis dimension."),s=t}return s}function ox(n){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${n}`}function ix(n,t){return`indices(${n}, 0) is invalid: ${t} < 0`}function ax(n,t,e){return`indices(${n}, 0) is invalid: ${t} >= ${e}`}function lx(n,t){return`only one output dimension may be -1, not both ${n} and ${t}`}function ux(n,t){return`size ${n} must be non-negative, not ${t}`}function cx(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function hx(n,t){return`Input to reshape is a SparseTensor with ${Q(n)}\n  dense values, but the requested shape requires a multiple of ${Q(t)}. inputShape=${n} outputShape= ${t}`}function dx(n,t){return`Input to reshape is a tensor with ${Q(n)} dense values, but the requested shape has ${Q(t)}. inputShape=${n} outputShape=${t}`}function Nf(){return"segment ids must be >= 0"}function px(){return"segment ids are not increasing"}function fx(n,t){return`Segment id ${n} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function mx(n,t,e){return`Bad: indices[${n}] == ${t} out of range [0, ${e})`}function gx(n,t){let s,e=!1;for(n<=af?(s=n,e=!0):s=hh(n,Math.floor(Math.sqrt(n)));!e;)s>t||s===n?e=!0:s=hh(n,s+1);return s}function Ax(n,t,e){const s=[],r=n.length;for(let o=0;o<r;o++)s.push(o!==t?n[o]:e);return s}function Tf(n,t,e,s){const r=t.shape.length,o=n.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>o)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${o}).`);if(e<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${e}).`);for(let h=0;h<s;++h)if(n.shape[h]!==t.shape[h])throw new Error(`x.shape[${h}]: ${n.shape[h]} should be equal to indices.shape[${h}]: ${t.shape[h]}.`);const i=n.shape[e],a=[];let l=1,u=1,c=1;for(let h=0;h<s;++h)a.push(n.shape[h]),l*=n.shape[h];for(let h=s;h<e;h++)a.push(n.shape[h]),u*=n.shape[h];for(let h=s;h<r;h++)a.push(t.shape[h]);for(let h=e+1;h<o;h++)a.push(n.shape[h]),c*=n.shape[h];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:a}}function Js(n){try{return n.map(t=>dr(t))}catch(t){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`)}}function yx(n){return n.map(t=>hr(t))}!function Lv(){for(const n of Ov)se(n)}();const xx={kernelName:hl,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>L(n,jo(he(e,"float32"),-1))}}},c2={kernelName:bi,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=dt(he(e,"float32")),r=pn(xe(ke(1),s));return bt(Se(n,r))}}}},h2={kernelName:wi,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=pn(xe(dt(he(e,"float32")),1));return Se(n,s)}}}},d2={kernelName:_o,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Le(e.shape,s.shape);return{a:()=>{let a=n;const l=Kt(e.shape,r);return l.length>0&&(a=we(a,l)),M(a,e.shape)},b:()=>{let a=n;const l=Kt(s.shape,r);return l.length>0&&(a=we(a,l)),M(a,s.shape)}}}},p2={kernelName:dl,saveAllInputs:!0,gradFunc:(n,t)=>{const e={};return t.forEach((s,r)=>{e[r]=()=>n.clone()}),e}},f2={kernelName:pl,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ze(e)}}},m2={kernelName:fl,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ze(e)}}},g2={kernelName:Ii,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Se(n,pn(xe(ke(1),dt(he(e,"float32")))))}}},A2={kernelName:Ci,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=pn(ne(ke(1),dt(he(e,"float32"))));return Se(n,s)}}}},y2={kernelName:Ni,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Le(e.shape,s.shape);return{a:()=>{const a=ne(dt(e),dt(s));let l=L(n,Se(s,a));const u=Kt(e.shape,r);return u.length>0&&(l=we(l,u)),M(l,e.shape)},b:()=>{const a=ne(dt(e),dt(s));let l=bt(L(n,Se(e,a)));const u=Kt(s.shape,r);return u.length>0&&(l=we(l,u)),M(l,s.shape)}}}},x2={kernelName:vi,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Se(n,ne(dt(he(e,"float32")),1))}}},b2={kernelName:Si,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Se(n,xe(ke(1),dt(he(e,"float32"))))}}},I2=$({avgPool3dGrad_:function w2(n,t,e,s,r,o){const i=N(n,"dy","avgPool3dGrad"),a=N(t,"input","avgPool3dGrad");let l=i,u=a,c=!1;4===a.rank&&(c=!0,l=M(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),u=M(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),v(5===l.rank,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`),v(5===u.rank,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`),In("avgPool3dGrad",r,o);const p=F.runKernel(yh,{dy:l,input:u},{filterSize:e,strides:s,pad:r,dimRoundingMode:o});return c?M(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),C2={kernelName:gl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{filterSize:r,strides:o,pad:i,dimRoundingMode:a}=e;return{x:()=>I2(n,s,r,o,i,a)}}},S2=$({avgPoolGrad_:function v2(n,t,e,s,r){const o=N(n,"dy","avgPoolGrad"),i=N(t,"input","avgPoolGrad");v(i.rank===o.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${o.rank})`);let a=i,l=o,u=!1;3===i.rank&&(u=!0,a=M(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=M(o,[1,o.shape[0],o.shape[1],o.shape[2]])),v(4===l.rank,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),v(4===a.rank,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${a.rank}.`);const d=F.runKernel(Ah,{dy:l,input:a},{filterSize:e,strides:s,pad:r});return u?M(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),N2={kernelName:ml,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{filterSize:r,strides:o,pad:i}=e;return{x:()=>S2(n,s,r,o,i)}}},T2={kernelName:Al,inputsToSave:["a","b"],gradFunc:(n,t,e)=>{const[s,r]=t,{transposeA:o,transposeB:i}=e;return o||i?!o&&i?{a:()=>qe(n,r,!1,!1),b:()=>qe(n,s,!0,!1)}:o&&!i?{a:()=>qe(r,n,!1,!0),b:()=>qe(s,n,!1,!1)}:{a:()=>qe(r,n,!0,!0),b:()=>qe(n,s,!0,!0)}:{a:()=>qe(n,r,!1,!0),b:()=>qe(s,n,!0,!1)}}},k2={kernelName:yl,gradFunc:(n,t,e)=>{const{blockShape:s,crops:r}=e;return{x:()=>zu(n,s,r)}}},E2={kernelName:"BroadcastTo",gradFunc:(n,t,e)=>{const r=e.inputShape,o=e.shape,i=Array.from(o);for(let l=r.length-1;l>=0;l--)if(r[l]===o[l])i[l]=1;else if(1!==r[l])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${o}].`);const a=[];for(let l=0;l<i.length;l++)i[l]>1&&a.push(l);return{x:()=>we(n,a,!0)}}},_2={kernelName:Ti,gradFunc:n=>({x:()=>n.clone()})},D2={kernelName:ki,gradFunc:n=>({x:()=>Ze(n)})},R2={kernelName:Ei,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{clipValueMin:r,clipValueMax:o}=e;return{x:()=>fn($s(Cr(s,r),eo(s,o)),n,Ze(n))}}},$2={kernelName:bl,inputsToSave:["x"],gradFunc:xx.gradFunc},F2={kernelName:wl,saveAllInputs:!0,gradFunc:(n,t,e)=>{const s=t.map(l=>l.shape),{axis:r}=e,o=Ge(r,t[0].shape)[0],i=s.map(l=>l[o]);return Ln(n,i,o).map(l=>()=>l)}},O2={kernelName:Il,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,{dilations:o,strides:i,pad:a,dataFormat:l}=e;return v(br(o),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`),{x:()=>fp(s.shape,n,r,i,a,l),filter:()=>Qp(s,n,r.shape,i,a,l)}}},L2={kernelName:Cl,inputsToSave:["dy","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,{strides:o,pad:i,dataFormat:a,dimRoundingMode:l}=e;return{dy:()=>wr(n,r,o,i,a,1,l),filter:()=>Qp(n,s,r.shape,o,i,a,l)}}},M2=$({conv3DBackpropFilter_:function P2(n,t,e,s,r){let o=n;4===n.rank&&(o=M(n,[1,n.shape[0],n.shape[1],n.shape[2],n.shape[3]]));let i=t;return 4===i.rank&&(i=M(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),v(5===o.rank,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${o.shape}.`),v(5===i.rank,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`),v(5===e.length,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${e}.`),v(o.shape[4]===e[3],()=>`Error in conv3dDerFilter: depth of input ${o.shape[4]}) must match input depth in filter (${e[3]}.`),v(i.shape[4]===e[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${e[4]}).`),F.runKernel(Ch,{x:o,dy:i},{strides:s,pad:r,filterShape:e})}}),B2={kernelName:vl,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const{dilations:s,strides:r,pad:o}=e;v(br(s),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);const[i,a]=t;return{x:()=>sy(i.shape,n,a,r,o),filter:()=>M2(i,n,a.shape,r,o)}}},z2={kernelName:_i,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>L(bt(Op(he(e,"float32"))),n)}}},V2={kernelName:Di,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>L(Lp(he(e,"float32")),n)}}},U2={kernelName:Sl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r,exclusive:o,reverse:i}=e;return{x:()=>{const a=Tt([r],s.rank);let l=Ap(n,r,o,!i);return null!=a&&(l=Je(l,a)),l}}}},W2={kernelName:Nl,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const{dilations:s,strides:r,pad:o,dimRoundingMode:i}=e,a=null==s?[1,1]:s;v(br(a),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);const[l,u]=t;return v(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),v(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),v(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),v(an(r,a),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${a}'.`),In("depthwiseConv2d",o,i),{x:()=>My(l.shape,n,u,r,o,a,i),filter:()=>Py(l,n,u.shape,r,o,a,i)}}},G2={kernelName:Tl,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,o={x:s,filter:r,dy:n},i={x:s,filter:r,dy:n};return{x:()=>F.runKernel(Rh,o,e),filter:()=>F.runKernel($h,i,e)}}},H2={kernelName:$i,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t,s={dy:n,y:e};return{x:()=>F.runKernel(Lh,s)}}},K2={kernelName:Fi,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t,s=L(Hn(bt(dt(e))),2/Math.sqrt(Math.PI));return{x:()=>L(n,s)}}},q2={kernelName:Oi,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>L(n,e)}}},j2={kernelName:El,inputsToSave:["input"],gradFunc:(n,t)=>{const[e]=t;return{input:()=>M(n,e.shape)}}},Q2={kernelName:Li,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>L(n,Hn(e))}}},X2={kernelName:Pi,gradFunc:n=>({x:()=>Ze(n)})},Z2={kernelName:Mi,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Le(e.shape,s.shape);return{a:()=>{const a=Se(n,he(s,"float32")),l=Kt(e.shape,r);return l.length>0?M(we(a,l),e.shape):a},b:()=>{let a=L(n,he(e,"float32"));const l=Kt(s.shape,r);l.length>0&&(a=M(we(a,l),s.shape));const u=dt(s);return bt(Se(a,he(u,"float32")))}}}},Y2={kernelName:_l,inputsToSave:["x","mean","variance","scale"],gradFunc:(n,t,e)=>{const{varianceEpsilon:s}=e,[r,o,i,a]=t,l=null==a?ke(1):a,u=Kt(o.shape,r.shape),c=[];if(1===o.rank){for(let b=0;b<r.shape.length-1;++b)c.push(r.shape[b]);c.push(1)}const h=xe(r,o),d=L(n,l),p=Dp(ne(i,ke(s))),f=L(L(L(p,p),p),ke(-.5));return{x:()=>M(L(L(n,1===o.rank?is(M(p,[1,1,1,o.shape[0]]),c):p),l),r.shape),mean:()=>{let b=L(L(p,ke(-1)),d);return 1===o.rank&&(b=we(b,u)),M(b,o.shape)},variance:()=>{let b=L(L(f,h),d);return 1===o.rank&&(b=we(b,u)),M(b,o.shape)},scale:()=>{const b=L(h,p);let I=L(n,b);return 1===o.rank&&(I=we(I,u)),M(I,o.shape)},offset:()=>{let b=n;return 1===o.rank&&(b=we(b,u)),M(b,o.shape)}}}},J2={kernelName:Dl,inputsToSave:["x","indices"],gradFunc:(n,t,e)=>{const[s,r]=t,{axis:o}=e,i=Ge(o,s.shape)[0];return{x:()=>{const l=s.shape,u=r.size,c=l.slice(0,i),h=c.length,d=l.slice(o,l.length).slice(1),p=d.length,f=bx(0,h),g=bx(h+1,h+1+p),m=wx([c,[u],d]),A=M(n,m),y=M(r,[u]),x=wx([[h],f,g]),b=Je(A,x);let I=Up(b,y,s.shape[i]);const S=Ir(x);return I=Je(I,S),I},indices:()=>r}}};function bx(n,t){const e=[];for(let s=n;s<t;++s)e.push(s);return e}function wx(n){const t=[];for(let e=0;e<n.length;++e)for(let s=0;s<n[e].length;++s)t.push(n[e][s]);return t}const e_={kernelName:Bi,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>Ze(e),b:()=>Ze(s)}}},t_={kernelName:zi,gradFunc:n=>({x:()=>he(n,"float32")})},n_={kernelName:Vi,gradFunc:n=>({x:()=>Ze(n)})},s_={kernelName:Ui,gradFunc:n=>({x:()=>Ze(n)})},r_={kernelName:Wi,gradFunc:n=>({x:()=>Ze(n)})},o_={kernelName:$l,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{alpha:r}=e,o=En(s,0);return{x:()=>fn(o,n,L(n,r))}}},i_={kernelName:Hi,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Se(n,ne(e,1))}}},a_={kernelName:Gi,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Se(n,he(e,"float32"))}}},l_={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e;return{logits:()=>{const i=Hn(s);return xe(n,L(we(n,r,!0),i))}}}},c_=$({localResponseNormalizationBackprop_:function u_(n,t,e,s=5,r=1,o=1,i=.5){return F.runKernel(Gh,{x:n,y:t,dy:e},{depthRadius:s,bias:r,alpha:o,beta:i})}}),h_={kernelName:Bl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{depthRadius:o,bias:i,alpha:a,beta:l}=e;return{x:()=>c_(s,r,n,o,i,a,l)}}};function Ix(n,t,e,s){return t.rank<e.rank&&(t=M(t,Ot(t.shape,s))),n.rank<e.rank&&(n=M(n,Ot(n.shape,s))),{x:()=>L(n,he(xs(e,t),n.dtype))}}const Cx={kernelName:zl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const s=e,{reductionIndices:r}=s,o=t[0],l=Ix(n,t[1],o,Ge(r,o.shape));return{x:()=>l.x()}}},d_={kernelName:Ki,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>L(n,he(Cr(e,s),"float32")),b:()=>L(n,he(_a(e,s),"float32"))}}},f_=$({maxPool3dGrad_:function p_(n,t,e,s,r,o,i){const a=N(n,"dy","maxPool3dGrad"),l=N(t,"input","maxPool3dGrad"),u=N(e,"output","maxPool3dGrad");let c=a,h=l,d=u,p=!1;4===l.rank&&(p=!0,c=M(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]]),h=M(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=M(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),v(5===c.rank,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`),v(5===h.rank,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`),v(5===d.rank,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`),In("maxPool3dGrad",o,i);const m=F.runKernel(Kh,{dy:c,input:h,output:d},{filterSize:s,strides:r,pad:o,dimRoundingMode:i});return p?M(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}}),m_={kernelName:Ul,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{filterSize:o,strides:i,pad:a,dimRoundingMode:l}=e;return{x:()=>f_(n,s,r,o,i,a,l)}}},A_=$({maxPoolGrad_:function g_(n,t,e,s,r,o,i){const a=N(n,"dy","maxPoolGrad"),l=N(t,"input","maxPoolGrad"),u=N(e,"output","maxPoolGrad");return v(l.rank===a.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${a.rank})`),v(4===a.rank,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${a.rank}.`),v(4===l.rank,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`),In("maxPoolGrad",o,i),F.runKernel(Hh,{dy:a,input:l,output:u},{filterSize:s,strides:r,pad:o,dimRoundingMode:i})}}),vx={kernelName:Zl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const s=t[0],{paddings:r}=e,o=r.map(i=>i[0]);return{x:()=>Ye(n,o,s.shape)}}};const Sx={kernelName:au,gradFunc:(n,t,e)=>{const{blockShape:s,paddings:r}=e;return{x:()=>_u(n,s,r)}}},Nx={kernelName:lu,gradFunc:(n,t,e)=>{const{axis:s}=e;return{x:()=>zt(n,s)}}},pD=[xx,c2,h2,d2,p2,f2,m2,g2,A2,y2,x2,b2,C2,N2,T2,k2,E2,_2,D2,R2,$2,F2,L2,O2,B2,z2,V2,U2,W2,G2,{kernelName:Ri,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Le(e.shape,s.shape);return{a:()=>{const a=Se(n,he(s,"float32")),l=Kt(e.shape,r);return l.length>0?M(we(a,l),e.shape):a},b:()=>{let a=L(n,he(e,"float32"));const l=Kt(s.shape,r);l.length>0&&(a=M(we(a,l),s.shape));const u=dt(s);return bt(Se(a,he(u,"float32")))}}}},H2,K2,q2,j2,Q2,Z2,X2,Y2,J2,e_,t_,n_,s_,r_,o_,i_,a_,l_,h_,Cx,Cx,d_,m_,{kernelName:Vl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{filterSize:o,strides:i,pad:a}=e;return{x:()=>A_(n,s,r,o,i,a)}}},{kernelName:Wl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e,o=Ge(r,s.shape),l=Q(nn(s.shape,o)[1]);return{x:()=>{const c=s.shape.slice();o.forEach(p=>{c[p]=1});const h=M(n,c);return Se(L(h,qn(s.shape,"float32")),l)}}}},{kernelName:Gl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const s=e,{axis:r}=s,[o,i]=t,l=Ix(n,i,o,Ge(r,o.shape));return{x:()=>l.x()}}},{kernelName:qi,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>L(n,he(eo(e,s),"float32")),b:()=>L(n,he(En(e,s),"float32"))}}},{kernelName:Hl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const s=t[0],{paddings:r}=e,o=r.map(i=>i[0]);return{x:()=>Ye(n,o,s.shape)}}},{kernelName:ji,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Le(e.shape,s.shape);return{a:()=>{const a=Kt(e.shape,r);return a.length>0?M(we(n,a),e.shape):n},b:()=>{const a=L(n,bt(ka(Se(e,s)))),l=Kt(s.shape,r);return l.length>0?M(we(a,l),s.shape):a}}}},{kernelName:Qi,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Le(e.shape,s.shape);return{a:()=>{const a=L(n,he(s,"float32")),l=Kt(e.shape,r);return l.length>0?M(we(a,l),e.shape):a},b:()=>{const a=L(n,he(e,"float32")),l=Kt(s.shape,r);return l.length>0?M(we(a,l),s.shape):a}}}},{kernelName:Kl,gradFunc:n=>({x:()=>bt(n)})},{kernelName:Ql,inputsToSave:["indices"],gradFunc:(n,t)=>{const e=t[0];return{indices:()=>qt(e.shape,"float32")}}},{kernelName:jl,gradFunc:n=>({x:()=>Ze(n)})},{kernelName:Xl,saveAllInputs:!0,gradFunc:(n,t,e)=>{const{axis:s}=e;return ls(n,s).map(o=>()=>o)}},vx,vx,{kernelName:Xi,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(n,t)=>{const[e,s,r]=t,o=e,i=s,a=Le(o.shape,i.shape);return{a:()=>{const c=he(i,"float32");let h=L(n,L(c,yr(o,xe(c,ke(1)))));const d=Kt(o.shape,a);return d.length>0&&(h=we(h,d)),M(h,o.shape)},b:()=>{const c=En(o,0),h=fn(c,Kn(o),Ze(o));let d=L(n,L(r,h));const p=Kt(i.shape,a);return p.length>0&&(d=we(d,p)),M(d,i.shape)}}}},{kernelName:Yl,inputsToSave:["x","alpha"],gradFunc:(n,t)=>{const[e,s]=t,r=En(e,0);return{x:()=>fn(r,n,L(n,s)),alpha:()=>{let o=fn(r,Ze(n),L(n,e));const i=Kt(s.shape,n.shape);return i.length>0&&(o=we(o,i)),M(o,s.shape)}}}},{kernelName:Jl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e;let o=[];return o=null==r?s.shape.map((i,a)=>a):"number"==typeof r?[r]:r,{x:()=>function R_(n,t,e){const s=n.shape.length,r=s-e.length,o=Tt(e,s);let i=n;null!=o&&(i=Je(n,o));const a=i.shape.slice(),u=a.splice(s-e.length,e.length).reduce((d,p)=>d*p,1);a.push(u);let h=function D_(n,t,e){const s=n.shape.slice();s[e]=1;const r=M(t,s),o=Ru(n,e,!0,!1),i=Ru(n,e,!0,!0),a=L(o,i);return L(r,a)}(i.reshape(a),t,r);if(h=h.reshape(i.shape),null!=o){const d=Ir(o);h=Je(h,d)}return h}(s,n,o)}}},{kernelName:Zi,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Se(n,bt(dt(e)))}}},{kernelName:Ji,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t,s=L(eo(e,6),jo(e));return{x:()=>L(n,he(s,"float32"))}}},{kernelName:Yi,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>L(n,he(jo(e),"float32"))}}},{kernelName:eu,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>M(n,e.shape)}}},{kernelName:nu,inputsToSave:["images"],gradFunc:(n,t,e)=>{const[s]=t,r={dy:n,images:s};return{images:()=>F.runKernel(rd,r,e)}}},{kernelName:tu,inputsToSave:["images"],gradFunc:(n,t,e)=>{const[s]=t,r={dy:n,images:s};return{images:()=>F.runKernel(sd,r,e)}}},{kernelName:su,gradFunc:(n,t,e)=>{const{dims:s}=e,r=Ge(s,n.shape);return{x:()=>as(n,r)}}},{kernelName:ea,gradFunc:n=>({x:()=>Ze(n)})},{kernelName:ta,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>bt(Se(n,L(yr(e,1.5),2)))}}},{kernelName:ru,inputsToSave:["condition"],gradFunc:(n,t)=>{const[e]=t;return{condition:()=>he(Ze(e),"float32"),t:()=>L(n,he(e,n.dtype)),e:()=>L(n,he(Lu(e),n.dtype))}}},{kernelName:na,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=En(e,ke(0)),r=ke(Ju),o=ke(ec),i=L(n,o),a=L(L(n,r),Hn(he(e,"float32")));return fn(s,i,a)}}}},{kernelName:ia,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>L(n,L(e,xe(ke(1),e)))}}},{kernelName:oa,gradFunc:n=>({x:()=>Ze(n)})},{kernelName:sa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>L(Du(he(e,"float32")),n)}}},{kernelName:ra,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>L(gp(he(e,"float32")),n)}}},{kernelName:ou,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{begin:r,size:o}=e,i=s.shape,[a,l]=Tu(s,r,o),u=[];for(let c=0;c<n.rank;c++)u.push([a[c],i[c]-a[c]-l[c]]);return{x:()=>vr(n,u)}}},{kernelName:uu,outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s]=t,{dim:r}=e,i=L(n,s);return{logits:()=>xe(i,L(we(i,[r],!0),s))}}},{kernelName:aa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>L(n,Rs(e))}}},Sx,Sx,Nx,Nx,{kernelName:la,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Se(n,L(pn(he(e,"float32")),2))}}},{kernelName:ua,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=ke(2);return{a:()=>L(n,L(r,xe(e,s))),b:()=>L(n,L(r,xe(s,e)))}}},{kernelName:pd,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>L(n,L(he(e,"float32"),2))}}},{kernelName:fa,gradFunc:n=>({x:()=>Ze(n)})},{kernelName:ca,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Le(e.shape,s.shape);return{a:()=>{let a=n;const l=Kt(e.shape,r);return l.length>0&&(a=we(a,l)),M(a,e.shape)},b:()=>{let a=n;const l=Kt(s.shape,r);return l.length>0&&(a=we(a,l)),M(bt(a),s.shape)}}}},{kernelName:iu,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,r=s.shape.slice(),{axis:o}=e;Ge(o,s.shape).forEach(u=>{r[u]=1});const a=M(n,r),l=L(a,qn(s.shape,"float32"));return{x:()=>l}}},{kernelName:ha,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Se(n,dt(Du(e)))}}},{kernelName:da,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>L(xe(ke(1),dt(e)),n)}}},{kernelName:pa,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{reps:r}=e;return{x:()=>{let i=Ze(s);if(1===s.rank)for(let a=0;a<r[0];++a)i=ne(i,Ye(n,[a*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let a=0;a<r[0];++a)for(let l=0;l<r[1];++l)i=ne(i,Ye(n,[a*s.shape[0],l*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let a=0;a<r[0];++a)for(let l=0;l<r[1];++l)for(let u=0;u<r[2];++u)i=ne(i,Ye(n,[a*s.shape[0],l*s.shape[1],u*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let a=0;a<r[0];++a)for(let l=0;l<r[1];++l)for(let u=0;u<r[2];++u)for(let c=0;c<r[3];++c)i=ne(i,Ye(n,[a*s.shape[0],l*s.shape[1],u*s.shape[2],c*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return i}}}},{kernelName:Do,gradFunc:(n,t,e)=>{const s=e,{perm:r}=s,o=Ir(r);return{x:()=>Je(n,o)}}},{kernelName:hu,gradFunc:(n,t,e)=>{const s=e,{axis:r}=s;return{value:()=>Qn(n,r)}}},{kernelName:du,inputsToSave:["segmentIds"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>function hD(n,t){const e=ys(t,Ze(t)),s=Ea(n,e);let r=Cr(t,ke(0,"int32"));const o=s.rank-r.rank;for(let a=0;a<o;++a)r=Cn(r,a+1);r=$s(r,qn(s.shape,"bool"));const i=Ze(s);return fn(r,s,i)}(n,e)}}},{kernelName:pu,gradFunc:n=>({x:()=>Ze(n)})}];for(const n of pD)AC(n);X().prototype.abs=function(){return this.throwIfDisposed(),Ht(this)},X().prototype.acos=function(){return this.throwIfDisposed(),MA(this)},X().prototype.acosh=function(){return this.throwIfDisposed(),BA(this)},X().prototype.add=function(n){return this.throwIfDisposed(),ne(this,n)},X().prototype.all=function(n,t){return this.throwIfDisposed(),cp(this,n,t)},X().prototype.any=function(n,t){return this.throwIfDisposed(),ku(this,n,t)},X().prototype.argMax=function(n){return this.throwIfDisposed(),Yr(this,n)},X().prototype.argMin=function(n){return this.throwIfDisposed(),zA(this,n)},X().prototype.asScalar=function(){return this.throwIfDisposed(),v(1===this.size,()=>"The array must have only 1 element."),M(this,[])},X().prototype.asType=function(n){return this.throwIfDisposed(),he(this,n)},X().prototype.as1D=function(){return this.throwIfDisposed(),M(this,[this.size])},X().prototype.as2D=function(n,t){return this.throwIfDisposed(),M(this,[n,t])},X().prototype.as3D=function(n,t,e){return this.throwIfDisposed(),M(this,[n,t,e])},X().prototype.as4D=function(n,t,e,s){return this.throwIfDisposed(),M(this,[n,t,e,s])},X().prototype.as5D=function(n,t,e,s,r){return this.throwIfDisposed(),M(this,[n,t,e,s,r])},X().prototype.asin=function(){return this.throwIfDisposed(),VA(this)},X().prototype.asinh=function(){return this.throwIfDisposed(),UA(this)},X().prototype.atan=function(){return this.throwIfDisposed(),WA(this)},X().prototype.atan2=function(n){return this.throwIfDisposed(),GA(this,n)},X().prototype.atanh=function(){return this.throwIfDisposed(),HA(this)},X().prototype.avgPool=function(n,t,e,s){return this.throwIfDisposed(),Eu(this,n,t,e,s)},X().prototype.batchToSpaceND=function(n,t){return this.throwIfDisposed(),_u(this,n,t)},X().prototype.batchNorm=function(n,t,e,s,r){return this.throwIfDisposed(),Ca(this,n,t,e,s,r)},X().prototype.broadcastTo=function(n){return this.throwIfDisposed(),Wo(this,n)},X().prototype.cast=function(n){return this.throwIfDisposed(),he(this,n)},X().prototype.ceil=function(){return this.throwIfDisposed(),ZA(this)},X().prototype.clipByValue=function(n,t){return this.throwIfDisposed(),On(this,n,t)},X().prototype.concat=function(n,t){return this.throwIfDisposed(),n instanceof mt&&(n=[n]),zt([this,...n],t)},X().prototype.conv1d=function(n,t,e,s,r,o){return this.throwIfDisposed(),pp(this,n,t,e,s,r,o)},X().prototype.conv2dTranspose=function(n,t,e,s,r){return this.throwIfDisposed(),mp(this,n,t,e,s,r)},X().prototype.conv2d=function(n,t,e,s,r,o){return this.throwIfDisposed(),wr(this,n,t,e,s,r,o)},X().prototype.cos=function(){return this.throwIfDisposed(),Du(this)},X().prototype.cosh=function(){return this.throwIfDisposed(),gp(this)},X().prototype.cumprod=function(n,t,e){return this.throwIfDisposed(),Ru(this,n,t,e)},X().prototype.cumsum=function(n,t,e){return this.throwIfDisposed(),Ap(this,n,t,e)},X().prototype.depthToSpace=function(n,t){return this.throwIfDisposed(),oy(this,n,t)},X().prototype.depthwiseConv2d=function(n,t,e,s,r,o){return this.throwIfDisposed(),va(this,n,t,e,s,r,o)},X().prototype.dilation2d=function(n,t,e,s,r){return this.throwIfDisposed(),iy(this,n,t,e,s,r)},X().prototype.divNoNan=function(n){return this.throwIfDisposed(),ay(this,n)},X().prototype.div=function(n){return this.throwIfDisposed(),Se(this,n)},X().prototype.dot=function(n){return this.throwIfDisposed(),ly(this,n)},X().prototype.elu=function(){return this.throwIfDisposed(),Sa(this)},X().prototype.equal=function(n){return this.throwIfDisposed(),xs(this,n)},X().prototype.erf=function(){return this.throwIfDisposed(),uy(this)},X().prototype.euclideanNorm=function(n,t){return this.throwIfDisposed(),dy(this,n,t)},X().prototype.exp=function(){return this.throwIfDisposed(),Hn(this)},X().prototype.expandDims=function(n){return this.throwIfDisposed(),Cn(this,n)},X().prototype.expm1=function(){return this.throwIfDisposed(),py(this)},X().prototype.fft=function(){return this.throwIfDisposed(),Ku(this)},X().prototype.flatten=function(){return this.throwIfDisposed(),M(this,[this.size])},X().prototype.floor=function(){return this.throwIfDisposed(),ka(this)},X().prototype.floorDiv=function(n){return this.throwIfDisposed(),qd(this,n)},X().prototype.gather=function(n,t,e){return this.throwIfDisposed(),Ea(this,n,t,e)},X().prototype.greaterEqual=function(n){return this.throwIfDisposed(),Cr(this,n)},X().prototype.greater=function(n){return this.throwIfDisposed(),En(this,n)},X().prototype.ifft=function(){return this.throwIfDisposed(),$a(this)},X().prototype.irfft=function(){return this.throwIfDisposed(),Mp(this)},X().prototype.isFinite=function(){return this.throwIfDisposed(),fy(this)},X().prototype.isInf=function(){return this.throwIfDisposed(),my(this)},X().prototype.isNaN=function(){return this.throwIfDisposed(),gy(this)},X().prototype.leakyRelu=function(n){return this.throwIfDisposed(),Fu(this,n)},X().prototype.lessEqual=function(n){return this.throwIfDisposed(),eo(this,n)},X().prototype.less=function(n){return this.throwIfDisposed(),_a(this,n)},X().prototype.localResponseNormalization=function(n,t,e,s){return this.throwIfDisposed(),Ay(this,n,t,e,s)},X().prototype.logSigmoid=function(){return this.throwIfDisposed(),yy(this)},X().prototype.logSoftmax=function(n){return this.throwIfDisposed(),wp(this,n)},X().prototype.logSumExp=function(n,t){return this.throwIfDisposed(),Ip(this,n,t)},X().prototype.log=function(){return this.throwIfDisposed(),Kn(this)},X().prototype.log1p=function(){return this.throwIfDisposed(),Ou(this)},X().prototype.logicalAnd=function(n){return this.throwIfDisposed(),$s(this,n)},X().prototype.logicalNot=function(){return this.throwIfDisposed(),Lu(this)},X().prototype.logicalOr=function(n){return this.throwIfDisposed(),Cp(this,n)},X().prototype.logicalXor=function(n){return this.throwIfDisposed(),xy(this,n)},X().prototype.matMul=function(n,t,e){return this.throwIfDisposed(),qe(this,n,t,e)},X().prototype.maxPool=function(n,t,e,s){return this.throwIfDisposed(),Mu(this,n,t,e,s)},X().prototype.max=function(n,t){return this.throwIfDisposed(),Gn(this,n,t)},X().prototype.maximum=function(n){return this.throwIfDisposed(),ys(this,n)},X().prototype.mean=function(n,t){return this.throwIfDisposed(),Rt(this,n,t)},X().prototype.min=function(n,t){return this.throwIfDisposed(),Na(this,n,t)},X().prototype.minimum=function(n){return this.throwIfDisposed(),to(this,n)},X().prototype.mirrorPad=function(n,t){return this.throwIfDisposed(),wy(this,n,t)},X().prototype.mod=function(n){return this.throwIfDisposed(),Iy(this,n)},X().prototype.mul=function(n){return this.throwIfDisposed(),L(this,n)},X().prototype.neg=function(){return this.throwIfDisposed(),bt(this)},X().prototype.norm=function(n,t,e){return this.throwIfDisposed(),Ta(this,n,t,e)},X().prototype.notEqual=function(n){return this.throwIfDisposed(),Ko(this,n)},X().prototype.oneHot=function(n,t=1,e=0){return this.throwIfDisposed(),Sp(this,n,t,e)},X().prototype.onesLike=function(){return this.throwIfDisposed(),jn(this)},X().prototype.pad=function(n,t){return this.throwIfDisposed(),vr(this,n,t)},X().prototype.pool=function(n,t,e,s,r,o){return this.throwIfDisposed(),Cy(this,n,t,e,s,r,o)},X().prototype.pow=function(n){return this.throwIfDisposed(),yr(this,n)},X().prototype.prelu=function(n){return this.throwIfDisposed(),Vu(this,n)},X().prototype.prod=function(n,t){return this.throwIfDisposed(),vy(this,n,t)},X().prototype.reciprocal=function(){return this.throwIfDisposed(),Sy(this)},X().prototype.relu=function(){return this.throwIfDisposed(),Fs(this)},X().prototype.relu6=function(){return this.throwIfDisposed(),Ep(this)},X().prototype.reshapeAs=function(n){return this.throwIfDisposed(),M(this,n.shape)},X().prototype.reshape=function(n){return this.throwIfDisposed(),M(this,n)},X().prototype.resizeBilinear=function(n,t,e){return this.throwIfDisposed(),Uy(this,n,t,e)},X().prototype.resizeNearestNeighbor=function(n,t,e){return this.throwIfDisposed(),Wy(this,n,t,e)},X().prototype.reverse=function(n){return this.throwIfDisposed(),as(this,n)},X().prototype.rfft=function(){return this.throwIfDisposed(),qu(this)},X().prototype.round=function(){return this.throwIfDisposed(),_p(this)},X().prototype.rsqrt=function(){return this.throwIfDisposed(),Dp(this)},X().prototype.selu=function(){return this.throwIfDisposed(),Rp(this)},X().prototype.separableConv2d=function(n,t,e,s,r,o){return this.throwIfDisposed(),$p(this,n,t,e,s,r,o)},X().prototype.sigmoid=function(){return this.throwIfDisposed(),Rs(this)},X().prototype.sign=function(){return this.throwIfDisposed(),Ny(this)},X().prototype.sin=function(){return this.throwIfDisposed(),Op(this)},X().prototype.sinh=function(){return this.throwIfDisposed(),Lp(this)},X().prototype.slice=function(n,t){return this.throwIfDisposed(),Ye(this,n,t)},X().prototype.softmax=function(n){return this.throwIfDisposed(),Hu(this,n)},X().prototype.softplus=function(){return this.throwIfDisposed(),Ho(this)},X().prototype.spaceToBatchND=function(n,t){return this.throwIfDisposed(),zu(this,n,t)},X().prototype.split=function(n,t){return this.throwIfDisposed(),Ln(this,n,t)},X().prototype.sqrt=function(){return this.throwIfDisposed(),pn(this)},X().prototype.square=function(){return this.throwIfDisposed(),dt(this)},X().prototype.squaredDifference=function(n){return this.throwIfDisposed(),Bp(this,n)},X().prototype.squeeze=function(n){return this.throwIfDisposed(),so(this,n)},X().prototype.stack=function(n,t){this.throwIfDisposed();const e=n instanceof mt?[this,n]:[this,...n];return Qn(e,t)},X().prototype.step=function(n){return this.throwIfDisposed(),jo(this,n)},X().prototype.stridedSlice=function(n,t,e,s,r,o,i,a){return this.throwIfDisposed(),Ty(this,n,t,e,s,r,o,i,a)},X().prototype.sub=function(n){return this.throwIfDisposed(),xe(this,n)},X().prototype.sum=function(n,t){return this.throwIfDisposed(),we(this,n,t)},X().prototype.tan=function(){return this.throwIfDisposed(),ky(this)},X().prototype.tanh=function(){return this.throwIfDisposed(),Uo(this)},X().prototype.tile=function(n){return this.throwIfDisposed(),is(this,n)},X().prototype.toBool=function(){return this.throwIfDisposed(),he(this,"bool")},X().prototype.toFloat=function(){return this.throwIfDisposed(),he(this,"float32")},X().prototype.toInt=function(){return this.throwIfDisposed(),he(this,"int32")},X().prototype.topk=function(n,t){return this.throwIfDisposed(),_y(this,n,t)},X().prototype.transpose=function(n){return this.throwIfDisposed(),Je(this,n)},X().prototype.unique=function(n){return this.throwIfDisposed(),Dy(this,n)},X().prototype.unsortedSegmentSum=function(n,t){return this.throwIfDisposed(),Up(this,n,t)},X().prototype.unstack=function(n){return this.throwIfDisposed(),ls(this,n)},X().prototype.where=function(n,t){return this.throwIfDisposed(),fn(n,this,t)},X().prototype.zerosLike=function(){return this.throwIfDisposed(),Ze(this)};class Ms extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Ms.prototype)}}class us extends Error{constructor(t){super(t),Object.setPrototypeOf(this,us.prototype)}}class B extends Error{constructor(t){super(t),Object.setPrototypeOf(this,B.prototype)}}class Pe extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Pe.prototype)}}class kf extends Error{constructor(t){super(t),Object.setPrototypeOf(this,kf.prototype)}}class kx{constructor(t){this.maxEntries=t||100,this.cache=new Map}get(t){let e;return this.cache.has(t)&&(e=this.cache.get(t),this.cache.delete(t),this.cache.set(t,e)),e}put(t,e){if(this.cache.has(t))this.cache.delete(t);else if(this.cache.size>=this.maxEntries){const s=this.cache.keys().next().value;this.cache.delete(s)}this.cache.set(t,e)}getMaxEntries(){return this.maxEntries}setMaxEntries(t){if(t<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${t}.`);if(this.maxEntries>t)for(let e=0;e<this.maxEntries-t;e++){const s=this.cache.keys().next().value;this.cache.delete(s)}this.maxEntries=t}}function oo(n,t){if(Array.isArray(n)){let e=[];for(let s=0;s<t;s++)e=e.concat(n);return e}{const e=new Array(t);return e.fill(n),e}}function Xn(n,t){if(!n)throw new kf(t)}function Ex(n,t){let e=0;for(const s of n)s===t&&e++;return e}function _n(n){return 1===n.length?n[0]:n}function gt(n){return Array.isArray(n)?n:[n]}function er(n){const e=n.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function ao(n){return n.length<=1||-1===n.indexOf("_")?n:n.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}let cs={};function Ef(n){if(null==n)return null;const t={};return t.className=n.getClassName(),t.config=n.getConfig(),t}function _f(n){if(null!=n&&"object"==typeof n)if(Array.isArray(n))n.forEach(t=>_f(t));else{const t=Object.keys(n);for(const e of t){const s=n[e];null!=s&&"object"==typeof s&&(Array.isArray(s)||"ndarray"!==s.type||"number"!=typeof s.value?_f(s):n[e]=s.value)}}}function Ma(n,t={},e={},s="object",r=!1){if("string"==typeof n){let i;if(n in e)i=e[n];else if(n in cs)i=cs[n];else if(i=t[n],null==i)throw new B(`Unknown ${s}: ${n}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return i}{const o=n;if(null==o.className||null==o.config)throw new B(`${s}: Improper config format: ${JSON.stringify(o)}.\n'className' and 'config' must set.`);const i=o.className;let a,l;if(i in e?[a,l]=e[i]:i in cs?[a,l]=cs.className:i in t&&([a,l]=t[i]),null==a)throw new B(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const u={};for(const p of Object.keys(cs))u[p]=cs[p];for(const p of Object.keys(e))u[p]=e[p];o.config.customObjects=u;const h=Object.assign({},cs);for(const p of Object.keys(e))cs[p]=e[p];_f(o.config);const d=l(a,o.config,e,r);return cs=Object.assign({},h),d}{const u=Object.assign({},cs);for(const h of Object.keys(e))cs[h]=e[h];const c=new a(o.config);return cs=Object.assign({},u),c}}}function tc(n,t){return-1*function fD(n,t){return n<t?-1:n>t?1:0}(n,t)}function Sr(n){if(null==n)return n;const t=[];for(const e of n)-1===t.indexOf(e)&&t.push(e);return t}function mD(n){if(null==n)throw new B(`Invalid value in obj: ${JSON.stringify(n)}`);for(const t in n)if(n.hasOwnProperty(t))return!1;return!0}function lo(n,t,e){if(null!=e&&n.indexOf(e)<0)throw new B(`${e} is not a valid ${t}.  Valid values are ${n} or null/undefined.`)}function Df(n,t,e=0,s=1/0){return Xn(e>=0),Xn(s>=e),Array.isArray(n)&&n.length>=e&&n.length<=s&&n.every(r=>typeof r===t)}function sn(n,t){Array.isArray(n)?(v(n.length>0,()=>`${t} is unexpectedly an empty array.`),n.forEach((e,s)=>sn(e,`element ${s+1} of ${t}`))):v(Number.isInteger(n)&&n>0,()=>`Expected ${t} to be a positive integer, but got ${_x(n)}.`)}function _x(n){return null===n?"null":Array.isArray(n)?"["+n.map(t=>_x(t)).join(",")+"]":"string"==typeof n?`"${n}"`:`${n}`}function Dx(n){return"relu"===n?"relu":"linear"===n?"linear":"elu"===n?"elu":null}let AD=0;function Rx(){return AD++}const nc={};function sc(n=""){return n in nc||(nc[n]=0),nc[n]+=1,n+nc[n].toString()}const yD=["channelsFirst","channelsLast"],xD=["nearest","bilinear"],bD=["valid","same","causal"],wD=["max","avg"],ID=["sum","mul","concat","ave"],Zo=new Map;function Pt(n){lo(yD,"DataFormat",n)}function Zn(n){lo(bD,"PaddingMode",n)}function $x(n){lo(wD,"PoolMode",n)}const Ba=[];function uo(n,t){Ba.push(n);try{const e=t();return Ba.pop(),e}catch(e){throw Ba.pop(),e}}function Ox(n){if(!Px(n))throw new Error("Not a valid tensor name: '"+n+"'");return function vD(){return 0===Ba.length?"":Ba.join("/")+"/"}()+n}function Lx(n){if(!Px(n))throw new Error("Not a valid tensor name: '"+n+"'");Zo.has(n)||Zo.set(n,0);const t=Zo.get(n);if(Zo.set(n,Zo.get(n)+1),t>0){const e=`${n}_${t}`;return Zo.set(e,1),e}return n}const SD=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Px(n){return!!n.match(SD)}function ND(n){return n===parseInt(n.toString(),10)}function Nr(n,t,e){null==t&&(t=0),null==e&&(e=n.length);let s=1;for(let r=t;r<e;++r)s*=n[r];return s}function Yo(n){if(0===n.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let e=0;e<n.length;e++){const s=n[e];s<t&&(t=s)}return t}function Tr(n){if(0===n.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let e=0;e<n.length;e++){const s=n[e];s>t&&(t=s)}return t}function bs(n,t){if(t<n)throw new B(`end (${t}) < begin (${n}) is forbidden.`);const e=[];for(let s=n;s<t;++s)e.push(s);return e}let rc;function jt(){return null==rc&&(rc=function wv(){return F.backend}().epsilon()),rc}function Bs(n,t){return he(n,t)}function za(n,t=-1){const e=n.shape.slice();return t<0&&(t=e.length+t+1),e.splice(t,0,1),M(n,e)}function co(n,t,e){return U(()=>{switch(n.rank){case 1:return Wu(n,t,e);case 2:return Pp(n,[t,0],[e,n.shape[1]]);case 3:return Gu(n,[t,0,0],[e,n.shape[1],n.shape[2]]);case 4:return Ra(n,[t,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3]]);case 5:return Ye(n,[t,0,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3],n.shape[4]]);case 6:return Ye(n,[t,0,0,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3],n.shape[4],n.shape[5]]);default:throw new B(`sliceAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`)}})}function Rf(n,t,e){return U(()=>{switch(n.rank){case 1:return Wu(n,t,e);case 2:return Pp(n,[0,t],[n.shape[0],e]);case 3:return Gu(n,[0,0,t],[n.shape[0],n.shape[1],e]);case 4:return Ra(n,[0,0,0,t],[n.shape[0],n.shape[1],n.shape[2],e]);default:throw new B(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`)}})}function oc(n,t,e,s){return U(()=>{switch(n.rank){case 1:return Wu(n,t,e);case 2:switch(s){case 1:return co(n,t,e);case 2:return Rf(n,t,e);default:throw new B(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return co(n,t,e);case 2:return Gu(n,[0,t,0],[n.shape[0],e,n.shape[2]]);case 3:return Rf(n,t,e);default:throw new B(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return co(n,t,e);case 2:return Ra(n,[0,t,0,0],[n.shape[0],e,n.shape[2],n.shape[3]]);case 3:return Ra(n,[0,0,t,0],[n.shape[0],n.shape[1],e,n.shape[3]]);case 4:return Rf(n,t,e);default:throw new B(`The axis is not within the rank of the tensor ${s}`)}default:throw new B(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`)}})}function $f(n,t=-1){let e;return t<0&&(e=n[0].rank,t=0!==e?e:0),t===n[0].rank&&(t=-1),zt(n,t)}function Bx(n,t){switch(n.rank){case 1:return YA([n,t]);case 2:return JA([n,t],0);case 3:return ey([n,t],0);case 4:return ty([n,t],0);default:throw new B(`concatAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`)}}function Ff(n,t){if(Array.isArray(t)||(t=[t]),n.rank!==t.length)throw new B(`The length of input n (${t.length}) does not match the number of dimensions in input x (${n.rank})`);return is(n,t)}function ic(n,t=0,e=1,s,r){return kp(n,t,e,s,r)}function zs(n,t,e,s){if(n.rank<2||t.rank<2)throw new Pe(`dot requires both inputs to be rank >= 2 but got x shape = ${n.shape} and y shape = ${t.shape}`);if(t.rank>=3&&n.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new Pe(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${n.shape} and  y shape = ${t.shape}`);if(2===n.rank&&2===t.rank)return Xp({a:n,b:t,transposeA:!1,transposeB:!1,bias:s?Of(n.rank,s,"channelsLast"):null,activation:e});{const r=n.shape.slice(),o=r.pop();n=M(n,[-1,o]);const i=t.shape.slice(),a=i.pop(),l=i.pop(),u=[...i,a],c=Array.from({length:t.rank},(f,g)=>0===g?t.rank-2:g<=t.rank-2?g-1:g);t=M(Je(t,c),[l,-1]);const h=[...r,...u];return M(Xp({a:n,b:t,transposeA:!1,transposeB:!1,bias:s?Of(n.rank,s,"channelsLast"):null,activation:e}),h)}}function zx(n,t,e){return U(()=>(t=Array.isArray(t)?mn(t,"int32"):he(t,"int32"),Ea(n,t,e)))}function Va(n){return L(n,n)}function Of(n,t,e){const s=t.shape;if(1!==t.rank&&t.rank!==n)throw new B(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${n}`);if(5===n){if("channelsFirst"===e)return M(t,1===s.length?[1,s[0],1,1,1]:[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===e)return M(t,1===s.length?[1,1,1,1,s[0]]:[1].concat(s))}else if(4===n){if("channelsFirst"===e)return M(t,1===s.length?[1,s[0],1,1]:[1,s[2],s[0],s[1]]);if("channelsLast"===e)return M(t,1===s.length?[1,1,1,s[0]]:[1].concat(s))}else if(3===n){if("channelsFirst"===e)return M(t,1===s.length?[1,s[0],1]:[1,s[1],s[0]]);if("channelsLast"===e)return M(t,1===s.length?[1,1,s[0]]:[1].concat(s))}else if(n<3)return t;throw new B(`Unsupported input rank by biasAdd: ${t.rank}`)}function Is(n,t,e){return U(()=>(null==e&&(e="channelsLast"),Pt(e),ne(n,Of(n.rank,t,e))))}function Vx(n,t,e,s){return U(()=>Fy(n,t,e,s))}function Ua(n,t,e=!1){return e?n():t()}const OD=["fanIn","fanOut","fanAvg"],LD=["normal","uniform","truncatedNormal"];class hs extends Mo{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}se((()=>{class n extends hs{apply(e,s){return qt(e,s)}}return n.className="Zeros",n})());let Ux=(()=>{class n extends hs{apply(e,s){return qn(e,s)}}return n.className="Ones",n})();se(Ux),se((()=>{class n extends hs{constructor(e){if(super(),"object"!=typeof e)throw new B(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new B(`config must have value set but got ${e}`);this.value=e.value}apply(e,s){return U(()=>L(ke(this.value),qn(e,s)))}getConfig(){return{value:this.value}}}return n.className="Constant",n})()),se((()=>{class n extends hs{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,s){return no(e,this.minval,this.maxval,s,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}return n.className="RandomUniform",n})()),se((()=>{class n extends hs{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,s){if("float32"!==(s=s||"float32")&&"int32"!==s)throw new Pe(`randomNormal does not support dType ${s}.`);return ic(e,this.mean,this.stddev,s,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}return n.className="RandomNormal",n})()),se((()=>{class n extends hs{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,s){if("float32"!==(s=s||"float32")&&"int32"!==s)throw new Pe(`truncatedNormal does not support dType ${s}.`);return Vp(e,this.mean,this.stddev,s,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}return n.className="TruncatedNormal",n})()),se((()=>{class n extends hs{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,s){return U(()=>{if(2!==e.length||e[0]!==e[1])throw new B("Identity matrix initializer can only be used for 2D square matrices.");return L(this.gain,bp(e[0]))})}getConfig(){return{gain:this.gain}}}return n.className="Identity",n})());let Yn=(()=>{class n extends hs{constructor(e){if(super(),e.scale<0)throw new B(`scale must be a positive float. Got: ${e.scale}`);this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,function PD(n){lo(OD,"FanMode",n)}(this.mode),this.distribution=null==e.distribution?"normal":e.distribution,function MD(n){lo(LD,"Distribution",n)}(this.distribution),this.seed=e.seed}apply(e,s){const r=function BD(n,t="channelsLast"){let e,s;if(Pt(t),2===n.length)e=n[0],s=n[1];else if(-1!==[3,4,5].indexOf(n.length)){if("channelsFirst"===t){const r=Nr(n,2);e=n[1]*r,s=n[0]*r}else if("channelsLast"===t){const r=Nr(n,0,n.length-2);e=n[n.length-2]*r,s=n[n.length-1]*r}}else{const r=Nr(n);e=Math.sqrt(r),s=Math.sqrt(r)}return[e,s]}(e),o=r[0],i=r[1];let a=this.scale;if(a/="fanIn"===this.mode?Math.max(1,o):"fanOut"===this.mode?Math.max(1,i):Math.max(1,(o+i)/2),"normal"===this.distribution){const l=Math.sqrt(a);if("float32"!==(s=s||"float32")&&"int32"!==s)throw new Pe(`${this.getClassName()} does not support dType ${s}.`);return Vp(e,0,l,s,this.seed)}{const l=Math.sqrt(3*a);return no(e,-l,l,s,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}return n.className="VarianceScaling",n})();se(Yn);let Wx=(()=>{class n extends Yn{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Yn.className}}return n.className="GlorotUniform",n})();se(Wx);let Gx=(()=>{class n extends Yn{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Yn.className}}return n.className="GlorotNormal",n})();se(Gx);let Hx=(()=>{class n extends Yn{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Yn.className}}return n.className="HeNormal",n})();se(Hx);let Kx=(()=>{class n extends Yn{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Yn.className}}return n.className="HeUniform",n})();se(Kx);let qx=(()=>{class n extends Yn{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Yn.className}}return n.className="LeCunNormal",n})();se(qx);let jx=(()=>{class n extends Yn{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Yn.className}}return n.className="LeCunUniform",n})();se(jx),se((()=>{class n extends hs{constructor(e){super(),this.DEFAULT_GAIN=1,this.ELEMENTS_WARN_SLOW=2e3,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed}apply(e,s){return U(()=>{if(e.length<2)throw new Pe("Shape must be at least 2D.");if("int32"!==s&&"float32"!==s&&void 0!==s)throw new TypeError(`Unsupported data type ${s}.`);const r=Q(e.slice(0,-1)),o=e[e.length-1],i=r*o;i>this.ELEMENTS_WARN_SLOW&&console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${i}) elements: Slowness may result.`);const l=ic([Math.max(o,r),Math.min(o,r)],0,1,s,this.seed),u=Hy.qr(l,!1);let c=u[0];const d=u[1].flatten().stridedSlice([0],[Math.min(o,r)*Math.min(o,r)],[Math.min(o,r)+1]);return c=L(c,d.sign()),r<o&&(c=c.transpose()),L(ke(this.gain),c.reshape(e))})}getConfig(){return{gain:this.gain,seed:this.seed}}}return n.className="Orthogonal",n})());const Qx={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Xx(n,t={}){return Ma(n,rs.getMap().classNameMap,t,"initializer")}function kt(n){return Ef(n)}function It(n){if("string"==typeof n){const t=n in Qx?Qx[n]:n;if("GlorotNormal"===t)return new Gx;if("GlorotUniform"===t)return new Wx;if("HeNormal"===t)return new Hx;if("HeUniform"===t)return new Kx;if("LeCunNormal"===t)return new qx;if("LeCunUniform"===t)return new jx;{const e={};return e.className=t,e.config={},Xx(e)}}return n instanceof hs?n:Xx(n)}function Lf(n){return Array.isArray(n)&&Array.isArray(n[0])}function ac(n){return 0===n.length?[]:Array.isArray(n[0])?n:[n]}function $e(n){let t;if(Array.isArray(n)){if(1!==n.length)throw new B(`Expected Tensor length to be 1; got ${n.length}`);t=n[0]}else t=n;return t}function nt(n){if(Array.isArray(n)&&Array.isArray(n[0])){if(1===n.length)return n[0];throw new B(`Expected exactly 1 Shape; got ${n.length}`)}return n}function lc(n){let t=0;for(const e of n)t+=0===e.shape.length?1:e.shape.reduce((s,r)=>s*r);return t}const Zx="Variable";class Vs{constructor(t,e="float32",s=Zx,r=!0,o=null){this.dtype=null==e?"float32":e,this.shape=t.shape,this.id=Rx(),this.originalName=Ox(s=null==s?Zx:s),this.name=Lx(this.originalName),this.trainable_=r,this.constraint=o,this.val=Ry(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function zD(n,t){if(n.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(n.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function Pf(n){return n.map(t=>t.read())}function Mf(n){n.forEach(t=>{t[0].write(t[1])})}class Qt{constructor(t){this.dtype=t.dtype,this.shape=t.shape,this.ndim=null!=t.shape?t.shape.length:t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class Us{constructor(t,e,s,r,o,i,a){this.dtype=t,this.shape=e,this.sourceLayer=s,this.inputs=r,this.callArgs=o,this.outputTensorIndex=a,this.id=Rx(),null!=i&&(this.originalName=Ox(i),this.name=Lx(this.originalName)),this.rank=e.length}}let VD=0;class uc{constructor(t,e){this.callArgs=e,this.id=VD++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const s of t.inboundLayers)null!=s&&s.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)t.push(null!=e?e.name:null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let UD=0;class He extends Mo{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=UD++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const s=this.getClassName();e=er(s)+"_"+sc(s)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let s;if(null!=t.batchInputShape)s=t.batchInputShape;else if(null!=t.inputShape){let o=null;null!=t.batchSize&&(o=t.batchSize),s=[o].concat(t.inputShape)}this.batchInputShape=s;let r=t.dtype;null==r&&(r=t.inputDType),null==r&&(r="float32"),this.dtype=r}this.initialWeights=null!=t.weights?t.weights:null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new us(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new B(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return _n(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return _n(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Ms(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new Ms(`Layer ${this.name} is not connected, no input to return.`);return _n(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Ms(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Ms(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return _n(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=gt(t),null==this.inputSpec||0===this.inputSpec.length)return;const e=gt(this.inputSpec);if(t.length!==e.length)throw new B(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: ${t}`);for(let s=0;s<t.length;s++){const r=t[s],o=e[s];if(null==o)continue;const i=r.rank;if(null!=o.ndim&&i!==o.ndim)throw new B(`Input ${s} is incompatible with layer ${this.name}: expected ndim=${o.ndim}, found ndim=${i}`);if(null!=o.maxNDim&&i>o.maxNDim)throw new B(`Input ${s} is incompatible with layer ${this.name}: expected max_ndim=${o.maxNDim}, found ndim=${i}`);if(null!=o.minNDim&&i<o.minNDim)throw new B(`Input ${s} is incompatible with layer ${this.name}: expected min_ndim=${o.minNDim}, found ndim=${i}.`);if(null!=o.dtype&&r.dtype!==o.dtype)throw new B(`Input ${s} is incompatible with layer ${this.name} : expected dtype=${o.dtype}, found dtype=${r.dtype}.`);if(o.axes){const a=r.shape;for(const l in o.axes){const u=Number(l),c=o.axes[l];if(null!=c&&-1===[c,null].indexOf(u>=0?a[u]:a[a.length+u]))throw new B(`Input ${s} is incompatible with layer ${this.name}: expected axis ${u} of input shape to have value ${c} but got shape ${a}.`)}}if(null!=o.shape)for(let a=0;a<o.shape.length;++a){const l=o.shape[a],u=r.shape[a];if(null!=l&&null!=u&&l!==u)throw new B(`Input ${s} is incompatible with layer ${this.name}: expected shape=${o.shape}, found shape=${r.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const s=gt(t);let r=!0;for(const i of s)if(!(i instanceof Us)){r=!1;break}let o=!0;for(const i of s)if(i instanceof Us){o=!1;break}if(r===o)throw new B("Arguments to apply() must be all SymbolicTensors or all Tensors");return uo(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);const i=[];for(const a of gt(t))i.push(a.shape);this.build(_n(i)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&o&&(this._refCount=1)}if(this.assertInputCompatibility(t),o){let i=this.call(t,e);const a=gt(i),l=[];for(let u of a)-1!==s.indexOf(u)&&(u=u.clone()),l.push(u);if(i=_n(l),null!=this.activityRegularizer)throw new Pe("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return i}{const i=function WD(n){n=gt(n);const t=[];for(const e of n)t.push(e.shape);return _n(t)}(t),a=this.computeOutputShape(i);let l;const u="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?i[0]:i),l=null!=a&&a.length>0&&Array.isArray(a[0])?a.map((c,h)=>new Us(u,c,this,gt(t),e,this.name,h)):new Us(u,a,this,gt(t),e,this.name),this.addInboundNode(t,l,null,null,i,a,e),this._refCount++,null!=this.activityRegularizer)throw new Pe("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return l}})}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(t)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let e=!1;this.batchInputShape.forEach((s,r)=>{null!=s&&null!=t[r]&&t[r]!==s&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Ms(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const s=JSON.stringify(e.outputShapes);-1===t.indexOf(s)&&t.push(s)}if(1===t.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new Ms(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new us(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return lc(this.weights)}build(t){this.built=!0}getWeights(t=!1){return Pf(t?this.trainableWeights:this.weights)}setWeights(t){U(()=>{const e=this.weights;if(e.length!==t.length)throw new B(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const s=[],r=Pf(e);for(let o=0;o<r.length;++o){const i=r[o],a=e[o],l=t[o];if(!Qe(i.shape,l.shape))throw new B(`Layer weight shape ${i.shape} not compatible with provided weight shape ${l.shape}`);s.push([a,l])}Mf(s)})}addWeight(t,e,s,r,o,i,a,l){if(-1!==this._addedWeightNames.indexOf(t))throw new B(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==s&&(s="float32"),this.fastWeightInitDuringBuild&&(r=null!=l?l():It("zeros"));const u=r.apply(e,s),c=new Vs(u,s,t,i,a);return u.dispose(),null!=o&&this.addLoss(()=>o.apply(c.read())),null==i&&(i=!0),i?this._trainableWeights.push(c):this._nonTrainableWeights.push(c),c}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=gt(t),null!=this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach(s=>{if(null!=s)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return e}addInboundNode(t,e,s,r,o,i,a=null){const l=gt(t);e=gt(e),s=gt(s),r=gt(r),o=ac(o),i=ac(i);const u=[],c=[],h=[];for(const d of l)u.push(d.sourceLayer),c.push(d.nodeIndex),h.push(d.tensorIndex);new uc({outboundLayer:this,inboundLayers:u,nodeIndices:c,tensorIndices:h,inputTensors:l,outputTensors:e,inputMasks:s,outputMasks:r,inputShapes:o,outputShapes:i},a);for(let d=0;d<e.length;d++)e[d].sourceLayer=this,e[d].nodeIndex=this.inboundNodes.length-1,e[d].tensorIndex=d}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}function Yx(n,t,e){if((null==t||null!=e&&e>0)&&(t=n.sourceLayer,e=n.nodeIndex),0===t.inboundNodes.length)return[n];{const s=t.inboundNodes[e];if(0===s.inboundLayers.length)return s.inputTensors;{const r=[];for(let o=0;o<s.inboundLayers.length;o++){const u=Yx(s.inputTensors[o],s.inboundLayers[o],s.nodeIndices[o]);for(const c of u)-1===r.indexOf(c)&&r.push(c)}return r}}}let cc=(()=>{class n extends He{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:sc("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new B("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let s=e.batchInputShape;if(null==s){if(null==e.inputShape)throw new B("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");s=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new B("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const r=e.dtype||"float32";this.batchInputShape=s,this.dtype=r,this.inputSpec=[{shape:s}];const o=new Us(this.dtype,this.batchInputShape,this,[],{},this.name);o.nodeIndex=0,o.tensorIndex=0,new uc({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[o],outputTensors:[o],inputMasks:[null],outputMasks:[null],inputShapes:[s],outputShapes:[s]})}apply(e,s){throw new B(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}return n.className="InputLayer",n})();se(cc);class kr{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof kr)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,s){if(null!=this.id2Value[t.id])throw new B(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function KD(n,t){if(null==n.dtype||n.dtype===t.dtype)return t;try{return he(t,n.dtype)}catch{throw new B(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${n.name}' (${n.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=s&&(this.id2Mask[t.id]=s),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof Us){if(null==this.id2Value[t.id])throw new B(`Nonexistent key: ${t.name}`);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new B(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Value[e]}}getMask(t){if(t instanceof Us){if(null==this.id2Value[t.id])throw new B(`Nonexistent key: ${t.name}`);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new B(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&ze(this.id2Mask)}}const hc=new kx,dc=new kx;function Wa(n,t,e,s){const r=null!=e&&e.training,o=Array.isArray(n),i=o?n:[n],a=i.map(f=>f.name),l=[],u=t.names();for(const f of a)-1!==u.indexOf(f)?l.push(t.getValue(f)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=a.join(",")+"|"+t.names().sort().join(",");let d,h=hc.get(c);if(null==h){const f=function jD(n,t){v(null!=n&&n.length>0,()=>"Expected at least one fetch, got none");let e=[],s={};if(1===n.length){const r=Jx(n[0],t);e=r.sorted,s=r.recipientMap}else{const r=new Set;for(const o of n){const{sorted:i,recipientMap:a}=Jx(o,t);for(const l of i)r.has(l.name)||(e.push(l),r.add(l.name));for(const l in a)null==s[l]&&(s[l]=new Set),a[l].forEach(u=>s[l].add(u))}}return{sorted:e,recipientCounts:QD(s)}}(i,t);h=f.sorted,d=f.recipientCounts,hc.put(c,h),dc.put(c,d)}d={},r||Object.assign(d,dc.get(c));const p=new kr(t);for(let f=0;f<h.length;++f){if(null!=s){const D=Kd().numTensors;D>s.maxNumTensors&&(s.maxNumTensors=D),D<s.minNumTensors&&(s.minNumTensors=D)}const g=h[f],m=g.sourceLayer;if(m instanceof cc)continue;const A=[],y=[],x=[];let b=!1;for(const D of g.inputs){const O=p.getValue(D),C=p.getMask(D);A.push(O),y.push(C),null!=C&&(b=!0),r||(d[D.name]--,0===d[D.name]&&!t.hasKey(D)&&-1===a.indexOf(D.name)&&!O.isDisposed&&!0!==D.sourceLayer.stateful&&x.push(O))}b&&((e=e||{}).mask=y[0]);const I=gt(m.apply(A,e));let S=null;m.supportsMasking&&(S=m.computeMask(A,y));const k=XD(g),E=Array.isArray(k)?k:[k];for(let D=0;D<E.length;++D){p.hasKey(E[D])||p.add(E[D],I[D],Array.isArray(S)?S[0]:S);const O=a.indexOf(E[D].name);-1!==O&&(l[O]=I[D])}r||ze(x)}return p.disposeMasks(),o?l:l[0]}function QD(n){const t={};for(const e in n)t[e]=n[e].size;return t}function Jx(n,t){const e=new Set,s=[],r={};for(const a of t.names())e.add(a);const o=[],i=[];for(o.push(n);o.length>0;){const a=o[o.length-1];if(e.has(a.name)){o.pop();continue}const l=i[i.length-1]===o.length-1;if(0===a.inputs.length||l)o.pop(),s.push(a),e.add(a.name),l&&i.pop();else{i.push(o.length-1);for(const u of a.inputs)null==r[u.name]&&(r[u.name]=new Set),r[u.name].add(a.name),!e.has(u.name)&&o.push(u)}}return{sorted:s,recipientMap:r}}function XD(n){let t;if(1===n.sourceLayer.inboundNodes.length)t=n.sourceLayer.output;else{let e=null;for(let s=0;s<n.sourceLayer.inboundNodes.length;++s)for(const r of n.sourceLayer.inboundNodes[s].outputTensors)if(r.id===n.id){e=s;break}t=n.sourceLayer.getOutputAt(e)}return t}function Bf(n,t){return U(()=>pn(we(L(n,n),t,!0)))}W().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,function qD(n){null!=hc&&hc.setMaxEntries(n),null!=dc&&dc.setMaxEntries(n)});class Ga extends Mo{getConfig(){return{}}}se((()=>{class n extends Ga{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return U(()=>{const s=Bf(e,this.axis),r=On(s,0,this.maxValue);return L(e,Se(r,ne(jt(),s)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}return n.className="MaxNorm",n})()),se((()=>{class n extends Ga{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return U(()=>Se(e,ne(jt(),Bf(e,this.axis))))}getConfig(){return{axis:this.axis}}}return n.className="UnitNorm",n})()),se((()=>{class n extends Ga{apply(e){return Fs(e)}}return n.className="NonNeg",n})()),se((()=>{class n extends Ga{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return U(()=>{const s=Bf(e,this.axis),r=ne(L(this.rate,On(s,this.minValue,this.maxValue)),L(1-this.rate,s));return L(e,Se(r,ne(jt(),s)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}return n.className="MinMaxNorm",n})());const eb={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Xt(n){return Ef(n)}function tb(n,t={}){return Ma(n,rs.getMap().classNameMap,t,"constraint")}function Zt(n){return null==n?null:"string"==typeof n?tb({className:n in eb?eb[n]:n,config:{}}):n instanceof Ga?n:tb(n)}function Er(n){return zf.apply(this,arguments)}function zf(){return(zf=(0,q.Z)(function*(n){if(null==n)return;const t=[],e=[],s=[];for(const r in n){const o=n[r];if("number"!=typeof o){const i=o;t.push(i.data()),e.push(r),s.push(i)}}if(t.length>0){const r=yield Promise.all(t);for(let o=0;o<r.length;++o)n[e[o]]=r[o][0];ze(s)}})).apply(this,arguments)}function nb(n){if(null!=n)for(const t in n){const e=n[t];"number"!=typeof e&&e.dispose()}}class Jo{constructor(){this.validationData=null}setParams(t){this.params=t}onEpochBegin(t,e){return(0,q.Z)(function*(){})()}onEpochEnd(t,e){return(0,q.Z)(function*(){})()}onBatchBegin(t,e){return(0,q.Z)(function*(){})()}onBatchEnd(t,e){return(0,q.Z)(function*(){})()}onTrainBegin(t){return(0,q.Z)(function*(){})()}onTrainEnd(t){return(0,q.Z)(function*(){})()}setModel(t){}}class JD{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}onEpochBegin(t,e){var s=this;return(0,q.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onEpochBegin(t,e)})()}onEpochEnd(t,e){var s=this;return(0,q.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onEpochEnd(t,e)})()}onBatchBegin(t,e){var s=this;return(0,q.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onBatchBegin(t,e)})()}onBatchEnd(t,e){var s=this;return(0,q.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onBatchEnd(t,e)})()}onTrainBegin(t){var e=this;return(0,q.Z)(function*(){null==t&&(t={});for(const s of e.callbacks)yield s.onTrainBegin(t)})()}onTrainEnd(t){var e=this;return(0,q.Z)(function*(){null==t&&(t={});for(const s of e.callbacks)yield s.onTrainEnd(t)})()}}class eR extends Jo{constructor(){super()}onEpochBegin(t){var e=this;return(0,q.Z)(function*(){e.seen=0,e.totals={}})()}onBatchEnd(t,e){var s=this;return(0,q.Z)(function*(){null==e&&(e={});const r=null==e.size?0:e.size;s.seen+=r;for(const o in e){const i=e[o];if("number"==typeof i)s.totals.hasOwnProperty(o)||(s.totals[o]=0),s.totals[o]=s.totals[o]+i*r;else{let a;o in s.totals?a=s.totals[o]:s.totals[o]=0;const l=U(()=>ne(s.totals[o],L(i,r)));s.totals[o]=l,null!=a&&a.dispose()}}})()}onEpochEnd(t,e){var s=this;return(0,q.Z)(function*(){if(null!=e)for(const r of s.params.metrics)null!=s.totals[r]&&("number"==typeof s.totals[r]?e[r]=s.totals[r]/s.seen:U(()=>{const o=L(Se(1,s.seen),s.totals[r]);e[r]=o,s.totals[r].dispose(),en(e[r])}))})()}}class tR extends Jo{onTrainBegin(t){var e=this;return(0,q.Z)(function*(){e.epoch=[],e.history={}})()}onEpochEnd(t,e){var s=this;return(0,q.Z)(function*(){null==e&&(e={}),s.epoch.push(t);for(const r in e)null==s.history[r]&&(s.history[r]=[]),s.history[r].push(e[r])})()}syncData(){var t=this;return(0,q.Z)(function*(){const e=[],s=[],r=[];for(const i in t.history){const a=t.history[i];for(let l=0;l<a.length;++l)"number"!=typeof a[l]&&(e.push(a[l].data()),s.push(i),r.push(l))}const o=yield Promise.all(e);for(let i=0;i<o.length;++i)t.history[s[i]][r[i]].dispose(),t.history[s[i]][r[i]]=o[i][0]})()}}class nR extends Jo{constructor(t,e){if(super(),this.currentEpoch=0,this.nowFunc=t.nowFunc,this.nextFrameFunc=t.nextFrameFunc||Ky,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");uh(this.yieldEvery)&&(this.maybeWait=function gD(n,t,e){let r,s=null!=e?e():Tn();return(...i)=>{const a=null!=e?e():Tn();return a-s<t||(s=a,r=n(...i)),r}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}maybeWait(t,e,s){var r=this;return(0,q.Z)(function*(){const o=[];null!=r.yield&&(yield Er(s),o.push(r.yield(t,e,s))),o.push(r.nextFrameFunc()),yield Promise.all(o)})()}onEpochBegin(t,e){var s=this;return(0,q.Z)(function*(){s.currentEpoch=t,null!=s.epochBegin&&(yield Er(e),yield s.epochBegin(t,e))})()}onEpochEnd(t,e){var s=this;return(0,q.Z)(function*(){const r=[];null!=s.epochEnd&&(yield Er(e),r.push(s.epochEnd(t,e))),"epoch"===s.yieldEvery&&r.push(s.nextFrameFunc()),yield Promise.all(r)})()}onBatchBegin(t,e){var s=this;return(0,q.Z)(function*(){null!=s.batchBegin&&(yield Er(e),yield s.batchBegin(t,e))})()}onBatchEnd(t,e){var s=this;return(0,q.Z)(function*(){const r=[];null!=s.batchEnd&&(yield Er(e),r.push(s.batchEnd(t,e))),"batch"===s.yieldEvery?r.push(s.nextFrameFunc()):uh(s.yieldEvery)&&r.push(s.maybeWait(s.currentEpoch,t,e)),yield Promise.all(r)})()}onTrainBegin(t){var e=this;return(0,q.Z)(function*(){null!=e.trainBegin&&(yield Er(t),yield e.trainBegin(t))})()}onTrainEnd(t){var e=this;return(0,q.Z)(function*(){null!=e.trainEnd&&(yield Er(t),yield e.trainEnd(t))})()}}function sb(n,t){return null==n&&(n={}),n instanceof Jo?[n]:Array.isArray(n)&&n[0]instanceof Jo?n:gt(n).map(s=>new nR(s,t))}let sR=(()=>{class n{constructor(){}static registerCallbackConstructor(e,s){v(e>=0&&Number.isInteger(e),()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`),n.checkForDuplicate(s),null==n.constructors[e]&&(n.constructors[e]=[]),n.constructors[e].push(s)}static checkForDuplicate(e){for(const s in n.constructors)n.constructors[+s].forEach(o=>{if(o===e)throw new B("Duplicate callback constructor.")})}static clear(){n.constructors={}}static createCallbacks(e){const s=[];for(const r in n.constructors){const o=+r;e>=o&&s.push(...n.constructors[o])}return s.map(r=>new r)}}return n.constructors={},n})();function rb(n,t,e,s,r,o,i,a,l){const u=new tR,c=[new eR,...sR.createCallbacks(t)];null!=n&&c.push(...n),c.push(u);const h=new JD(c);return h.setParams({epochs:e,initialEpoch:s,samples:r,steps:o,batchSize:i,verbose:t,doValidation:a,metrics:l}),{callbackList:h,history:u}}function tr(n,t={},e=!1){return Ma(n,rs.getMap().classNameMap,t,"layer",e)}function pc(n,t){return U(()=>{"float32"!==n.dtype&&(n=he(n,"float32"));const e=we(Va(n),t,!0),s=Bo(e.shape,jt()),r=pn(ys(e,s));return Se(n,r)})}function fc(n,t){return U(()=>Rt(Va(xe(t,n)),-1))}function Vf(n,t){return U(()=>Rt(Ht(xe(t,n)),-1))}function Uf(n,t){return U(()=>{const e=xe(n,t),s=On(Ht(n),jt(),Number.MAX_VALUE),r=Ht(Se(e,s));return L(100,Rt(r,-1))})}function Ha(n,t,e=!1){return U(()=>{if(e)t=Hu(t);else{const s=we(t,t.shape.length-1,!0);t=Se(t,s)}return t=On(t,jt(),1-jt()),bt(we(L(he(n,"float32"),Kn(t)),t.shape.length-1))})}function mc(n,t,e=!1){return U(()=>{const s=he(ka(function _D(n){const t=[Nr(n.shape)];return M(n,t)}(n)),"int32"),r=(t=On(t,jt(),1-jt())).shape;return Ha(M(Sp(s,r[r.length-1]),r),t,e)})}function gc(n,t){return U(()=>{let e;return e=On(t,jt(),1-jt()),e=Kn(Se(e,xe(1,e))),Rt(function uR(n,t){if(!Qe(n.shape,t.shape))throw new B(`logits and labels must have the same shape, but got shapes ${JSON.stringify(n.shape)} and ${JSON.stringify(t.shape)}`);return U(()=>{const e=Fs(t),s=bt(Ht(t));return ne(xe(e,L(t,n)),Ou(Hn(s)))})}(n,e),-1)})}function ob(n,t){return U(()=>{const e=pc(n,-1),s=pc(t,-1),r=L(e,s);return bt(we(r,-1))})}const Ac={meanSquaredError:fc,meanAbsoluteError:Vf,meanAbsolutePercentageError:Uf,meanSquaredLogarithmicError:function rR(n,t){return U(()=>{const e=On(t,jt(),Number.MAX_VALUE),s=Kn(ne(1,e)),r=On(n,jt(),Number.MAX_VALUE),o=Kn(ne(1,r));return Rt(Va(xe(s,o)),-1)})},squaredHinge:function oR(n,t){return U(()=>{const e=ys(0,xe(1,L(n,t)));return Rt(Va(e),-1)})},hinge:function iR(n,t){return U(()=>{const e=ys(0,xe(1,L(n,t)));return Rt(e,-1)})},categoricalHinge:function aR(n,t){return U(()=>{const e=we(L(n,t),-1),s=Gn(L(xe(1,n),t),-1);return ys(0,ne(1,xe(s,e)))})},logcosh:function lR(n,t){return U(()=>{const e=Math.log(2),s=xe(t,n),r=xe(ne(s,Ho(L(-2,s))),e);return Rt(r,-1)})},categoricalCrossentropy:Ha,sparseCategoricalCrossentropy:mc,binaryCrossentropy:gc,kullbackLeiblerDivergence:function cR(n,t){return U(()=>{const e=On(n,jt(),1),s=On(t,jt(),1);return we(L(n,Kn(Se(e,s))),-1)})},poisson:function hR(n,t){return U(()=>{const e=Kn(ne(jt(),t));return Rt(xe(t,L(n,e)),-1)})},cosineProximity:ob};function Wf(n){if("string"==typeof n){if(n in Ac)return Ac[n];let t=`Unknown loss ${n}`;throw n.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${n}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new B(t)}return n}function ib(n,t){return U(()=>{const e=L(.5,jn(t)),s=Bs(En(t,e),n.dtype);return Rt(xs(n,s),-1)})}function ab(n,t){return U(()=>Bs(xs(Yr(n,-1),Yr(t,-1)),"float32"))}function mR(n,t){return gc(n,t)}function gR(n,t){return n.rank===t.rank&&(n=so(n,[n.rank-1])),(t=Yr(t,-1)).dtype!==n.dtype&&(t=he(t,n.dtype)),he(xs(n,t),"float32")}const ub=Ha,cb=mc,yc={binaryAccuracy:ib,categoricalAccuracy:ab,precision:function fR(n,t){return U(()=>{const e=function lb(n,t){return U(()=>he(we($s(xs(n,1),xs(t,1))),"float32"))}(n,t),s=function pR(n,t){return U(()=>he(we($s(xs(n,0),xs(t,1))),"float32"))}(n,t),r=ne(e,s);return he(fn(En(r,0),Se(e,r),0),"float32")})},categoricalCrossentropy:ub,sparseCategoricalCrossentropy:cb,mse:fc,MSE:fc,mae:Vf,MAE:Vf,mape:Uf,MAPE:Uf,cosine:ob};function vR(n){if("string"==typeof n&&n in yc)return yc[n];if("string"!=typeof n&&null!=n)return n;throw new B(`Unknown metric ${n}`)}function xc(n){if(Xn(null!==n,`Unknown LossOrMetricFn ${n}`),"string"==typeof n)return n;{let t;for(const e of Object.keys(Ac))if(Ac[e]===n){t=e;break}if(void 0!==t)return t;for(const e of Object.keys(yc))if(yc[e]===n){t=e;break}return void 0!==t?t:n.name}}function db(n,t,e=!1){if(null==n||"object"!=typeof n||Object.getPrototypeOf(n)!==Object.prototype||!Gf(n))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(e){const s=JSON.stringify(n);s.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${s.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Gf(n){if(null===n)return!0;if("object"==typeof n){if(Object.getPrototypeOf(n)===Object.prototype){const t=Object.keys(n);for(const e of t)if("string"!=typeof e||!Gf(n[e]))return!1;return!0}if(Array.isArray(n)){for(const t of n)if(!Gf(t))return!1;return!0}return!1}{const t=typeof n;return"string"===t||"number"===t||"boolean"===t}}function bc(n,t,e=console.log){let s="";for(let r=0;r<n.length;++r)r>0&&(s=s.slice(0,s.length-1)+" "),s+=n[r],s=s.slice(0,t[r]),s+=" ".repeat(t[r]-s.length);e(s)}function ER(n,t,e){let s,r;try{r=n.inboundNodes.map(l=>JSON.stringify(l.inputShapes)).join(",")}catch{r="multiple"}try{s=JSON.stringify(n.outputShape)}catch{s="multiple"}bc([`${n.name} (${n.getClassName()})`,r,s,n.countParams().toString()],t,e)}function _R(n,t,e,s){let r,o;try{o=n.inboundNodes.map(h=>JSON.stringify(h.inputShapes)).join(",")}catch{o="multiple"}try{r=JSON.stringify(n.outputShape)}catch{r="multiple"}const i=[];for(const h of n.inboundNodes)if(!(null!=e&&e.length>0&&-1===e.indexOf(h)))for(let d=0;d<h.inboundLayers.length;++d)i.push(`${h.inboundLayers[d].name}[${h.nodeIndices[d]}][${h.tensorIndices[d]}]`);const a=n.name,l=n.getClassName(),u=0===i.length?"":i[0];bc([`${a} (${l})`,o,r,n.countParams().toString(),u],t,s);for(let h=1;h<i.length;++h)bc(["","","","",i[h]],t,s)}function pb(n,t,e){return("inboundNodes"===n||"outputLayers"===n||"inputLayers"===n)&&0===t&&"string"==typeof e}function Hf(n,t){if(null===n)return null;if("string"==typeof n)return ao(n);if("number"==typeof n||"boolean"==typeof n)return n;if(n instanceof Array){const e=[],s=n.length;for(let r=0;r<s;++r){const o=n[r];pb(t,r,o)?e.push(o):e.push(Hf(o,t))}return e}{const e={};for(const s of Object.keys(n)){const r=n[s];if("name"===s&&"string"==typeof r)e[s]=r;else{const o=ao(s);e[o]=Hf(r,o)}}return e}}function Kf(n,t){if(null==n)return null;if("string"==typeof n)return er(n);if("number"==typeof n||"boolean"==typeof n)return n;if(n instanceof Array){const e=[],s=n.length;for(let r=0;r<s;++r){const o=n[r];pb(t,r,o)?e.push(o):e.push(Kf(o,t))}return e}{const e={};for(const s of Object.keys(n)){const r=n[s];e[er(s)]="name"!==s&&"className"!==s||"string"!=typeof r?Kf(r,s):r}return e}}class Cs extends He{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const y=this.getClassName().toLowerCase();this.name=sc(y)}if(this.supportsMasking=!1,this.trainable_=!0,this.inputs=Array.isArray(t.inputs)?t.inputs.slice():[t.inputs],this.outputs=Array.isArray(t.outputs)?t.outputs.slice():[t.outputs],Sr(this.inputs).length!==this.inputs.length)throw new B(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(y=>y.name)}`);Sr(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(y=>y.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const y of this.outputs){const b=y.nodeIndex,I=y.tensorIndex;this.outputLayers.push(y.sourceLayer),this.outputLayersNodeIndices.push(b),this.outputLayersTensorIndices.push(I)}for(const y of this.inputs){const x=y.sourceLayer,b=y.nodeIndex,I=y.tensorIndex;Xn(0===b,"input layer has >1 nodes"),Xn(0===I,"input layer has >1 tensors"),this.inputLayers.push(x),this.inputLayersNodeIndices.push(b),this.inputLayersTensorIndices.push(I)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let y=0;y<this.inputLayers.length;y++){const x=this.inputLayers[y];if(!(x instanceof cc))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${y} (0-based) originates from layer type ${x.getClassName()}.`);this.inputNames.push(x.name),this.feedInputShapes.push(x.batchInputShape),this.feedInputNames.push(x.name)}for(const y of this.outputLayers)this.outputNames.push(y.name);this.internalInputShapes=this.inputs.map(y=>y.shape),this.internalOutputShapes=this.outputs.map(y=>y.shape);const e={},s={},r={},o={},i={},a=[],l=(y,x,b,I,S,k)=>{(null==I||null==S||null==k)&&(I=y.sourceLayer,S=y.nodeIndex,k=y.tensorIndex);const E=I.inboundNodes[S];if(-1!==b.indexOf(E))throw new us(`The tensor ${y.name} at layer "${I.name}" is part of a cycle.`);if(-1!==x.indexOf(E))return;this.containerNodes.add(Cs.nodeKey(I,S)),I.id in i||(i[I.id]=Object.keys(i).length),-1===b.indexOf(E)&&b.push(E);const D=E.inboundLayers.length;for(let O=0;O<D;O++)l(E.inputTensors[O],x,b,E.inboundLayers[O],E.nodeIndices[O],E.tensorIndices[O]);for(x.push(E);b.indexOf(E)>=0;)b.splice(b.indexOf(E),1);a.push(E)},u=[],c=[];for(const y of this.outputs)l(y,u,c);const h=a.slice().reverse();for(const y of h){s[y.id]=y,y.id in e||(e[y.id]=0);let x=e[y.id];x=Math.max(x,null==r[y.outboundLayer.id]?0:r[y.outboundLayer.id]),r[y.outboundLayer.id]=x,o[y.outboundLayer.id]=y.outboundLayer,e[y.id]=x;for(let I=0;I<y.inboundLayers.length;I++){const E=y.inboundLayers[I].inboundNodes[y.nodeIndices[I]];e[E.id]=Math.max(x+1,null==e[E.id]?0:e[E.id]),s[E.id]=E}}const d={};for(const y in e){const x=e[y];x in d||(d[x]=[]),d[x].push(s[y])}const p={};for(const y in r){const x=r[y];x in p||(p[x]=[]),p[x].push(o[y])}let f=Object.keys(p).map(y=>parseInt(y,10)).sort(tc);this.layers=[];for(const y of f){const x=p[y];x.sort((b,I)=>{const S=i[b.id],k=i[I.id];return S<k?-1:S>k?1:0});for(const b of x)b instanceof Cs&&this.internalContainerRefs.push(b),this.layers.push(b)}this.layersByDepth=p,f=Object.keys(d).map(y=>parseInt(y,10)).sort(tc);const g=this.inputs.slice(),m=[];for(const y of f)for(const x of d[y]){const b=x.outboundLayer;if(null!=b){for(const I of x.inputTensors)if(-1===g.indexOf(I))throw new us(`Graph disconnected: cannot obtain value for tensor ${I} at layer "${b.name}". The following previous layers were accessed without issue: ${m}`);for(const I of x.outputTensors)g.push(I);m.push(b.name)}}this.nodesByDepth=d;const A=this.layers.map(y=>y.name);for(const y of A){const x=A.filter(b=>b===y).length;if(1!==x)throw new us(`The name "${y}" is used ${x} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(A))}this.outboundNodes=[],this.inboundNodes=[],new uc({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(y=>null),outputMasks:this.outputs.map(y=>null),inputShapes:this.inputs.map(y=>y.shape),outputShapes:this.outputs.map(y=>y.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(s=>s.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new B("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const s of this.layers)e.push(...s.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const s={};let r=0;const o=Object.keys(t)[0].split("/"),i=!isNaN(parseInt(o[o.length-1],10));for(const l of this.layers)for(const[u,c]of l.weights.entries()){const h=i?`${c.name.split("/").slice(0,-1).join("/")+"/"}${u}`:c.originalName;if(null!=s[h])throw new B(`Duplicate weight name: ${h}`);s[h]=c,r++}const a=[];for(const l in t){let u=l;if(null==s[l]){const c=l.split("/");u=c.slice(0,-2).concat([c[c.length-1]]).join("/")}if(null!=s[u])a.push([s[u],t[l]]);else if(e)throw new B(`Provided weight data has no target variable: ${l}`);delete s[u]}if(e){const l=[];for(const u in s)l.push(u);if(l.length>0)throw new B(`${l.length} of ${r} weights are not set: ${l}`)}Mf(a)}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers 4.10.0",e.backend="TensorFlow.js",e}toJSON(t,e=!0){const s=Kf(this.updatedConfig());return e?JSON.stringify(s):s}call(t,e){return U(()=>{t=gt(t);const s=new kr;for(let r=0;r<this.inputs.length;++r)s.add(this.inputs[r],t[r]);return Wa(this.outputs,s,e)})}computeMask(t,e){return U(()=>{let s;return t=gt(t),s=null==e?oo(null,t.length):gt(e),this.runInternalGraph(t,s)[1]})}computeOutputShape(t){const e=ac(t);if(e.length!==this.inputLayers.length)throw new B(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const s={};for(let a=0;a<e.length;a++)s[this.inputLayers[a].name+"_0_0"]=e[a];const r=Object.keys(this.nodesByDepth).map(a=>parseInt(a,10)).sort(tc);if(r.length>1)for(const a of r){const l=this.nodesByDepth[a];for(const u of l){const c=u.outboundLayer;if(-1!==this.inputLayers.map(g=>g.id).indexOf(c.id))continue;const h=[];for(let g=0;g<u.inboundLayers.length;g++)h.push(s[`${u.inboundLayers[g].name}_${u.nodeIndices[g]}_${u.tensorIndices[g]}`]);const p=ac(c.computeOutputShape(_n(h))),f=c.inboundNodes.indexOf(u);for(let g=0;g<p.length;g++)s[`${c.name}_${f}_${g}`]=p[g]}}const o=[],i=[];for(let a=0;a<this.outputLayers.length;a++)i.push(`${this.outputLayers[a].name}_${this.outputLayersNodeIndices[a]}_${this.outputLayersTensorIndices[a]}`);for(let a=0;a<i.length;a++){const l=i[a];Xn(l in s),o.push(s[l])}return _n(o)}runInternalGraph(t,e){null==e&&(e=oo(null,t.length));const s={};for(let l=0;l<this.inputs.length;++l)s[this.inputs[l].id]=[t[l],e[l]];const r=Object.keys(this.nodesByDepth).map(l=>parseInt(l,10)).sort(tc);for(const l of r){const u=this.nodesByDepth[l];for(const c of u){const h=c.outboundLayer,d=c.inputTensors,p=c.outputTensors,f=new Array;for(const g of d)g.id in s&&f.push(s[g.id]);if(f.length===d.length){let m,A,y,x,g={};if(null!=c.callArgs&&(g=c.callArgs),1===f.length){const[b,I]=f[0];null==g.mask&&(g.mask=I),y=gt(h.call(b,g)),x=gt(h.computeMask(b,I)),m=[b],A=[I]}else m=f.map(b=>b[0]),A=f.map(b=>b[1]),null==g.mask&&(g.mask=A),y=gt(h.call(m,g)),x=gt(h.computeMask(m,A));if(h.activityRegularizer)throw new Pe("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let b=0;b<p.length;++b)s[p[b].id]=[y[b],x[b]]}}}const o=[],i=[],a=[];for(const l of this.outputs){Xn(l.id in s,`Could not compute output ${l.name} : ${l.id}`);const[u,c]=s[l.id];a.push(u.shape),o.push(u),i.push(c)}return[o,i,a]}buildNodeConversionMap(t){const e={};let s;for(const r of this.layers){s=r instanceof Cs?1:0;for(let o=0;o<r.inboundNodes.length;o++){const i=Cs.nodeKey(r,o);this.containerNodes.has(i)&&(e[i]=s,s+=1)}}return e}getLayer(t,e){if(null!=e)return this.findLayer(e);if(null==t)throw new B("Provide either a layer name or layer index");if("number"==typeof t)return this.findLayer(t);for(const s of this.layers)if(s.name===t)return s;throw new B(`No such layer: ${t}`)}findLayer(t){if(this.layers.length<=t)throw new B(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}calculateLosses(){return U(()=>{const t=[];for(const e of this.layers)for(let s=0;s<e.inboundNodes.length;++s){const r=Cs.nodeKey(e,s);this.containerNodes.has(r)&&t.push(...e.calculateLosses())}return t})}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),s=[];for(const i of this.layers){const a=i.getClassName(),l=i.getConfig(),u=[];for(let h=0;h<i.inboundNodes.length;h++){const d=i.inboundNodes[h],p=Cs.nodeKey(i,h);let f={};if(this.containerNodes.has(p)){if(d.callArgs)try{JSON.stringify(d.callArgs),f=d.callArgs}catch{console.warn(`Layer ${i.name} was passed non-serializable keyword arguments: ${d.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),f={}}if(d.inboundLayers.length>0){const g=[];for(let m=0;m<d.inboundLayers.length;m++){const A=d.inboundLayers[m],x=d.tensorIndices[m];let I=e[Cs.nodeKey(A,d.nodeIndices[m])];null==I&&(I=0),g.push([A.name,I,x,f])}u.push(g)}}}const c={};c.name=i.name,c.className=a,c.config=l,c.inboundNodes=u,s.push(c)}t.layers=s;const r=[];for(let i=0;i<this.inputLayers.length;i++){const a=this.inputLayers[i],u=Cs.nodeKey(a,this.inputLayersNodeIndices[i]);if(!this.containerNodes.has(u))continue;let c=e[u];null==c&&(c=0),r.push([a.name,c,this.inputLayersTensorIndices[i]])}t.inputLayers=r;const o=[];for(let i=0;i<this.outputLayers.length;i++){const a=this.outputLayers[i],u=Cs.nodeKey(a,this.outputLayersNodeIndices[i]);if(!this.containerNodes.has(u))continue;let c=e[u];null==c&&(c=0),o.push([a.name,c,this.outputLayersTensorIndices[i]])}return t.outputLayers=o,t}static fromConfig(t,e,s={},r=!1){const o={},i={};function a(m,A){m.name in i?i[m.name].push(A):i[m.name]=[A]}function l(m,A){const y=[];let x;for(const b of A){const I=b[0],S=b[1],k=b[2];if(x=null==b[3]?{}:b[3],!(I in o))return void a(m,A);const E=o[I];if(E.inboundNodes.length<=S)return void a(m,A);y.push(E.inboundNodes[S].outputTensors[k])}y.length>0&&m.apply(_n(y),x)}function u(m){const A=m.name,y=tr(m,null!=e.customObjects?e.customObjects:{});y.setFastWeightInitDuringBuild(r),o[A]=y,m.inboundNodes.forEach(b=>{if(!(b instanceof Array))throw new B(`Corrupted configuration, expected array for nodeData: ${b}`);a(y,b)})}const c=e.name,h=e.layers;for(const m of h)u(m);for(;!mD(i);)for(const m of h){const A=o[m.name];if(A.name in i){const y=i[A.name];delete i[A.name];for(const x of y)l(A,x)}}const d=[],p=[],f=e.inputLayers;for(const m of f){const A=m[0],y=m[1],x=m[2];Xn(A in o),d.push(o[A].inboundNodes[y].outputTensors[x])}const g=e.outputLayers;for(const m of g){const A=m[0],y=m[1],x=m[2];Xn(A in o),p.push(o[A].inboundNodes[y].outputTensors[x])}return new t({inputs:d,outputs:p,name:c})}get stateful(){if(this._stateful)throw new B("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){U(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}}function mb(n,t){return function fb(n,t,e){const s=t.length;if(null==n||Array.isArray(n)&&0===n.length)return t.map(r=>null);if(1===s)return Array.isArray(n)&&1===n.length?n:"object"==typeof n&&t[0]in n?[n[t[0]]]:[n];if(Array.isArray(n)){if(n.length!==s)throw new Error(`Provided ${e} is an array of ${n.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return n}if("object"==typeof n&&Object.keys(n).length>0&&"object"==typeof n[Object.keys(n)[0]]){const r=[];return t.forEach(o=>{r.push(o in n?n[o]:null)}),r}throw new Error(`The model has multiple (${s}) outputs, so ${e} must be either an array with ${s} elements or an object with ${t} keys. Provided ${e} not understood: ${JSON.stringify(n)}`)}(n,t,"classWeight")}function gb(n,t,e,s){return jf.apply(this,arguments)}function jf(){return(jf=(0,q.Z)(function*(n,t,e,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=e){const r=U(()=>{if(1===n.shape.length)return qs(n);if(2===n.shape.length){if(n.shape[1]>1)return Yr(n,1);if(1===n.shape[1])return M(n,[n.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${n.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${n.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),o=Array.from(yield r.data());ze(r);const i=[];return o.forEach(a=>{if(null==e[a])throw new Error(`classWeight must contain all classes in the training data. The class ${a} exists in the data but not in classWeight`);i.push(e[a])}),mn(i,"float32")}return null})).apply(this,arguments)}function DR(n,t){return L(n,t)}function Ab(n,t){let e,s;e=t.xs,s=t.ys,v(null!=e&&null!=s,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);const o=yb("input",n.inputNames,e),i=yb("output",n.outputNames,s),a=o[0].shape[0];v(o.length===n.inputs.length,()=>`LayersModel has ${n.inputs.length} inputs, but the dataset provides ${o.length} inputs.  (Expected input keys: ${JSON.stringify(n.inputNames)})`),v(i.length===n.outputs.length,()=>`LayersModel has ${n.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(n.outputNames)})`);for(let l=0;l<o.length;l++)v(o[l].shape[0]===a,()=>`Batch size mismatch: input ${n.inputNames[l]} has ${o[l].shape[0]}; expected  ${a} based on input ${n.inputNames[0]}.`);for(let l=0;l<i.length;l++)v(i[l].shape[0]===a,()=>`Batch size mismatch: output ${n.outputNames[l]} has ${i[l].shape[0]}; expected  ${a} based on input ${n.inputNames[0]}.`);return{xs:o,ys:i}}function yb(n,t,e){if(e instanceof mt)return[e];if(Array.isArray(e))return v(e.length===t.length,()=>`Received an array of ${e.length} Tensors, but expected ${t.length} to match the ${n} keys ${t}.`),e;{const s=[];for(const r of t){if(null==e[r])throw new B(`The feature data generated by the dataset lacks the required ${n} key '${r}'.`);s.push(e[r])}return s}}function Qf(){return(Qf=(0,q.Z)(function*(n,t,e){const s=null!=e.batchesPerEpoch;if(v(null!=n.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),v(null!=e,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),v(null!=e.epochs&&e.epochs>0&&Number.isInteger(e.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${e.epochs}`),v(!s||e.batchesPerEpoch>0&&Number.isInteger(e.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${e.batchesPerEpoch}`),v(null==e.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),n.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");n.isTraining=!0;try{const r=null!=e.validationData;let o,i;if(r)if(xb(e.validationData))v(null==e.validationBatches||e.validationBatches>0&&Number.isInteger(e.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${e.validationBatches}`);else{const m=function $R(n){if(3===n.length)throw new Pe("Validation with sample weights is not implemented yet.");return{xs:n[0],ys:n[1]}}(e.validationData);o=m.xs,i=m.ys}const a=n.makeTrainFunction(),l=n.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map(m=>"val_"+m)):l.slice();const c=sb(e.callbacks,e.yieldEvery),h=null==e.verbose?1:e.verbose,{callbackList:d,history:p}=rb(c,h,e.epochs,null,null,function OR(n,t){let e=null;return null!=t.batchesPerEpoch?e=t.batchesPerEpoch:Number.isFinite(n.size)&&(e=n.size),e}(t,e),null,r,u);d.setModel(n),n.history=p,yield d.onTrainBegin(),n.stopTraining_=!1;let f=null==e.initialEpoch?0:e.initialEpoch,g=yield t.iterator();for(;f<e.epochs;){const m={};yield d.onEpochBegin(f);let A=0,y=0;for(s||(g=yield t.iterator());!s||A<e.batchesPerEpoch;){const x=yield g.next();if(s&&x.done){console.warn(`You provided \`batchesPerEpoch\` as ${e.batchesPerEpoch}, but your dataset iterator ran out of data after ${A} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${e.batchesPerEpoch*e.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(null!=x.value){const{xs:b,ys:I}=Ab(n,x.value),S={};S.batch=y,S.size=b[0].shape[0],yield d.onBatchBegin(y,S);const k=[];if(null!=e.classWeight){const O=mb(e.classWeight,n.outputNames);for(let C=0;C<O.length;++C)k.push(yield gb(I[C],null,O[C]))}const E=b.concat(I).concat(k),D=a(E);ze(E);for(let O=0;O<l.length;++O){const T=D[O];S[l[O]]=T,en(T)}yield d.onBatchEnd(y,S),nb(S),y++,A++}if(s?A>=e.batchesPerEpoch:x.done){if(r){let b;b=xb(e.validationData)?gt(yield n.evaluateDataset(e.validationData,{batches:e.validationBatches})):gt(n.evaluate(o,i,{batchSize:null==e.validationBatchSize?32:e.validationBatchSize,verbose:0}));for(let I=0;I<n.metricsNames.length;++I)m[`val_${n.metricsNames[I]}`]=b[I]}break}if(n.stopTraining_)break}if(yield d.onEpochEnd(f,m),f++,n.stopTraining_)break}return yield d.onTrainEnd(),yield n.history.syncData(),n.history}finally{n.isTraining=!1}})).apply(this,arguments)}function xb(n){return"function"==typeof n.iterator}function Xf(){return(Xf=(0,q.Z)(function*(n,t,e){const s=null!=(e=e||{}).batches,r=n.testFunction;let o=[];if(e.verbose>0)throw new Pe("Verbose mode is not implemented yet.");v(!s||e.batches>0&&Number.isInteger(e.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(e.batches)}`);const i=function LR(n){return"function"==typeof n.next}(t)?t:yield t.iterator();let a=0,l=0;for(;!s||l<e.batches;){const u=yield i.next();if(o=U(()=>{if(u.value){const{xs:c,ys:h}=Ab(n,u.value),d=c.concat(h),p=U(()=>r(d));if(ze(d),0===l)for(let g=0;g<p.length;++g)o.push(ke(0));const f=d[0].shape[0];for(let g=0;g<p.length;++g){const m=p[g],A=o[g];o[g]=U(()=>ne(o[g],L(f,m))),l>0&&ze(A)}ze(p),a+=f,++l}return o}),u.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${e.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let u=0;u<o.length;++u){const c=o[u];o[u]=Se(o[u],a),ze(c)}return _n(o)})).apply(this,arguments)}function Zf(n){v(n>0&&Number.isInteger(n),()=>`batchSize is required to be a positive integer, but got ${n}`)}function Ka(n,t,e){return null==n?[null]:Array.isArray(n)?n.map(s=>co(s,t,e-t)):co(n,t,e-t)}function Yf(n,t){return U(()=>null==n?null:Array.isArray(n)?n.map(e=>Yf(e,t)):zx(n,"int32"===t.dtype?t:he(t,"int32")))}function Jf(n,t){const e=[];let s=0,r=null;for(;s<n;)r=s+t,r>=n&&(r=n),e.push([s,r]),s=r;return e}function bb(n){const t=[];n instanceof mt&&(n=[n]);for(let e=0;e<n.length;++e){const s=n[e];if(1===s.rank)t.push(za(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function vs(n,t){if(null==n)return;const e=[];if(t instanceof mt)e.push(t.id);else if(Array.isArray(t))t.forEach(r=>e.push(r.id));else if(null!=t)for(const r in t)e.push(t[r].id);const s=[];if(n instanceof mt)-1===e.indexOf(n.id)&&s.push(n);else if(Array.isArray(n))n.forEach(r=>{-1===e.indexOf(r.id)&&s.push(r)});else if(null!=n)for(const r in n){const o=n[r];-1===e.indexOf(o.id)&&s.push(o)}s.forEach(r=>{r.isDisposed||r.dispose()})}function em(n){return Array.isArray(n)}function wb(n){return!function MR(n){return n instanceof mt}(n)&&!em(n)}function Ib(n,t,e,s=!0,r=""){if(null==t||0===t.length){if(null!=n){let i=!1;if(em(n)&&n.length>0)i=!0;else if(wb(n)){for(const a in n)if(n.hasOwnProperty(a)){i=!0;break}}else i=!0;if(i)throw new B(`Error when checking model ${r} expected no data, but got ${n}`)}return[]}if(null==n)return t.map(i=>null);let o;if(wb(n)){o=[];for(const i of t){if(null==n[i])throw new B(`No data provided for "${i}". Need data for each key in: ${t}`);o.push(n[i])}}else if(em(n)){if(n.length!==t.length)throw new B(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${n}`);o=n}else{if(t.length>1)throw new B(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${n.shape}`);o=[n]}if(o=bb(o),null!=e)for(let i=0;i<t.length;++i){if(null==e[i])continue;const a=o[i];if(a.shape.length!==e[i].length)throw new B(`Error when checking ${r}: expected ${t[i]} to have ${e[i].length} dimension(s). but got array with shape ${a.shape}`);for(let l=0;l<e[i].length;++l){if(0===l&&!s)continue;const c=e[i][l];if(null!=c&&c>=0&&a.shape[l]!==c)throw new B(`${r} expected a batch of elements where each example has shape [${e[i].slice(1,e[i].length)}] (i.e.,tensor shape [*,${e[i].slice(1,e[i].length)}]) but the ${r} received an input with ${a.shape[0]} examples, each with shape [${a.shape.slice(1,a.shape.length)}] (tensor shape [${a.shape}])`)}}return o}function Cb(n,t,e,s=!0,r=""){let o;if(Array.isArray(n)){if(n.length!==t.length)throw new B(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${n.length} Tensors(s).`);o=n}else{if(t.length>1)throw new B(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(n.shape)}.`);o=[n]}if(null!=e)for(let i=0;i<t.length;++i){if(null==e[i])continue;const a=o[i];if(a.shape.length!==e[i].length)throw new B(`Error when checking ${r}: expected ${t[i]} to have ${e[i].length} dimension(s), but got array with shape ${JSON.stringify(a.shape)}`);for(let l=0;l<e[i].length;++l){if(0===l&&!s)continue;const c=e[i][l];if(null!=c&&c!==a.shape[l])throw new B(`Error when checking ${r}: expected ${t[i]} to have shape ${JSON.stringify(e[i])} but got array with shape ${JSON.stringify(a.shape)}.`)}}}let ei=(()=>{class n extends Cs{constructor(e){super(e),this.isTraining=!1}summary(e,s,r=console.log){if(!this.built)throw new B("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function NR(n,t,e,s=console.log){const r=function kR(n){let t=!0;const e=[],s=[];for(const r in n.nodesByDepth)e.push(n.nodesByDepth[r]);for(const r of e){if(r.length>1||1===r.length&&r[0].inboundLayers.length>1){t=!1;break}s.push(...r)}if(t)for(const r of n.layers){let o=!1;for(const i of r.inboundNodes)if(-1!==s.indexOf(i)){if(o){t=!1;break}o=!0}if(!t)break}return t}(n),o=["Layer (type)","Input Shape","Output shape","Param #"];let i;if(r?(t=t||90,e=e||[.32,.61,.89,1]):(t=t||115,e=e||[.24,.48,.7,.8,1]),e[e.length-1]<=1&&(e=e.map(c=>Math.floor(t*c))),!r){o.push("Receives inputs"),i=[];for(const c in n.nodesByDepth)i.push(...n.nodesByDepth[c])}s("_".repeat(t)),bc(o,e,s),s("=".repeat(t));const a=n.layers;for(let c=0;c<a.length;++c)r?ER(a[c],e,s):_R(a[c],e,i,s),s((c===a.length-1?"=":"_").repeat(t));n.checkTrainableWeightsConsistency();const l=function TR(n){let t;return t=lc(null!=n.collectedTrainableWeights?n.collectedTrainableWeights:n.trainableWeights),t}(n),u=lc(n.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}(this,e,s,r)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function SR(n){const t={Adagrad:()=>Xo.adagrad(.01),Adadelta:()=>Xo.adadelta(1,.95,jt()),Adam:()=>Xo.adam(.001,.9,.999,jt()),Adamax:()=>Xo.adamax(.002,.9,.999,jt(),0),RMSProp:()=>Xo.rmsprop(.001,.9,0,jt()),SGD:()=>Xo.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,n in t)return t[n]();throw new B(`Unknown Optimizer ${n}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Ar))throw new B("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let s=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new B(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);s=e.loss.map(l=>Wf(l))}else{const a=Wf(e.loss);this.outputs.forEach(l=>{s.push(a)})}else{e.loss=e.loss;for(const a in e.loss)if(-1===this.outputNames.indexOf(a))throw new B(`Unknown entry in loss dictionary: "${a}". Only expected the following keys: ${this.outputNames}`);for(const a of this.outputNames)null==e.loss[a]&&console.warn(`Output "${a}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${a} during training`),s.push(Wf(e.loss[a]))}this.lossFunctions=s,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let a=0;a<this.outputs.length;++a){const l=this.internalOutputShapes[a];this.feedOutputNames.push(this.outputNames[a]),this.feedOutputShapes.push(l),this.feedLossFns.push(this.lossFunctions[a])}const r=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],uo("loss",()=>{for(let a=0;a<this.outputs.length;++a)-1===r.indexOf(a)&&this.outputs.length>1&&(this.metricsTensors.push([this.lossFunctions[a],a]),this.metricsNames.push(this.outputNames[a]+"_loss"))});const o=function VR(n,t){if(null==n||Array.isArray(n)&&0===n.length)return t.map(s=>[]);let e;if("string"==typeof n||"function"==typeof n)e=[n];else{if(!Array.isArray(n)&&"object"!=typeof n)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${n}`);e=n}if(Array.isArray(e))return t.map(s=>e);{const s=[];for(const r of t){let o=e.hasOwnProperty(r)?e[r]:[];Array.isArray(o)||(o=[o]),s.push(o)}return s}}(e.metrics,this.outputNames),i=(a,l,u)=>{this.outputNames.length>1&&(l=this.outputNames[a]+"_"+l),this.metricsNames.push(l),this.metricsTensors.push([u,a])};uo("metric",()=>{for(let a=0;a<this.outputs.length;++a)-1===r.indexOf(a)&&(c=>{let d,p,f;for(const g of c){if("string"==typeof g&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(g)){const A=this.internalOutputShapes[a];let y;1===A[A.length-1]||this.lossFunctions[a]===gc?-1!==["accuracy","acc"].indexOf(g)?p=ib:-1!==["crossentropy","ce"].indexOf(g)&&(p=mR):this.lossFunctions[a]===mc?-1!==["accuracy","acc"].indexOf(g)?p=gR:-1!==["crossentropy","ce"].indexOf(g)&&(p=cb):-1!==["accuracy","acc"].indexOf(g)?p=ab:-1!==["crossentropy","ce"].indexOf(g)&&(p=ub),-1!==["accuracy","acc"].indexOf(g)?y="acc":-1!==["crossentropy","ce"].indexOf(g)&&(y="ce"),f=p,d=""+y}else f=vR(g),d=""+xc(g);let m;uo(d,()=>{m=f}),i(a,d,m)}})(o[a])}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,s,r={}){const o=null==r.batchSize?32:r.batchSize;Zf(o);const a=this.standardizeUserDataXY(e,s,!0,o);try{const l=a[0].concat(a[1]);return this.makeTestFunction(),_n(this.testLoop(this.testFunction,l,o,r.verbose,r.steps))}finally{vs(a[0],e),vs(a[1],s)}}evaluateDataset(e,s){var r=this;return(0,q.Z)(function*(){return r.makeTestFunction(),function PR(n,t,e){return Xf.apply(this,arguments)}(r,e,s)})()}checkNumSamples(e,s,r,o="steps"){let i;if(null!=r){if(i=null,null!=s)throw new B(`If ${o} is set, batchSize must be null or undefined.Got batchSize = ${s}`)}else{if(null==e)throw new B(`Either the input data should have a defined shape, or ${o} shoud be specified.`);i=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return i}execute(e,s){if(Array.isArray(s)&&0===s.length)throw new B("`outputs` is an empty Array, which is not allowed.");const r=Array.isArray(s),i=this.retrieveSymbolicTensors(r?s:[s]),a=new kr;if(e instanceof mt&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new B(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let u=0;u<this.inputs.length;++u)a.add(this.inputs[u],e[u])}else for(const u of this.inputs){const c=e[u.name];if(null==c)throw new B(`No value is provided for the model's input ${u.name}`);a.add(u,c)}const l=Wa(i,a);return r?l:l[0]}retrieveSymbolicTensors(e){const s=oo(null,e.length);let r=e.length;for(const o of this.layers){const i=Array.isArray(o.output)?o.output:[o.output],a=i.map(l=>l.name);for(let l=0;l<e.length;++l){const u=a.indexOf(e[l]);if(-1!==u&&(s[l]=i[u],r--),0===r)break}if(0===r)break}if(r>0){const o=[];throw s.forEach((i,a)=>{null==i&&o.push(e[a])}),new B(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(o)}`)}return s}predictLoop(e,s=32,r=!1){return U(()=>{const o=this.checkNumSamples(e);if(r)throw new Pe("Verbose predictLoop() is not implemented yet.");const i=Jf(o,s),a=this.outputs.map(l=>[]);for(let l=0;l<i.length;++l)U(()=>{const d=Ka(e,i[l][0],i[l][1]),p=[];if(Array.isArray(d))for(let g=0;g<d.length;++g)p.push({key:this.inputs[g],value:d[g]});else p.push({key:this.inputs[0],value:d});const f=new kr(p);return Wa(this.outputs,f)}).forEach((c,h)=>a[h].push(c));return _n(a.map(l=>zt(l,0)))})}predict(e,s={}){const r=bb(e);Cb(r,this.inputNames,this.feedInputShapes,!1);try{const o=null==s.batchSize?32:s.batchSize;return Zf(o),this.predictLoop(r,o)}finally{vs(r,e)}}predictOnBatch(e){Cb(e,this.inputNames,this.feedInputShapes,!0);const s=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,s)}standardizeUserDataXY(e,s,r=!0,o){if(null==this.optimizer_)throw new us("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const i=[];for(let a=0;a<this.feedOutputShapes.length;++a){const l=this.feedOutputShapes[a];i.push(this.feedLossFns[a]===mc?l.slice(0,l.length-1).concat([1]):l)}if(function BR(n,t,e){const s=Sr(n.map(o=>o.shape[0]));s.sort();const r=Sr(t.map(o=>o.shape[0]));if(r.sort(),s.length>1)throw new B(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(n.map(o=>o.shape))}`);if(r.length>1)throw new B(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map(o=>o.shape))}`);if(s.length>0&&r.length>0&&!Qe(s,r))throw new B(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=Ib(e,this.feedInputNames,this.feedInputShapes,!1,"input"),s=Ib(s,this.feedOutputNames,i,!1,"target")),function zR(n,t,e){const s=[fc,gc,Ha];for(let r=0;r<n.length;++r){const o=n[r],i=t[r],a=e[r];if(null!=i){if(i===Ha&&1===o.shape[o.shape.length-1])throw new B(`You are passing a target array of shape ${o.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const l=o.shape.slice(1),u=a.slice(1);for(let c=0;c<l.length;++c){const d=u[c];if(null!=d&&l[c]!==d)throw new B(`A target Tensor with shape ${o.shape} was passed for an output of shape ${a}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(s,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=o&&o>0&&e[0].shape[0]%o!=0)throw new B(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${o}. Found: ${e[0].shape[0]} sample(s).`);return[e,s]}standardizeUserData(e,s,r,o,i=!0,a){var l=this;return(0,q.Z)(function*(){const[u,c]=l.standardizeUserDataXY(e,s,i,a);if(null!=r)throw new Error("sample weight is not supported yet.");let h=null;if(null!=o){const d=mb(o,l.outputNames);h=[];for(let p=0;p<d.length;++p)h.push(yield gb(c[p],null,d[p]))}return[u,c,h]})()}testLoop(e,s,r,o=0,i){return U(()=>{const a=this.checkNumSamples(s,r,i,"steps"),l=[];if(o>0)throw new Pe("Verbose mode is not implemented yet.");if(null!=i)throw new Pe("steps mode in testLoop() is not implemented yet");{const u=Jf(a,r),c=mn(bs(0,a));for(let h=0;h<u.length;++h){const d=u[h][0],p=u[h][1],f=co(c,d,p-d),g=Yf(s,f),m=e(g);if(0===h)for(let A=0;A<m.length;++A)l.push(ke(0));for(let A=0;A<m.length;++A)l[A]=ne(l[A],L(p-d,m[A]))}for(let h=0;h<l.length;++h)l[h]=Se(l[h],a)}return l})}getDedupedMetricsNames(){const e=this.metricsNames,s=[];for(let r=0;r<e.length;++r){const o=e[r];let i=o;Ex(e,o)>1&&(i+=`_${Ex(e.slice(0,r),o)}`),s.push(i)}return s}makeTrainFunction(){return e=>{const s=[],r=e.slice(0,this.inputs.length),o=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],u=this.collectedTrainableWeights.map(d=>d.read());return[this.optimizer_.minimize(()=>{const d=[];for(let m=0;m<this.inputs.length;++m)d.push({key:this.inputs[m],value:r[m]});const p=new kr(d),f=Wa(this.outputs,p,{training:!0});let g;for(let m=0;m<this.lossFunctions.length;++m){let y=(0,this.lossFunctions[m])(o[m],f[m]);null!=i[m]&&(y=DR(y,i[m]));const x=Rt(y);s.push(x),g=0===m?y:ne(g,y)}for(let m=0;m<this.metricsTensors.length;++m){let A;if(this.outputs.length>1&&m<this.outputs.length)A=s[m];else{const x=this.metricsTensors[m][1];A=Rt((0,this.metricsTensors[m][0])(o[x],f[x]))}en(A),a.push(A)}return g=Rt(g),this.calculateLosses().forEach(m=>{g=ne(g,m)}),g},!0,u)].concat(a)}}makeTestFunction(){this.testFunction=e=>U(()=>{const s=[];let r;const o=e.slice(0,this.inputs.length),i=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let c=0;c<this.inputs.length;++c)a.push({key:this.inputs[c],value:o[c]});const l=new kr(a),u=Wa(this.outputs,l);for(let c=0;c<this.lossFunctions.length;++c){const d=Rt((0,this.lossFunctions[c])(i[c],u[c]));r=0===c?d:ne(r,d),s.push(r)}for(let c=0;c<this.metricsTensors.length;++c){const d=this.metricsTensors[c][1],p=Rt((0,this.metricsTensors[c][0])(i[d],u[d]));s.push(p)}return s})}fit(e,s,r={}){var o=this;return(0,q.Z)(function*(){if(o.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let i,a,l,u,c,h,d,p,f;o.isTraining=!0;try{const g=null==r.batchSize?32:r.batchSize;Zf(g);const m=!1,A=yield o.standardizeUserData(e,s,r.sampleWeight,r.classWeight,m,g);i=A[0],a=A[1],f=A[2];let x,y=!1;if(null!=r.validationData&&r.validationData.length>0){if(y=!0,2!==r.validationData.length)throw 3===r.validationData.length?new Pe("validationData including sample weights is not supported yet."):new B(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);c=r.validationData[0],h=r.validationData[1];const C=!0,T=yield o.standardizeUserData(c,h,null,null,C,g);d=T[0],p=T[1],x=d.concat(p)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){y=!0;const C=Math.floor(i[0].shape[0]*(1-r.validationSplit)),T=i[0].shape[0];d=Ka(i,C,T),l=i,i=Ka(i,0,C),p=Ka(a,C,T),u=a,a=Ka(a,0,C),x=d.concat(p)}else null!=r.validationSteps&&(y=!0);const b=i.concat(a).concat(f);o.checkTrainableWeightsConsistency();const I=o.makeTrainFunction(),S=o.getDedupedMetricsNames();let k,E;y?(o.makeTestFunction(),k=o.testFunction,E=S.slice().concat(S.map(C=>"val_"+C))):(k=null,x=[],E=S.slice());const D=sb(r.callbacks,r.yieldEvery);return yield o.fitLoop(I,b,S,g,r.epochs,r.verbose,D,k,x,r.shuffle,E,r.initialEpoch,null,null)}finally{o.isTraining=!1,vs(i,e),vs(a,s),vs(l,e),vs(u,s),vs(d,c),vs(p,h),null!=f&&ze(f)}})()}fitLoop(e,s,r,o,i,a,l,u,c,h,d,p,f,g){var m=this;return(0,q.Z)(function*(){null==o&&(o=32),null==i&&(i=1),null==h&&(h=!0),null==p&&(p=0);let A=!1;if(null!=u&&null!=c&&(A=!0),null!=g&&(A=!0,null==f))throw new B("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const y=m.checkNumSamples(s,o,f,"steps_per_epoch");let x;null!=y&&(x=bs(0,y)),null==a&&(a=1);const{callbackList:b,history:I}=rb(l,a,i,p,y,f,o,A,d);b.setModel(m),m.history=I,yield b.onTrainBegin(),m.stopTraining_=!1;for(let S=p;S<i;++S){yield b.onEpochBegin(S);const k={};if(null!=f)throw new Pe("stepsPerEpoch mode is not implemented yet.");{if("batch"===h)throw new Pe("batch shuffling is not implemneted yet");h&&xn(x);const E=mn(x),D=Jf(y,o);for(let O=0;O<D.length;++O){const C={};if(yield b.onBatchBegin(O,C),U(()=>{const T=D[O][0],_=D[O][1],P=co(E,T,_-T);C.batch=O,C.size=_-T;const z=Yf(s,P),V=e(z);for(let H=0;H<r.length;++H){const Z=V[H];C[r[H]]=Z,en(Z)}if(O===D.length-1&&A){const H=m.testLoop(u,c,o);for(let K=0;K<r.length;++K){const Z=r[K],ee=H[K];en(ee),k["val_"+Z]=ee}}}),yield b.onBatchEnd(O,C),nb(C),m.stopTraining_)break}E.dispose()}if(yield b.onEpochEnd(S,k),m.stopTraining_)break}return yield b.onTrainEnd(),yield m.history.syncData(),m.history})()}fitDataset(e,s){var r=this;return(0,q.Z)(function*(){return function FR(n,t,e){return Qf.apply(this,arguments)}(r,e,s)})()}trainOnBatch(e,s){var r=this;return(0,q.Z)(function*(){const o=yield r.standardizeUserData(e,s),i=o[0],a=o[1],u=r.makeTrainFunction()(i.concat(a)),c=[];for(const h of u){const d=yield h.data();c.push(d[0])}return ze(u),vs(o[0],e),vs(o[1],s),_n(c)})()}getNamedWeights(e){const s=[],r=null!=e&&e.trainableOnly,o=r?this.trainableWeights:this.weights,i=this.getWeights(r);for(let a=0;a<o.length;++a)r&&!o[a].trainable||s.push({name:o[a].originalName,tensor:i[a]});return s}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const s=Kd().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=s-Kd().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=er(this.loss);else if(Array.isArray(this.loss)){for(const s of this.loss)if("string"!=typeof s)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map(s=>er(s))}else{const s=Object.keys(this.loss);e={};const r=this.loss;for(const o of s){if("string"!=typeof r[o])throw new Error("Serialization of non-string loss is not supported.");e[o]=er(r[o])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[er(xc(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(e=>er(xc(e)));{const e={};for(const s in this.metrics)e[s]=er(xc(this.metrics[s]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const r=tr(Hf(e.optimizer_config));let o,i;if("string"==typeof e.loss)o=ao(e.loss);else if(Array.isArray(e.loss))o=e.loss.map(a=>ao(a));else if(null!=e.loss){o={};for(const a in e.loss)o[a]=ao(e.loss[a])}if(Array.isArray(e.metrics))i=e.metrics.map(a=>ao(a));else if(null!=e.metrics){i={};for(const a in e.metrics)i[a]=ao(e.metrics[a])}this.compile({loss:o,metrics:i,optimizer:r})}save(e,s){var r=this;return(0,q.Z)(function*(){if("string"==typeof e){const h=Jg(e);if(0===h.length)throw new B(`Cannot find any save handlers for URL '${e}'`);if(h.length>1)throw new B(`Found more than one (${h.length}) save handlers for URL '${e}'`);e=h[0]}if(null==e.save)throw new B("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const o=yield Rd(r.getNamedWeights(s)),u={modelTopology:r.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v4.10.0",convertedBy:null};if(null!=s&&s.includeOptimizer&&null!=r.optimizer){u.trainingConfig=r.getTrainingConfig();const h="optimizer",{data:d,specs:p}=yield Rd(yield r.optimizer.getWeights(),h);o.specs.push(...p),o.data=jg([o.data,d])}return null!=r.userDefinedMetadata&&(db(r.userDefinedMetadata,r.name,!0),u.userDefinedMetadata=r.userDefinedMetadata),u.weightData=o.data,u.weightSpecs=o.specs,e.save(u)})()}setUserDefinedMetadata(e){db(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}return n.className="Model",n})();se(ei),se((()=>{class n extends ei{}return n.className="Functional",n})()),se((()=>{class n extends ei{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:sc("sequential_"),null!=e.layers)for(const s of e.layers)this.add(s)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(r=>r<0))throw new B(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const s=e instanceof n||e instanceof ei;let r;if(s){if(r=e,1!==r.outputs.length)throw new B("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==r.inputs.length)throw new B("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new B("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const o=function HD(n){if(null==n.batchShape&&null==n.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=n.batchShape&&null!=n.shape)throw new B("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=n.batchShape;null!=n.shape&&null==t&&(t=[null].concat(n.shape));let e=n.dtype;return null==e&&(e="float32"),new cc({batchInputShape:t,name:n.name,dtype:e,sparse:n.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(o)}if(s)this.outputs=r.outputs,this.inputs=r.inputs;else{if(1!==e.inboundNodes.length)throw new B(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new B("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=Yx(this.outputs[0])}this.inboundNodes=[],new uc({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:oo(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(o=>o.shape),outputShapes:this.outputs[0].shape})}else{const o=e.apply(this.outputs[0]);if(Array.isArray(o))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[o],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,s){return null==this.model&&this.build(),this.model.call(e,s)}build(e){if(nt(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new ei({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,s,r=console.log){this.built||this.build(),super.summary(e,s,r)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,s,r={}){if(!this.built)throw new us("The model needs to be compiled before being used.");return this.model.evaluate(e,s,r)}evaluateDataset(e,s){var r=this;return(0,q.Z)(function*(){if(!r.built)throw new us("The model needs to be compiled before being used.");return r.model.evaluateDataset(e,s)})()}predict(e,s={}){return null==this.model&&this.build(),this.model.predict(e,s)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}fit(e,s,r={}){var o=this;return(0,q.Z)(function*(){if(!o.built)throw new us("The model needs to be compiled before being used.");return o.model.fit(e,s,r)})()}fitDataset(e,s){var r=this;return(0,q.Z)(function*(){if(!r.built)throw new us("The model needs to be compiled before being used.");return r.model.fitDataset(e,s)})()}trainOnBatch(e,s){var r=this;return(0,q.Z)(function*(){return r.model.trainOnBatch(e,s)})()}static fromConfig(e,s,r={},o=!1){let i,a={};if(s instanceof Array){if(null==s[0].className||"Merge"===s[0].className)throw new B("Legacy serialization format not supported yet.");i=s}else v(null!=s.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),i=s.layers,delete s.layers,a=s;const l=new e(a);if(!(l instanceof n))throw new Pe(`Sequential.fromConfig called on non-Sequential input: ${l}`);for(const u of i){const h=tr(u,void 0,o);o&&h.setFastWeightInitDuringBuild(!0),l.add(h)}return l}set stopTraining(e){if(null==this.model)throw new B("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new B("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const s of this.layers){const r={};r.className=s.getClassName(),r.config=s.getConfig(),e.push(r)}return{name:this.name,layers:e}}}return n.className="Sequential",n})());class Dn extends Mo{getConfig(){return{}}}se((()=>{class n extends Dn{apply(e,s=1){return function RD(n,t=1){if(1!==t)throw new Pe(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return Sa(n)}(e,s)}}return n.className="elu",n})()),se((()=>{class n extends Dn{apply(e){return Rp(e)}}return n.className="selu",n})()),se((()=>{class n extends Dn{apply(e){return Fs(e)}}return n.className="relu",n})()),se((()=>{class n extends Dn{apply(e){return U(()=>to(6,Fs(e)))}}return n.className="relu6",n})()),se((()=>{class n extends Dn{apply(e){return e}}return n.className="linear",n})()),se((()=>{class n extends Dn{apply(e){return Rs(e)}}return n.className="sigmoid",n})()),se((()=>{class n extends Dn{apply(e){return function FD(n){return U(()=>{const t=ne(.5,L(.2,n));return On(t,0,1)})}(e)}}return n.className="hardSigmoid",n})()),se((()=>{class n extends Dn{apply(e){return Ho(e)}}return n.className="softplus",n})()),se((()=>{class n extends Dn{apply(e){return function $D(n){return U(()=>Se(n,ne(Ht(n),1)))}(e)}}return n.className="softsign",n})()),se((()=>{class n extends Dn{apply(e){return Uo(e)}}return n.className="tanh",n})());let vb=(()=>{class n extends Dn{apply(e,s=-1){return Hu(e,s)}}return n.className="softmax",n})();function _r(n){return n.getClassName()}function rm(n,t={}){return Ma(n,rs.getMap().classNameMap,t,"activation")}function Dr(n){if(null==n){return rm({className:"linear",config:{}})}if("string"==typeof n){const t={};return t.className=n,t.config={},rm(t)}return n instanceof Dn?n:rm(n)}se(vb),se((()=>{class n extends Dn{apply(e,s=-1){return wp(e,s)}}return n.className="logSoftmax",n})()),se((()=>{class n extends Dn{apply(e,s=1){return U(()=>L(Rs(L(e,s)),e))}}return n.className="swish",n})()),se((()=>{class n extends Dn{apply(e){return U(()=>L(e,Uo(Ho(e))))}}return n.className="mish",n})());class Sb extends Mo{}se((()=>{class n extends Sb{constructor(e){super(),function om(n){if(null!=n&&"object"!=typeof n)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${n}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return U(()=>{let s=qt([1]);return this.hasL1&&(s=ne(s,we(L(this.l1,Ht(e))))),this.hasL2&&(s=ne(s,we(L(this.l2,Va(e))))),M(s,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,s){return new e({l1:s.l1,l2:s.l2})}}return n.className="L1L2",n})());const Nb={l1l2:"L1L2"};function pt(n){return Ef(n)}function Tb(n,t={}){return Ma(n,rs.getMap().classNameMap,t,"regularizer")}function Ct(n){return null==n?null:"string"==typeof n?Tb({className:n in Nb?Nb[n]:n,config:{}}):n instanceof Sb?n:Tb(n)}function ti(n,t,e){if("number"==typeof n)return oo(n,t);if(n.length!==t)throw new B(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${n.length} elements.`);for(let s=0;s<t;++s){const r=n[s];if(!ND(r))throw new B(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(n)} including a non-integer number ${r}`)}return n}function Ss(n,t,e,s,r=1){if(null==n)return n;let i;return i="same"===e?n:n-(t+(t-1)*(r-1))+1,Math.floor((i+s-1)/s)}function Ws(n,t,e,s){if(null==n)return null;if("valid"===s)n=n*t+Tr([e-t,0]);else{if("same"!==s)throw new B(`Unsupport padding mode: ${s}.`);n*=t}return n}function am(n,t){return U(()=>(Pt(t),"channelsFirst"===t?Je(n,[0,2,3,1]):n))}function kb(n,t){return U(()=>(Pt(t),"channelsFirst"===t?Je(n,[0,2,3,4,1]):n))}function lm(n,t,e,s=[1,1],r="valid",o,i,a=null){return U(()=>{if(null==o&&(o="channelsLast"),Pt(o),3!==n.rank&&4!==n.rank)throw new B(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${n.rank}.`);if(3!==t.rank&&4!==t.rank)throw new B(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${n.rank}.`);let l=am(n,o);if("causal"===r)throw new Pe("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=Ly({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:i,dataFormat:"NHWC",bias:e,activation:a}),"channelsFirst"===o&&(l=Je(l,[0,3,1,2])),l})}se((()=>{class n extends He{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,s){e=$e(e);let r=Fs(e);return null!=this.maxValue&&(r=On(r,0,this.maxValue)),r}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ReLU",n})()),se((()=>{class n extends He{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,s){const r=$e(e);return Fu(r,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},s=super.getConfig();return Object.assign(e,s),e}}return n.className="LeakyReLU",n})()),se((()=>{class n extends He{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=It(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Ct(e.alphaRegularizer),this.alphaConstraint=Zt(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new B(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const s=(e=nt(e)).slice(1);if(null!=this.sharedAxes)for(const o of this.sharedAxes)s[o-1]=1;this.alpha=this.addWeight("alpha",s,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const r={};if(null!=this.sharedAxes)for(let o=1;o<e.length;++o)r[o]=e[o];this.inputSpec=[new Qt({ndim:e.length,axes:r})],this.built=!0}call(e,s){return e=$e(e),Vu(e,this.alpha.read())}getConfig(){const e={alphaInitializer:kt(this.alphaInitializer),alphaRegularizer:pt(this.alphaRegularizer),alphaConstraint:Xt(this.alphaConstraint),sharedAxes:this.sharedAxes},s=super.getConfig();return Object.assign(e,s),e}}return n.className="PReLU",n})()),se((()=>{class n extends He{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new Pe(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,s){const r=$e(e);return Sa(r)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ELU",n})()),se((()=>{class n extends He{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,s){const r=$e(e);return L(r,he(En(r,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ThresholdedReLU",n})()),se((()=>{class n extends He{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new vb).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,s){const r=$e(e);return this.softmax(r,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Softmax",n})());class wc extends He{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",wc.verifyArgs(e),this.rank=t,sn(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Pe(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=ti(e.kernelSize,t,"kernelSize"),this.strides=ti(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,Zn(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Pt(this.dataFormat),this.activation=Dr(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=It(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Zt(e.biasConstraint),this.biasRegularizer=Ct(e.biasRegularizer),this.activityRegularizer=Ct(e.activityRegularizer),this.dilationRate=ti(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new B(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new B(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new B(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(t){if(Xn("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!Df(t.kernelSize,"number",1,3))throw new B(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:_r(this.activation),useBias:this.useBias,biasInitializer:kt(this.biasInitializer),biasRegularizer:pt(this.biasRegularizer),activityRegularizer:pt(this.activityRegularizer),biasConstraint:Xt(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class ni extends wc{constructor(t,e){super(t,e),this.kernel=null,ni.verifyArgs(e),this.filters=e.filters,sn(this.filters,"filters"),this.kernelInitializer=It(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Zt(e.kernelConstraint),this.kernelRegularizer=Ct(e.kernelRegularizer)}build(t){t=nt(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new B(`The channel dimension of the input should be defined. Found ${t[e]}`);const s=t[e],r=this.kernelSize.concat([s,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:s}}],this.built=!0}call(t,e){return U(()=>{let s;t=$e(t);const r=null==this.bias?null:this.bias.read(),o=Dx(this.activation.getClassName());if(null!=o&&2===this.rank)s=lm(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate,o);else{if(1===this.rank)s=function Eb(n,t,e,s=1,r="valid",o,i=1){return U(()=>{if(null==o&&(o="channelsLast"),Pt(o),3!==n.shape.length)throw new B(`The input of a conv1dWithBias operation should be 3, but is ${n.shape.length} instead.`);if(3!==t.shape.length)throw new B(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=e&&1!==e.shape.length)throw new B(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===o&&(n=Je(n,[0,2,1])),"causal"===r)throw new Pe("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let a=pp(n,t,s,"same"===r?"same":"valid","NWC",i);return null!=e&&(a=Is(a,e)),a})}(t,this.kernel.read(),r,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)s=lm(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Pe("convolutions greater than 3D are not implemented yet.");s=function _b(n,t,e,s=[1,1,1],r="valid",o,i){return U(()=>{if(null==o&&(o="channelsLast"),Pt(o),4!==n.rank&&5!==n.rank)throw new B(`conv3dWithBias expects input to be of rank 4 or 5, but received ${n.rank}.`);if(4!==t.rank&&5!==t.rank)throw new B(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${n.rank}.`);let a=kb(n,o);if("causal"===r)throw new Pe("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return a=ny(a,t,s,"same"===r?"same":"valid","NDHWC",i),null!=e&&(a=Is(a,e)),"channelsFirst"===o&&(a=Je(a,[0,4,1,2,3])),a})}(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(s=this.activation.apply(s))}return s})}computeOutputShape(t){t=nt(t);const e=[],s="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let o=0;o<s.length;++o){const i=Ss(s[o],this.kernelSize[o],this.padding,this.strides[o],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[o]);e.push(i)}let r=[t[0]];return"channelsLast"===this.dataFormat?(r=r.concat(e),r.push(this.filters)):(r.push(this.filters),r=r.concat(e)),r}getConfig(){const t={filters:this.filters,kernelInitializer:kt(this.kernelInitializer),kernelRegularizer:pt(this.kernelRegularizer),kernelConstraint:Xt(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new B(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`)}}let Db=(()=>{class n extends ni{constructor(e){super(2,e),n.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Df(e.kernelSize,"number",1,2))throw new B(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv2D",n})();se(Db);let Rb=(()=>{class n extends ni{constructor(e){super(3,e),n.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new B(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv3D",n})();se(Rb),se((()=>{class n extends Db{constructor(e){if(super(e),this.inputSpec=[new Qt({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new B(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=nt(e)).length)throw new B("Input should have rank 4; Received input shape: "+JSON.stringify(e));const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s])throw new B("The channel dimension of the inputs should be defined. Found `None`.");const r=e[s],o=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",o,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Qt({ndim:4,axes:{[s]:r}})],this.built=!0}call(e,s){return U(()=>{let r=$e(e);if(4!==r.shape.length)throw new B(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);const o=r.shape;let a,l;"channelsFirst"===this.dataFormat?(a=2,l=3):(a=1,l=2);const c=o[l],d=this.kernelSize[1],f=this.strides[1],A=[o[0],Ws(o[a],this.strides[0],this.kernelSize[0],this.padding),Ws(c,f,d,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(r=Je(r,[0,2,3,1]));let y=mp(r,this.kernel.read(),A,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(y=Je(y,[0,3,1,2])),null!=this.bias&&(y=Is(y,this.bias.read(),this.dataFormat)),null!=this.activation&&(y=this.activation.apply(y)),y})}computeOutputShape(e){const s=(e=nt(e)).slice();let r,o,i;"channelsFirst"===this.dataFormat?(r=1,o=2,i=3):(r=3,o=1,i=2);const a=this.kernelSize[0],l=this.kernelSize[1],u=this.strides[0],c=this.strides[1];return s[r]=this.filters,s[o]=Ws(s[o],u,a,this.padding),s[i]=Ws(s[i],c,l,this.padding),s}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}return n.className="Conv2DTranspose",n})()),se((()=>{class n extends Rb{constructor(e){if(super(e),this.inputSpec=[new Qt({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new B(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=nt(e)).length)throw new B("Input should have rank 5; Received input shape: "+JSON.stringify(e));const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s])throw new B("The channel dimension of the inputs should be defined. Found `None`.");const r=e[s],o=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",o,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Qt({ndim:5,axes:{[s]:r}})],this.built=!0}call(e,s){return U(()=>{let r=$e(e);if(5!==r.shape.length)throw new B(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);const o=r.shape;let a,l,u;"channelsFirst"===this.dataFormat?(u=2,a=3,l=4):(u=1,a=2,l=3);const h=o[a],d=o[l],f=this.kernelSize[1],g=this.kernelSize[2],A=this.strides[1],y=this.strides[2],S=[o[0],Ws(o[u],this.strides[0],this.kernelSize[0],this.padding),Ws(h,A,f,this.padding),Ws(d,y,g,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(r=Je(r,[0,2,3,4,1]));let k=ry(r,this.kernel.read(),S,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(k=Je(k,[0,4,1,2,3])),null!==this.bias&&(k=Is(k,this.bias.read(),this.dataFormat)),null!==this.activation&&(k=this.activation.apply(k)),k})}computeOutputShape(e){const s=(e=nt(e)).slice();let r,o,i,a;"channelsFirst"===this.dataFormat?(r=1,o=2,i=3,a=4):(r=4,o=1,i=2,a=3);const l=this.kernelSize[0],u=this.kernelSize[1],c=this.kernelSize[2],h=this.strides[0],d=this.strides[1],p=this.strides[2];return s[r]=this.filters,s[o]=Ws(s[o],h,l,this.padding),s[i]=Ws(s[i],d,u,this.padding),s[a]=Ws(s[a],p,c,this.padding),s}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}return n.className="Conv3DTranspose",n})());let HR=(()=>{class n extends ni{constructor(e,s){if(super(e,s),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==s.filters)throw new B("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=s.kernelInitializer||null!=s.kernelRegularizer||null!=s.kernelConstraint)throw new B("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=s.padding&&"same"!==s.padding&&"valid"!==s.padding)throw new B(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(s.padding)}`);this.depthMultiplier=null==s.depthMultiplier?1:s.depthMultiplier,this.depthwiseInitializer=It(s.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Ct(s.depthwiseRegularizer),this.depthwiseConstraint=Zt(s.depthwiseConstraint),this.pointwiseInitializer=It(s.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Ct(s.pointwiseRegularizer),this.pointwiseConstraint=Zt(s.pointwiseConstraint)}build(e){if((e=nt(e)).length<this.rank+2)throw new B(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s]||e[s]<0)throw new B(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[s])}`);const r=e[s],o=this.kernelSize.concat([r,this.depthMultiplier]),i=[];for(let l=0;l<this.rank;++l)i.push(1);i.push(r*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",o,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",i,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):null,this.inputSpec=[new Qt({ndim:this.rank+2,axes:{[s]:r}})],this.built=!0}call(e,s){return U(()=>{let r;if(e=$e(e),1===this.rank)throw new Pe("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=Je(e,[0,2,3,1])),r=$p(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(r=Is(r,this.bias.read(),this.dataFormat)),null!=this.activation&&(r=this.activation.apply(r)),"channelsFirst"===this.dataFormat&&(r=Je(r,[0,3,1,2])),r})}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=kt(this.depthwiseInitializer),e.pointwiseInitializer=kt(this.pointwiseInitializer),e.depthwiseRegularizer=pt(this.depthwiseRegularizer),e.pointwiseRegularizer=pt(this.pointwiseRegularizer),e.depthwiseConstraint=Xt(this.depthwiseConstraint),e.pointwiseConstraint=Xt(this.pointwiseConstraint),e}}return n.className="SeparableConv",n})();function $b(n,t,e,s){if(Array.isArray(n)){if(null!=t||null!=e)throw new B("When inputs is an array, neither initialState or constants should be provided");null!=s&&(e=n.slice(n.length-s,n.length),n=n.slice(0,n.length-s)),n.length>1&&(t=n.slice(1,n.length)),n=n[0]}function r(o){return null==o||Array.isArray(o)?o:[o]}return{inputs:n,initialState:t=r(t),constants:e=r(e)}}function Fb(n,t,e,s=!1,r,o,i=!1,a=!1){return U(()=>{const l=t.shape.length;if(l<3)throw new B(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(bs(2,l));if(t=Je(t,u),null!=o)throw new Pe("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=he(he(r,"bool"),"float32")).rank===l-1&&(r=Cn(r,-1)),r=Je(r,u)),s&&(t=as(t,0),null!=r&&(r=as(r,0)));const c=[];let h,d=e;const p=t.shape[0],f=ls(t);let g,m;null!=r&&(g=ls(r));for(let A=0;A<p;++A){const y=f[A],x=U(()=>n(y,d));if(null==r)h=x[0],d=x[1];else{const b=U(()=>{const I=g[A],S=xe(jn(I),I);return{output:ne(L(x[0],I),L(d[0],S)),newStates:d.map((D,O)=>ne(L(x[1][O],I),L(D,S)))}});h=b.output,d=b.newStates}a&&c.push(h)}return a&&(m=Qn(c,1)),[h,m,d]})}se((()=>{class n extends HR{constructor(e){super(2,e)}}return n.className="SeparableConv2D",n})()),se((()=>{class n extends ni{constructor(e){super(1,e),n.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Df(e.kernelSize,"number",1,1))throw new B(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv1D",n})()),se((()=>{class n extends He{constructor(e){super(e),this.cropping="number"==typeof e.cropping?[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,s){return U(()=>{if(e=$e(e),"channelsLast"===this.dataFormat){const r=oc(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return oc(r,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const r=oc(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return oc(r,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Cropping2D",n})()),se((()=>{class n extends He{constructor(e){super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Pt(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,function CD(n){lo(xD,"InterpolationFormat",n)}(this.interpolation)}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],null==e[2]?null:this.size[0]*e[2],null==e[3]?null:this.size[1]*e[3]]:[e[0],null==e[1]?null:this.size[0]*e[1],null==e[2]?null:this.size[1]*e[2],e[3]]}call(e,s){return U(()=>{let r=$e(e);const o=r.shape;if("channelsFirst"===this.dataFormat){r=Je(r,[0,2,3,1]);const i=this.size[0]*o[2],a=this.size[1]*o[3],l="nearest"===this.interpolation?Os.resizeNearestNeighbor(r,[i,a]):Os.resizeBilinear(r,[i,a]);return Je(l,[0,3,1,2])}{const i=this.size[0]*o[1],a=this.size[1]*o[2];return"nearest"===this.interpolation?Os.resizeNearestNeighbor(r,[i,a]):Os.resizeBilinear(r,[i,a])}})}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},s=super.getConfig();return Object.assign(e,s),e}}return n.className="UpSampling2D",n})()),se((()=>{class n extends wc{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=It(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Zt(e.depthwiseConstraint),this.depthwiseRegularizer=Ct(e.depthwiseRegularizer)}build(e){if((e=nt(e)).length<4)throw new B(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const s="channelsFirst"===this.dataFormat?1:3;if(null==e[s]||e[s]<0)throw new B(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[s]}).`);const r=e[s];this.depthwiseKernel=this.addWeight("depthwise_kernel",[this.kernelSize[0],this.kernelSize[1],r,this.depthMultiplier],null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[r*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return U(()=>{let r=function KR(n,t,e=[1,1],s="valid",r,o){return U(()=>{null==r&&(r="channelsLast"),Pt(r);let i=am(n,r);if(4!==n.rank)throw new B(`Input for depthwiseConv2d is required to be 4-D, but is instead ${n.rank}-D`);if(4!==t.rank)throw new B(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=va(i,t,e,"same"===s?"same":"valid","NHWC",o),"channelsFirst"===r&&(i=Je(i,[0,3,1,2])),i})}(e=$e(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(r=Is(r,this.bias.read(),this.dataFormat)),null!=this.activation&&(r=this.activation.apply(r)),r})}computeOutputShape(e){e=nt(e);const r="channelsFirst"===this.dataFormat?e[3]:e[2],o="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,i=Ss("channelsFirst"===this.dataFormat?e[2]:e[1],this.kernelSize[0],this.padding,this.strides[0]),a=Ss(r,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],o,i,a]:[e[0],i,a,o]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=kt(this.depthwiseInitializer),e.depthwiseRegularizer=pt(this.depthwiseRegularizer),e.depthwiseConstraint=Xt(this.depthwiseRegularizer),e}}return n.className="DepthwiseConv2D",n})());let qa=(()=>{class n extends He{constructor(e){let s;if(super(e),null==e.cell)throw new B("cell property is missing for the constructor of RNN.");if(s=Array.isArray(e.cell)?new Pb({cells:e.cell}):e.cell,null==s.stateSize)throw new B("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=s,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new Qt({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?bs(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(s=>null):this.states_}setStates(e){this.states_=e}computeOutputShape(e){Lf(e)&&(e=e[0]);let s=this.cell.stateSize;Array.isArray(s)||(s=[s]);const r=s[0];let o;if(o=this.returnSequences?[e[0],e[1],r]:[e[0],r],this.returnState){const i=[];for(const a of s)i.push([e[0],a]);return[o].concat(i)}return o}computeMask(e,s){return U(()=>{Array.isArray(s)&&(s=s[0]);const r=this.returnSequences?s:null;if(this.returnState){const o=this.states.map(i=>null);return[r].concat(o)}return r})}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,s=[];for(let r=0;r<e;++r)s.push(null);return s}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new Pe("Constants support is not implemented in RNN yet.");Lf(e)&&(e=e[0]);const r=this.stateful?e[0]:null,o=e.slice(2);this.inputSpec[0]=new Qt({shape:[r,null,...o]});const i=[e[0]].concat(e.slice(2));let a;if(this.cell.build(i),a=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!Qe(this.stateSpec.map(l=>l.shape[l.shape.length-1]),a))throw new B(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=a.map(l=>new Qt({shape:[null,l]}));this.stateful&&this.resetStates()}resetStates(e,s=!1){U(()=>{if(!this.stateful)throw new Ms("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape[0];if(null==r)throw new B("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(o=>qt([r,o])):[qt([r,this.cell.stateSize])];else if(null==e)ze(this.states_),null!=this.keptStates&&(ze(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(o=>qt([r,o])):this.states_[0]=qt([r,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new B(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===s?this.keptStates.push(this.states_.slice()):ze(this.states_);for(let o=0;o<this.states_.length;++o){const i=e[o],a=Array.isArray(this.cell.stateSize)?this.cell.stateSize[o]:this.cell.stateSize,l=[r,a];if(!Qe(i.shape,l))throw new B(`State ${o} is incompatible with layer ${this.name}: expected shape=${l}, received shape=${i.shape}`);this.states_[o]=i}}this.states_=this.states_.map(o=>en(o.clone()))})}apply(e,s){let r=null==s?null:s.initialState,o=null==s?null:s.constants;null==s&&(s={});const i=$b(e,r,o,this.numConstants);e=i.inputs,r=i.initialState,o=i.constants;let a=[],l=[];if(null!=r){s.initialState=r,a=a.concat(r),this.stateSpec=[];for(const c of r)this.stateSpec.push(new Qt({shape:c.shape}));l=l.concat(this.stateSpec)}if(null!=o&&(s.constants=o,a=a.concat(o),this.numConstants=o.length),a[0]instanceof Us){const c=[e].concat(a),h=this.inputSpec.concat(l),d=this.inputSpec;this.inputSpec=h;const p=super.apply(c,s);return this.inputSpec=d,p}return super.apply(e,s)}call(e,s){return U(()=>{const r=null==s?null:s.mask,o=null==s?null:s.training;let i=null==s?null:s.initialState;e=$e(e),null==i&&(i=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(i.length!==a)throw new B(`RNN Layer has ${a} state(s) but was passed ${i.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const l={training:o},c=Fb((g,m)=>{const A=this.cell.call([g].concat(m),l);return[A[0],A.slice(1)]},e,i,this.goBackwards,r,null,this.unroll,this.returnSequences),h=c[0],d=c[1],p=c[2];this.stateful&&this.resetStates(p,o);const f=this.returnSequences?d:h;return this.returnState?[f].concat(p):f})}getInitialState(e){return U(()=>{let s=qt(e.shape);return s=we(s,[1,2]),s=za(s),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(r=>r>1?Ff(s,[1,r]):s):this.cell.stateSize>1?[Ff(s,[1,this.cell.stateSize])]:[s]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),s={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(s.numConstants=this.numConstants);const r=this.cell.getConfig();return this.getClassName()===n.className&&(s.cell={className:this.cell.getClassName(),config:r}),Object.assign(Object.assign(Object.assign({},r),e),s)}static fromConfig(e,s,r={}){const i=tr(s.cell,r);return new e(Object.assign(s,{cell:i}))}}return n.className="RNN",n})();se(qa);class Ic extends He{}let Ob=(()=>{class n extends Ic{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,sn(this.units,"units"),this.activation=Dr(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=It(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=It(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=It(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Ct(e.kernelRegularizer),this.recurrentRegularizer=Ct(e.recurrentRegularizer),this.biasRegularizer=Ct(e.biasRegularizer),this.kernelConstraint=Zt(e.kernelConstraint),this.recurrentConstraint=Zt(e.recurrentConstraint),this.biasConstraint=Zt(e.biasConstraint),this.dropout=Yo([1,Tr([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Yo([1,Tr([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=nt(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return U(()=>{if(2!==e.length)throw new B(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let r=e[1];e=e[0];const o=null!=s.training&&s.training;let i;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Rr({ones:()=>jn(e),rate:this.dropout,training:o,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Rr({ones:()=>jn(r),rate:this.recurrentDropout,training:o,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,l=this.recurrentDropoutMask;i=zs(null!=a?L(e,a):e,this.kernel.read()),null!=this.bias&&(i=Is(i,this.bias.read())),null!=l&&(r=L(r,l));let u=ne(i,zs(r,this.recurrentKernel.read()));return null!=this.activation&&(u=this.activation.apply(u)),[u,u]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:_r(this.activation),useBias:this.useBias,kernelInitializer:kt(this.kernelInitializer),recurrentInitializer:kt(this.recurrentInitializer),biasInitializer:kt(this.biasInitializer),kernelRegularizer:pt(this.kernelRegularizer),recurrentRegularizer:pt(this.recurrentRegularizer),biasRegularizer:pt(this.biasRegularizer),activityRegularizer:pt(this.activityRegularizer),kernelConstraint:Xt(this.kernelConstraint),recurrentConstraint:Xt(this.recurrentConstraint),biasConstraint:Xt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),s)}}return n.className="SimpleRNNCell",n})();se(Ob),se((()=>{class n extends qa{constructor(e){e.cell=new Ob(e),super(e)}call(e,s){return U(()=>(null!=this.cell.dropoutMask&&(ze(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ze(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return new e(s)}}return n.className="SimpleRNN",n})());let Lb=(()=>{class n extends Ic{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new B("GRUCell does not support reset_after parameter set to true.");this.units=e.units,sn(this.units,"units"),this.activation=Dr(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Dr(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=It(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=It(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=It(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Ct(e.kernelRegularizer),this.recurrentRegularizer=Ct(e.recurrentRegularizer),this.biasRegularizer=Ct(e.biasRegularizer),this.kernelConstraint=Zt(e.kernelConstraint),this.recurrentConstraint=Zt(e.recurrentConstraint),this.biasConstraint=Zt(e.biasConstraint),this.dropout=Yo([1,Tr([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Yo([1,Tr([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=nt(e),this.kernel=this.addWeight("kernel",[e[e.length-1],3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return U(()=>{if(2!==e.length)throw new B(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const r=null!=s.training&&s.training;let o=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Rr({ones:()=>jn(e),rate:this.dropout,training:r,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Rr({ones:()=>jn(o),rate:this.recurrentDropout,training:r,count:3,dropoutFunc:this.dropoutFunc}));const a=this.recurrentDropoutMask;let l,u,c;0<this.dropout&&this.dropout<1&&(e=L(e,this.dropoutMask[0]));let h=zs(e,this.kernel.read());this.useBias&&(h=Is(h,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(o=L(o,a[0]));const d=this.recurrentKernel.read(),[p,f]=Ln(d,[2*this.units,this.units],d.rank-1),g=zs(o,p),[m,A,y]=Ln(h,3,h.rank-1),[x,b]=Ln(g,2,g.rank-1);l=this.recurrentActivation.apply(ne(m,x)),u=this.recurrentActivation.apply(ne(A,b));const I=zs(L(u,o),f);c=this.activation.apply(ne(y,I));const S=ne(L(l,o),L(ne(1,bt(l)),c));return[S,S]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:_r(this.activation),recurrentActivation:_r(this.recurrentActivation),useBias:this.useBias,kernelInitializer:kt(this.kernelInitializer),recurrentInitializer:kt(this.recurrentInitializer),biasInitializer:kt(this.biasInitializer),kernelRegularizer:pt(this.kernelRegularizer),recurrentRegularizer:pt(this.recurrentRegularizer),biasRegularizer:pt(this.biasRegularizer),activityRegularizer:pt(this.activityRegularizer),kernelConstraint:Xt(this.kernelConstraint),recurrentConstraint:Xt(this.recurrentConstraint),biasConstraint:Xt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),s)}}return n.className="GRUCell",n})();se(Lb),se((()=>{class n extends qa{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Lb(e),super(e)}call(e,s){return U(()=>(null!=this.cell.dropoutMask&&(ze(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ze(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return 0===s.implmentation&&(s.implementation=1),new e(s)}}return n.className="GRU",n})());let um=(()=>{class n extends Ic{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,sn(this.units,"units"),this.activation=Dr(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Dr(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=It(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=It(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=It(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=Ct(e.kernelRegularizer),this.recurrentRegularizer=Ct(e.recurrentRegularizer),this.biasRegularizer=Ct(e.biasRegularizer),this.kernelConstraint=Zt(e.kernelConstraint),this.recurrentConstraint=Zt(e.recurrentConstraint),this.biasConstraint=Zt(e.biasConstraint),this.dropout=Yo([1,Tr([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Yo([1,Tr([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var s;let o;if(e=nt(e),this.kernel=this.addWeight("kernel",[e[e.length-1],4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const i=this.biasInitializer,a=this.units;o=new((s=class extends hs{apply(u,c){const h=i.apply([a]),d=(new Ux).apply([a]),p=i.apply([2*a]);return Bx(Bx(h,d),p)}}).className="CustomInit",s)}else o=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,o,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,s){return U(()=>{const r=null!=s.training&&s.training;if(3!==e.length)throw new B(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let o=e[1];const i=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Rr({ones:()=>jn(e),rate:this.dropout,training:r,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Rr({ones:()=>jn(o),rate:this.recurrentDropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const l=this.recurrentDropoutMask;let u,c,h,d;0<this.dropout&&this.dropout<1&&(e=L(e,this.dropoutMask[0]));let p=zs(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(o=L(o,l[0])),p=ne(p,zs(o,this.recurrentKernel.read())),this.useBias&&(p=Is(p,this.bias.read()));const[f,g,m,A]=Ln(p,4,p.rank-1);u=this.recurrentActivation.apply(f),c=this.recurrentActivation.apply(g),h=ne(L(c,i),L(u,this.activation.apply(m))),d=this.recurrentActivation.apply(A);const y=L(d,this.activation.apply(h));return[y,y,h]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:_r(this.activation),recurrentActivation:_r(this.recurrentActivation),useBias:this.useBias,kernelInitializer:kt(this.kernelInitializer),recurrentInitializer:kt(this.recurrentInitializer),biasInitializer:kt(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:pt(this.kernelRegularizer),recurrentRegularizer:pt(this.recurrentRegularizer),biasRegularizer:pt(this.biasRegularizer),activityRegularizer:pt(this.activityRegularizer),kernelConstraint:Xt(this.kernelConstraint),recurrentConstraint:Xt(this.recurrentConstraint),biasConstraint:Xt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),s)}}return n.className="LSTMCell",n})();se(um),se((()=>{class n extends qa{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new um(e),super(e)}call(e,s){return U(()=>(null!=this.cell.dropoutMask&&(ze(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ze(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return 0===s.implmentation&&(s.implementation=1),new e(s)}}return n.className="LSTM",n})());let Pb=(()=>{class n extends Ic{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const s of this.cells.slice().reverse())Array.isArray(s.stateSize)?e.push(...s.stateSize):e.push(s.stateSize);return e}call(e,s){return U(()=>{let r=e.slice(1);const o=[];for(const l of this.cells.slice().reverse())Array.isArray(l.stateSize)?o.push(r.splice(0,l.stateSize.length)):o.push(r.splice(0,1));o.reverse();const i=[];let a;for(let l=0;l<this.cells.length;++l){const u=this.cells[l];r=o[l],a=0===l?[e[0]].concat(r):[a[0]].concat(r),a=u.call(a,s),i.push(a.slice(1))}r=[];for(const l of i.slice().reverse())r.push(...l);return[a[0]].concat(r)})}build(e){let s;Lf(e)&&(e=e[0]),this.cells.forEach((r,o)=>{uo(`RNNCell_${o}`,()=>{r.build(e),s=Array.isArray(r.stateSize)?r.stateSize[0]:r.stateSize,e=[e[0],s]})}),this.built=!0}getConfig(){const e=super.getConfig(),o={cells:this.cells.map(i=>({className:i.getClassName(),config:i.getConfig()}))};return Object.assign(Object.assign({},e),o)}static fromConfig(e,s,r={}){const o=[];for(const i of s.cells)o.push(tr(i,r));return new e({cells:o})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const s of this.cells)e.push(...s.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const s of this.cells)e.push(...s.nonTrainableWeights);if(!this.trainable){const s=[];for(const r of this.cells)s.push(...r.trainableWeights);return s.concat(e)}return e}getWeights(){const e=[];for(const s of this.cells)e.push(...s.weights);return Pf(e)}setWeights(e){const s=[];for(const r of this.cells){const i=e.splice(r.weights.length);for(let a=0;a<r.weights.length;++a)s.push([r.weights[a],i[a]])}Mf(s)}}return n.className="StackedRNNCells",n})();function Rr(n){const{ones:t,rate:e,training:s=!1,count:r=1,dropoutFunc:o}=n,i=()=>null!=o?o(t(),e):Vx(t(),e),a=()=>Ua(i,t,s);return!r||r<=1?en(a().clone()):Array(r).fill(void 0).map(a).map(u=>en(u.clone()))}se(Pb);let jR=(()=>{class n extends qa{constructor(e){if(e.unroll)throw new Pe("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Pe("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new Qt({ndim:5})]}call(e,s){return U(()=>{if(null!=this.cell.dropoutMask&&(ze(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ze(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),s&&s.constants)throw new B("ConvRNN2D cell does not support constants");return super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})})}computeOutputShape(e){let s=this.computeSingleOutputShape(e);return this.returnSequences||(s=[s[0],...s.slice(2)]),this.returnState&&(s=[s,...Array(2).fill([e[0],...s.slice(-3)])]),s}getInitialState(e){return U(()=>{const{stateSize:s}=this.cell,o=this.computeSingleOutputShape(e.shape),a=qt([o[0],...o.slice(2)]);return Array.isArray(s)?Array(s.length).fill(a):[a]})}resetStates(e,s=!1){U(()=>{if(!this.stateful)throw new Ms("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape,o=this.computeSingleOutputShape(r),i=[o[0],...o.slice(2)];if(null==r[0])throw new B("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(()=>qt(i)):[qt(i)];else if(null==e)ze(this.states_),null!=this.keptStates&&(ze(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>qt(i)):this.states_[0]=qt(i);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new B(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);s?this.keptStates.push(this.states_.slice()):ze(this.states_);for(let l=0;l<this.states_.length;++l){const u=e[l],c=i;if(!Qe(u.shape,c))throw new B(`State ${l} is incompatible with layer ${this.name}: expected shape=${c}, received shape=${u.shape}`);this.states_[l]=u}}this.states_=this.states_.map(l=>en(l.clone()))})}computeSingleOutputShape(e){const{dataFormat:s,filters:r,kernelSize:o,padding:i,strides:a,dilationRate:l}=this.cell,u="channelsFirst"===s,h=e[u?4:3],d=Ss(e[u?3:2],o[0],i,a[0],l[0]),p=Ss(h,o[1],i,a[1],l[1]);return[...e.slice(0,2),...u?[r,d,p]:[d,p,r]]}}return n.className="ConvRNN2D",n})(),Mb=(()=>{class n extends um{constructor(e){const{filters:s,kernelSize:r,strides:o,padding:i,dataFormat:a,dilationRate:l}=e;super(Object.assign(Object.assign({},e),{units:s})),this.filters=s,sn(this.filters,"filters"),this.kernelSize=ti(r,2,"kernelSize"),this.kernelSize.forEach(u=>sn(u,"kernelSize")),this.strides=ti(o||1,2,"strides"),this.strides.forEach(u=>sn(u,"strides")),this.padding=i||"valid",Zn(this.padding),this.dataFormat=a||"channelsLast",Pt(this.dataFormat),this.dilationRate=ti(l||1,2,"dilationRate"),this.dilationRate.forEach(u=>sn(u,"dilationRate"))}build(e){var s;e=nt(e);const r="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[r])throw new B(`The channel dimension of the input should be defined. Found ${e[r]}`);const a=this.kernelSize.concat([e[r],4*this.filters]);this.kernel=this.addWeight("kernel",a,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const l=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",l,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let u;if(this.unitForgetBias){const c=this.biasInitializer,h=this.filters;u=new((s=class extends hs{apply(p,f){return $f([c.apply([h]),qn([h]),c.apply([2*h])])}}).className="CustomInit",s)}else u=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,u,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,s){return U(()=>{if(3!==e.length)throw new B(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const r=s.training||!1,o=e[0],i=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Rr({ones:()=>jn(o),rate:this.dropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const u=this.dropoutMask,c=(te,ae,oe)=>ae&&ae[oe]?L(ae[oe],te):te;let h=c(o,u,0),d=c(o,u,1),p=c(o,u,2),f=c(o,u,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Rr({ones:()=>jn(i),rate:this.recurrentDropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const g=this.recurrentDropoutMask;let m=c(i,g,0),A=c(i,g,1),y=c(i,g,2),x=c(i,g,3);const[I,S,k,E]=Ln(this.kernel.read(),4,3),[D,O,C,T]=this.useBias?Ln(this.bias.read(),4):[null,null,null,null];h=this.inputConv(h,I,D,this.padding),d=this.inputConv(d,S,O,this.padding),p=this.inputConv(p,k,C,this.padding),f=this.inputConv(f,E,T,this.padding);const[_,P,z,V]=Ln(this.recurrentKernel.read(),4,3);m=this.recurrentConv(m,_),A=this.recurrentConv(A,P),y=this.recurrentConv(y,z),x=this.recurrentConv(x,V);const H=this.recurrentActivation.apply(ne(h,m)),K=this.recurrentActivation.apply(ne(d,A)),Z=ne(L(K,a),L(H,this.activation.apply(ne(p,y)))),ee=L(this.recurrentActivation.apply(ne(f,x)),this.activation.apply(Z));return[ee,ee,Z]})}getConfig(){const r=function(n,t){var e={};for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&t.indexOf(s)<0&&(e[s]=n[s]);if(null!=n&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(n);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(n,s[r])&&(e[s[r]]=n[s[r]])}return e}(super.getConfig(),["units"]),o={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},r),o)}inputConv(e,s,r,o){const i=wr(e,s,this.strides,o||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return r?Is(i,r,this.dataFormat):i}recurrentConv(e,s){return wr(e,s,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}return n.className="ConvLSTM2DCell",n})();se(Mb),se((()=>{class n extends jR{constructor(e){const s=new Mb(e);super(Object.assign(Object.assign({},e),{cell:s}))}static fromConfig(e,s){return new e(s)}}return n.className="ConvLSTM2D",n})());let Bb=(()=>{class n extends He{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const s=e.shape,r=[];for(let o=0;o<this.noiseShape.length;++o)r.push(null==this.noiseShape[o]?s[o]:this.noiseShape[o]);return r}call(e,s){return U(()=>{this.invokeCallHook(e,s);const r=$e(e);if(0<this.rate&&this.rate<1){const o=null!=s.training&&s.training,i=this.getNoiseShape(r);return Ua(()=>Vx(r,this.rate,i,this.seed),()=>r,o)}return e})}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},s=super.getConfig();return Object.assign(e,s),e}dispose(){return super.dispose()}}return n.className="Dropout",n})();se(Bb),se((()=>{class n extends Bb{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const s=e.shape;return[s[0],1,s[2]]}}return n.className="SpatialDropout1D",n})()),se((()=>{class n extends He{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let s=null;null!=e.batchSize&&(s=e.batchSize),this.batchInputShape=[s,e.inputDim]}this.units=e.units,sn(this.units,"units"),this.activation=Dr(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=It(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=It(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Zt(e.kernelConstraint),this.biasConstraint=Zt(e.biasConstraint),this.kernelRegularizer=Ct(e.kernelRegularizer),this.biasRegularizer=Ct(e.biasRegularizer),this.activityRegularizer=Ct(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const s=(e=nt(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[s,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:s}}],this.built=!0}computeOutputShape(e){const s=(e=nt(e)).slice();return s[s.length-1]=this.units,s}call(e,s){return U(()=>{this.invokeCallHook(e,s);const r=$e(e),o=Dx(this.activation.getClassName());let i;return null!=o?i=zs(r,this.kernel.read(),o,this.bias?this.bias.read():null):(i=zs(r,this.kernel.read()),null!=this.bias&&(i=Is(i,this.bias.read())),null!=this.activation&&(i=this.activation.apply(i))),i})}getConfig(){const e={units:this.units,activation:_r(this.activation),useBias:this.useBias,kernelInitializer:kt(this.kernelInitializer),biasInitializer:kt(this.biasInitializer),kernelRegularizer:pt(this.kernelRegularizer),biasRegularizer:pt(this.biasRegularizer),activityRegularizer:pt(this.activityRegularizer),kernelConstraint:Xt(this.kernelConstraint),biasConstraint:Xt(this.biasConstraint)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Dense",n})()),se((()=>{class n extends He{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=nt(e);for(const s of e.slice(1))if(null==s)throw new B(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],Nr(e,1)]}call(e,s){return U(()=>{this.invokeCallHook(e,s);let r=$e(e);if("channelsFirst"===this.dataFormat&&r.rank>1){const o=[0];for(let i=2;i<r.rank;++i)o.push(i);o.push(1),r=Je(r,o)}return function DD(n){if(n.rank<=1)throw new B(`batchFlatten requires a minimum rank of 2. Got rank: ${n.rank}.`);const t=[n.shape[0],Nr(n.shape,1)];return M(n,t)}(r)})}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const s=super.getConfig();return Object.assign(e,s),e}}return n.className="Flatten",n})()),se((()=>{class n extends He{constructor(e){super(e),this.supportsMasking=!0,this.activation=Dr(e.activation)}call(e,s){return U(()=>{this.invokeCallHook(e,s);const r=$e(e);return this.activation.apply(r)})}getConfig(){const e={activation:_r(this.activation)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Activation",n})()),se((()=>{class n extends He{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,s){return U(()=>function ED(n,t){return U(()=>{if(2!==n.shape.length)throw new B(`repeat() expects a rank-2 tensor, but received a rank-${n.shape.length} tensor.`);return Ff(za(n,1),[1,t,1])})}(e=$e(e),this.n))}getConfig(){const e={n:this.n},s=super.getConfig();return Object.assign(e,s),e}}return n.className="RepeatVector",n})()),se((()=>{class n extends He{constructor(e){super(e),this.targetShape=e.targetShape;for(let s=0;s<this.targetShape.length;++s)this.isUnknown(this.targetShape[s])&&(this.targetShape[s]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,s){const r="Total size of new array must be unchanged.",o=s.slice();let i=1,a=null;for(let u=0;u<o.length;++u){const c=o[u];if(this.isUnknown(c)){if(null!==a)throw new B("Can only specifiy one unknown dimension.");a=u}else i*=c}const l=Nr(e);if(null!==a){if(0===i||l%i!=0)throw new B(r);o[a]=l/i}else if(l!==i)throw new B(r);return o}computeOutputShape(e){let s=!1;for(let r=0;r<e.length;++r)if(this.isUnknown(e[r])){s=!0;break}return s?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,s){return U(()=>{this.invokeCallHook(e,s);const r=$e(e),o=r.shape,i=o.slice(0,1).concat(this.fixUnknownDimension(o.slice(1),this.targetShape));return M(r,i)})}getConfig(){const e={targetShape:this.targetShape},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Reshape",n})()),se((()=>{class n extends He{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const s=bs(1,e.dims.length+1);if(!Qe(e.dims.slice().sort(),s))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Qt({ndim:this.dims.length+1})]}computeOutputShape(e){const s=(e=nt(e)).slice();return this.dims.forEach((r,o)=>{s[o+1]=e[r]}),s}call(e,s){return Je($e(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Permute",n})()),se((()=>{class n extends He{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={maskValue:this.maskValue};return Object.assign(s,e),s}computeMask(e,s){const r=$e(e);return ku(Ko(r,this.maskValue),-1)}call(e,s){return U(()=>{this.invokeCallHook(e,s);const r=$e(e),a=ku(Ko(r,this.maskValue),-1,!0);return L(r,he(a,r.dtype))})}}return n.className="Masking",n})()),se((()=>{class n extends He{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let s=null;null!=e.batchSize&&(s=e.batchSize),this.batchInputShape=null==e.inputLength?[s,null]:[s].concat(gt(e.inputLength))}this.inputDim=e.inputDim,sn(this.inputDim,"inputDim"),this.outputDim=e.outputDim,sn(this.outputDim,"outputDim"),this.embeddingsInitializer=It(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Ct(e.embeddingsRegularizer),this.activityRegularizer=Ct(e.activityRegularizer),this.embeddingsConstraint=Zt(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,s){return U(()=>this.maskZero?(e=$e(e),Ko(e,Ze(e))):null)}computeOutputShape(e){if(e=nt(e),null==this.inputLength)return[...e,this.outputDim];const s=gt(this.inputLength);if(s.length!==e.length-1)throw new B(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let r=0;for(let o=0;o<s.length;++o){const i=s[o],a=e[o+1];if(null!=i&&null!=a&&i!==a)throw new B(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==i&&(s[r]=a),r++}}return[e[0],...s,this.outputDim]}call(e,s){return U(()=>{this.invokeCallHook(e,s);let r=$e(e);"int32"!==r.dtype&&(r=Bs(r,"int32"));const o=zx(this.embeddings.read(),M(r,[r.size]));return M(o,nt(this.computeOutputShape(r.shape)))})}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:kt(this.embeddingsInitializer),embeddingsRegularizer:pt(this.embeddingsRegularizer),activityRegularizer:pt(this.activityRegularizer),embeddingsConstraint:Xt(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Embedding",n})());class ho extends He{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new Pe}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const s=t.slice(0,t.length-e.length);for(let r=0;r<e.length;++r){const o=t[t.length-e.length+r],i=e[r];if(null==o||null==i||o<0||i<0)s.push(null);else if(1===o)s.push(i);else if(1===i)s.push(o);else{if(o!==i)throw new B("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));s.push(o)}}return s}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[nt(t)]),t.length<2)throw new B(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const o of t)null!=o&&null!==o[0]&&e.push(o[0]);if(e=Sr(e),e.length>1)throw new B(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let s=null==t[0]?null:t[0].slice(1);for(let o=1;o<t.length;++o){const i=null==t[o]?null:t[o].slice(1);s=this.computeElementwiseOpOutputShape(s,i)}const r=t.map(o=>o.length);this.reshapeRequired=-1!==t.indexOf(null)||1!==Sr(r).length}call(t,e){return U(()=>{if(this.reshapeRequired){const s=[],r=t.map(o=>o.rank);if(-1===r.indexOf(null)){const o=Tr(r);for(let i of t){const a=i.rank;for(let l=0;l<o-a;++l)i=za(i,1);s.push(i)}return this.mergeFunction(s)}{let o=!1;for(const l of t){const u=l.rank;if(null==u){const c=l.shape,h=c[0],d=c.slice(1).concat([h]);let p=M(l,[h].concat(Nr(c.slice(1))));p=Je(p,[1,0]),p=M(p,d),s.push(p),o=!0}else if(u>1){const c=bs(1,u).concat([0]);s.push(Je(l,c)),o=!0}else s.push(l)}let i=this.mergeFunction(s);const a=i.rank;if(o)if(null==a){const l=i.shape,c=l[l.length-1],h=[c].concat(l.slice(0,l.length-1));i=M(Je(M(i,[-1,c]),[1,0]),h)}else if(a>1){const l=[a-1].concat(bs(0,a-1));i=Je(i,l)}return i}}return this.mergeFunction(t)})}computeOutputShape(t){let e;e=null==t[0]?null:t[0].slice(1);for(let r=1;r<t.length;++r){const o=null==t[r]?null:t[r].slice(1);e=this.computeElementwiseOpOutputShape(e,o)}let s=[];for(const r of t)null!=r&&null!==r[0]&&s.push(r[0]);return s=Sr(s),e=1===s.length?s.concat(e):[null].concat(e),e}computeMask(t,e){return U(()=>{if(null==e)return null;if(!Array.isArray(e))throw new B("`mask` should be an Array");if(!Array.isArray(t))throw new B("`inputs` should be an Array");if(e.length!==t.length)throw new B(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every(r=>null==r))return null;let s=(e=e.map(r=>null==r?r:Cn(r,0)))[0];for(let r=1;r<e.length-1;++r)s=$s(s,e[r]);return s})}}function ja(n,t){for(;n<0;)n+=t;return n}function Qa(n,t,e,s,r,o=.001){let i;if(2===n.rank)i=qA(n,t,e,s,r,o);else if(3===n.rank)i=jA(n,t,e,s,r,o);else{if(4!==n.rank)throw new Pe(`batchNormalization is not implemented for array of rank ${n.rank} yet`);i=QA(n,t,e,s,r,o)}return i}function Cc(n,t,e,s,r,o){return U(()=>{let i;Pt(r),$x(o),Zn(s),null==e&&(e=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==o&&(o="max"),n=am(n,r);const a="same"===s?"same":"valid";return i="max"===o?Mu(n,t,e,a):Eu(n,t,e,a),"channelsFirst"===r&&(i=Je(i,[0,3,1,2])),i})}function zb(n,t,e,s,r,o){return U(()=>{let i;Pt(r),$x(o),Zn(s),null==e&&(e=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==o&&(o="max"),n=kb(n,r);const a="same"===s?"same":"valid";return i="max"===o?by(n,t,e,a):KA(n,t,e,a),"channelsFirst"===r&&(i=Je(i,[0,4,1,2,3])),i})}se((()=>{class n extends ho{constructor(e){super(e)}mergeFunction(e){return U(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=ne(s,e[r]);return s})}}return n.className="Add",n})()),se((()=>{class n extends ho{constructor(e){super(e)}mergeFunction(e){return U(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=L(s,e[r]);return s})}}return n.className="Multiply",n})()),se((()=>{class n extends ho{constructor(e){super(e)}mergeFunction(e){return U(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=ne(s,e[r]);return L(1/e.length,s)})}}return n.className="Average",n})()),se((()=>{class n extends ho{constructor(e){super(e)}mergeFunction(e){return U(()=>{let s=e[0];for(let r=1;r<e.length;++r)s=ys(s,e[r]);return s})}}return n.className="Maximum",n})()),se((()=>{class n extends ho{constructor(e){super(e)}mergeFunction(e){return U(()=>{let s=e[0];for(let r=1;r<e.length;++r)s=to(s,e[r]);return s})}}return n.className="Minimum",n})()),se((()=>{class n extends ho{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new B("A `Concatenate` layer should be called on a list of at least 2 inputs");let s=!0;for(const o of e)if(null!=o){s=!1;break}if(s)return;const r=[];for(let o=0;o<e.length;++o){const i=e[o].slice();i.splice(this.axis,1);let a=!1;for(const l of r)if(Qe(l,i)){a=!0;break}a||r.push(i)}if(r.length>1)throw new B("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return U(()=>$f(e,this.axis))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new B("A `Concatenate` layer should be called on a list of inputs.");const s=e,r=s[0].slice(),o=this.axis<0?r.length+this.axis:this.axis;for(const i of s.slice(1)){if(null==r[o]||null==i[o]){r[o]=null;break}r[o]+=i[o]}return r}computeMask(e,s){if(null==s)return null;if(!Array.isArray(s))throw new B("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new B("`inputs` should be an array for Concatenate");if(s.length!==e.length)throw new B(`Mismatch in the length of mask (${s.length}) and the legnth of inputs (${e.length})`);return U(()=>{let r=!0;if(s.forEach(a=>{null==a||(r=!1)}),r)return null;const o=[];for(let a=0;a<e.length;++a)o.push(null==s[a]?he(jn(e[a]),"bool"):s[a].rank<e[a].rank?Cn(s[a],-1):s[a]);const i=zt(o,this.axis);return cp(i,-1,!1)})}getConfig(){const e={axis:this.axis},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Concatenate",n})()),se((()=>{class n extends ho{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){v(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const s=e[0],r=e[1];if(s.length>3||r.length>3)throw new Pe("Dot layer does not support tensors of 4D or higher rank yet.");const o=this.interpretAxes(s,r);if(s[o[0]]!==r[o[1]])throw new B(`Dimension incompatibility: ${s[o[0]]} !== ${r[o[1]]}`)}mergeFunction(e){if(2!==e.length)throw new B(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let o,s=e[0],r=e[1];return o=Array.isArray(this.axes)?this.axes.map((i,a)=>ja(i,e[a].shape.length)):[ja(this.axes,s.shape.length),ja(this.axes,r.shape.length)],this.normalize&&(s=pc(s,o[0]),r=pc(r,o[1])),function QR(n,t,e){if(n.shape.length>3||t.shape.length>3)throw new Pe("batchDot is not implemented for tensors of 4D or higher rank yet");if(v(n.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${n.shape.length}`),v(n.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`),"number"==typeof e&&(e=[e,e]),"complex64"===n.dtype||"complex64"===t.dtype)throw new Pe("batchDot is not implemented for complex64-type Tensors yet.");const s=n.shape.length,r=t.shape.length;null==e&&(e=[s-1,r-2]);const o=e;return U(()=>{let i,a;if(s>r){i=s-r;const l=[];for(let u=0;u<i;++u)l.push(1);t=M(t,t.shape.concat(l))}else if(r>s){i=r-s;const l=[];for(let u=0;u<i;++u)l.push(1);n=M(n,n.shape.concat(l))}else i=0;if(a=2===n.shape.length&&2===t.shape.length?o[0]===o[1]?we(L(n,t),o[0]):we(L(Je(n,[1,0]),t),o[1]):qe(n,t,o[0]!==n.shape.length-1,o[1]===t.shape.length-1),i>0){let l;l=s>r?s+r-3:s-1;const u=[];for(let c=l;c<l+i;++c)u.push(c);a=so(a,u)}return 1===a.shape.length&&(a=Cn(a,1)),a})}(s,r,o)}interpretAxes(e,s){let r;return r=Array.isArray(this.axes)?this.axes:[ja(this.axes,e.length),ja(this.axes,s.length)],r}computeOutputShape(e){v(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const s=e[0].slice(),r=e[1].slice();if(s.length>3||r.length>3)throw new Pe("Dot layer does not support tensors of 4D or higher rank yet.");const o=this.interpretAxes(s,r);s.splice(o[0],1),r.splice(o[1],1),r.splice(0,1);const i=s.concat(r);return 1===i.length&&i.push(1),i}computeMask(e,s){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Dot",n})()),se((()=>{class n extends He{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={stddev:this.stddev};return Object.assign(s,e),s}call(e,s){return U(()=>{this.invokeCallHook(e,s);const r=$e(e);return Ua(()=>ne(ic(r.shape,0,this.stddev),r),()=>r,s.training||!1)})}}return n.className="GaussianNoise",n})()),se((()=>{class n extends He{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={rate:this.rate};return Object.assign(s,e),s}call(e,s){return U(()=>{this.invokeCallHook(e,s);const r=$e(e);return this.rate>0&&this.rate<1?Ua(()=>{const i=Math.sqrt(this.rate/(1-this.rate));return L(r,ic(r.shape,1,i))},()=>r,s.training||!1):r})}}return n.className="GaussianDropout",n})()),se((()=>{class n extends He{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||$e(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={rate:this.rate};return Object.assign(s,e),s}call(e,s){return U(()=>{if(this.rate<1&&this.rate>0){const r=this._getNoiseShape(e);return Ua(()=>{const i=$e(e),u=-1.7580993408473766;let c=Cr(no(r),this.rate);c=Bs(c,"float32");const h=((1-this.rate)*(1+this.rate*u**2))**-.5,d=-h*u*this.rate,p=ne(L(i,c),L(ne(c,-1),u));return ne(L(p,h),d)},()=>$e(e),s.training||!1)}return e})}}return n.className="AlphaDropout",n})()),se((()=>{class n extends He{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=It(e.betaInitializer||"zeros"),this.gammaInitializer=It(e.gammaInitializer||"ones"),this.movingMeanInitializer=It(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=It(e.movingVarianceInitializer||"ones"),this.betaConstraint=Zt(e.betaConstraint),this.gammaConstraint=Zt(e.gammaConstraint),this.betaRegularizer=Ct(e.betaRegularizer),this.gammaRegularizer=Ct(e.gammaRegularizer)}build(e){e=nt(e);const s=this.axis>=0?this.axis:this.axis+e.length,r=e[s];if(null==r)throw new B(`Axis ${s} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new Qt({ndim:e.length,axes:{[s]:r}})];const o=[r];this.scale&&(this.gamma=this.addWeight("gamma",o,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",o,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",o,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",o,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,s){return U(()=>{const r=null!=s.training&&s.training,o=$e(e),i=o.shape,a=i.length,l=bs(0,a),u=this.axis>=0?this.axis:this.axis+a;l.splice(u,1);const c=oo(1,a);c[u]=i[u];const h=l.slice();h.sort();const d=!Qe(h,bs(0,a).slice(0,a-1));if(!r)return(()=>{if(d){const x=M(this.movingMean.read(),c),b=M(this.movingVariance.read(),c),I=this.center?M(this.beta.read(),c):null,S=this.scale?M(this.gamma.read(),c):null;return Qa(o,x,b,I,S,this.epsilon)}return Qa(o,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[f,g,m]=function YR(n,t,e,s,r=.001){return Qe(s.slice().sort(),bs(0,n.rank-1))?function XR(n,t,e,s,r=.001){return U(()=>{const o=Bu(n,s),i=o.mean,a=o.variance;return[Qa(n,i,a,e,t,r),i,a]})}(n,t,e,s,r):function ZR(n,t,e,s,r=.001){return U(()=>{const o=Bu(n,s),i=o.mean,a=o.variance,l=[];for(const f of bs(0,n.rank))-1!==s.indexOf(f)?l.push(1):l.push(n.shape[f]);const u=M(i,l),c=M(a,l),h=null==t?null:M(t,l),d=null==e?null:M(e,l);return[Qa(n,u,c,d,h,r),i,a]})}(n,t,e,s,r)}(o,this.gamma.read(),this.beta.read(),l,this.epsilon),A=(x,b,I)=>{U(()=>{const S=1-I,k=x.read(),E=L(xe(k,b),S);x.write(xe(k,E))})};return(()=>{A(this.movingMean,g,this.momentum),A(this.movingVariance,m,this.momentum)})(),f})}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:kt(this.betaInitializer),gammaInitializer:kt(this.gammaInitializer),movingMeanInitializer:kt(this.movingMeanInitializer),movingVarianceInitializer:kt(this.movingVarianceInitializer),betaRegularizer:pt(this.betaRegularizer),gammaRegularizer:pt(this.gammaRegularizer),betaConstraint:Xt(this.betaConstraint),gammaConstraint:Xt(this.gammaConstraint)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="BatchNormalization",n})()),se((()=>{class n extends He{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const s of this.axis)if(!Number.isInteger(s))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=It(e.betaInitializer||"zeros"),this.gammaInitializer=It(e.gammaInitializer||"ones"),this.betaRegularizer=Ct(e.betaRegularizer),this.gammaRegularizer=Ct(e.gammaRegularizer),this.supportsMasking=!0}build(e){const s=(e=nt(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let i=0;i<this.axis.length;++i)this.axis[i]<0&&(this.axis[i]+=s);for(const i of this.axis)if(i<0||i>=s)throw new Error(`Invalid axis: ${i}`);if(this.axis.length!==Sr(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const r=this.axis.map(i=>e[i]);this.gamma=this.scale?this.addWeight("gamma",r,"float32",this.gammaInitializer,this.gammaRegularizer,!0):null,this.beta=this.center?this.addWeight("beta",r,"float32",this.betaInitializer,this.betaRegularizer,!0):null,this.built=!0}call(e,s){const r=$e(e),o=r.shape,i=o.length;return U(()=>{let{mean:l,variance:u}=Bu(r,this.axis,!0);const c=oo(1,i);for(const m of this.axis)c[m]=o[m];const h=m=>null!=m&&m.shape.length!==i?M(m,c):m;let d=this.scale?h(this.gamma.read()):null,p=this.center?h(this.beta.read()):null;const f=[],g=[];for(let m=0;m<i;++m)-1!==this.axis.indexOf(m)?(f.push(o[m]),g.push(1)):(f.push(1),g.push(o[m]));return l=is(l,f),u=is(u,f),null!=d&&(d=is(d,g)),null!=p&&(p=is(p,g)),Qa(r,l,u,p,d,this.epsilon)})}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:kt(this.betaInitializer),gammaInitializer:kt(this.gammaInitializer),betaRegularizer:pt(this.betaRegularizer),gammaRegularizer:pt(this.gammaRegularizer)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="LayerNormalization",n})()),se((()=>{class n extends He{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new B(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let s,r;if("number"==typeof e.padding[0])s=[e.padding[0],e.padding[0]],r=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new B(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(s=e.padding[0],2!==e.padding[1].length)throw new B(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);r=e.padding[1]}this.padding=[s,r]}this.inputSpec=[new Qt({ndim:4})]}computeOutputShape(e){let s,r;return e=nt(e),"channelsFirst"===this.dataFormat?(s=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],s,r]):(s=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],s,r,e[3]])}call(e,s){return U(()=>function JR(n,t,e){return U(()=>{if(4!==n.rank)throw new B(`temporalPadding expects input tensor to be 4-D, but received a ${n.rank}-D tensor.`);if(null==t&&(t=[[1,1],[1,1]]),2!==t.length||2!==t[0].length||2!==t[1].length)throw new B("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==e&&(e="channelsLast"),"channelsLast"!==e&&"channelsFirst"!==e)throw new B(`Unknown data format: ${e}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let s;return s="channelsFirst"===e?[[0,0],[0,0],t[0],t[1]]:[[0,0],t[0],t[1],[0,0]],vr(n,s)})}($e(e),this.padding,this.dataFormat))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ZeroPadding2D",n})());class Vb extends He{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new B(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.poolSize)}`);this.poolSize=t.poolSize}if(sn(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new B(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.strides)}`);this.strides=t.strides}sn(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,Zn(this.padding),this.inputSpec=[new Qt({ndim:3})]}computeOutputShape(t){const e=Ss((t=nt(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return U(()=>{this.invokeCallHook(t,e),t=za($e(t),2);const s=this.poolingFunction($e(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return so(s,[2])})}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}se((()=>{class n extends Vb{constructor(e){super(e)}poolingFunction(e,s,r,o,i){return Pt(i),Zn(o),Cc(e,s,r,o,i,"max")}}return n.className="MaxPooling1D",n})()),se((()=>{class n extends Vb{constructor(e){super(e)}poolingFunction(e,s,r,o,i){return Pt(i),Zn(o),Cc(e,s,r,o,i,"avg")}}return n.className="AveragePooling1D",n})());class Ub extends He{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new B(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides];sn(this.poolSize,"poolSize"),sn(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Pt(this.dataFormat),Zn(this.padding),this.inputSpec=[new Qt({ndim:4})]}computeOutputShape(t){t=nt(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],s="channelsFirst"===this.dataFormat?t[3]:t[2];return e=Ss(e,this.poolSize[0],this.padding,this.strides[0]),s=Ss(s,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,s]:[t[0],e,s,t[3]]}call(t,e){return U(()=>(this.invokeCallHook(t,e),this.poolingFunction($e(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}se((()=>{class n extends Ub{constructor(e){super(e)}poolingFunction(e,s,r,o,i){return Pt(i),Zn(o),Cc(e,s,r,o,i,"max")}}return n.className="MaxPooling2D",n})()),se((()=>{class n extends Ub{constructor(e){super(e)}poolingFunction(e,s,r,o,i){return Pt(i),Zn(o),Cc(e,s,r,o,i,"avg")}}return n.className="AveragePooling2D",n})());class Wb extends He{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new B(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];sn(this.poolSize,"poolSize"),sn(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Pt(this.dataFormat),Zn(this.padding),this.inputSpec=[new Qt({ndim:5})]}computeOutputShape(t){t=nt(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],s="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[4]:t[3];return e=Ss(e,this.poolSize[0],this.padding,this.strides[0]),s=Ss(s,this.poolSize[1],this.padding,this.strides[1]),r=Ss(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,s,r]:[t[0],e,s,r,t[4]]}call(t,e){return U(()=>(this.invokeCallHook(t,e),this.poolingFunction($e(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}se((()=>{class n extends Wb{constructor(e){super(e)}poolingFunction(e,s,r,o,i){return Pt(i),Zn(o),zb(e,s,r,o,i,"max")}}return n.className="MaxPooling3D",n})()),se((()=>{class n extends Wb{constructor(e){super(e)}poolingFunction(e,s,r,o,i){return Pt(i),Zn(o),zb(e,s,r,o,i,"avg")}}return n.className="AveragePooling3D",n})());class Gb extends He{constructor(t){super(t),this.inputSpec=[new Qt({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new Pe}}se((()=>{class n extends Gb{constructor(e){super(e||{})}call(e,s){return U(()=>{const r=$e(e);return Rt(r,1)})}}return n.className="GlobalAveragePooling1D",n})()),se((()=>{class n extends Gb{constructor(e){super(e||{})}call(e,s){return U(()=>{const r=$e(e);return Gn(r,1)})}}return n.className="GlobalMaxPooling1D",n})());class Hb extends He{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Pt(this.dataFormat),this.inputSpec=[new Qt({ndim:4})]}computeOutputShape(t){return"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new Pe}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}se((()=>{class n extends Hb{call(e,s){return U(()=>{const r=$e(e);return Rt(r,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}return n.className="GlobalAveragePooling2D",n})()),se((()=>{class n extends Hb{call(e,s){return U(()=>{const r=$e(e);return Gn(r,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}return n.className="GlobalMaxPooling2D",n})());class Kb extends He{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,s={}){const o=tr(e.layer,s);delete e.layer;const i={layer:o};return Object.assign(i,e),new t(i)}}se((()=>{class n extends Kb{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=nt(e)).length<3)throw new B(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const s=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(s),this.layer.built=!0),super.build(e)}computeOutputShape(e){const s=[(e=nt(e))[0]].concat(e.slice(2)),r=this.layer.computeOutputShape(s);return[r[0],e[1]].concat(r.slice(1))}call(e,s){return U(()=>Fb((a,l)=>[$e(this.layer.call(a,s)),[]],e=$e(e),[],!1,null,null,!1,!0)[1])}}return n.className="TimeDistributed",n})()),se((()=>{class n extends Kb{constructor(e){super(e);const s=e.layer.getConfig(),r={};r.className=e.layer.getClassName(),r.config=s,this.forwardLayer=tr(r),s.goBackwards=!0!==s.goBackwards;const o={};if(o.className=e.layer.getClassName(),o.config=s,this.backwardLayer=tr(o),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,function e$(n){lo(ID,"BidirectionalMergeMode",n)}(this.mergeMode),e.weights)throw new Pe("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const r=Math.floor(e.length/2);this.forwardLayer.setWeights(e.slice(0,r)),this.backwardLayer.setWeights(e.slice(r))}computeOutputShape(e){let r,o,i,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),this.returnState&&(i=s.slice(1)),r=s[0],"concat"===this.mergeMode?(r[r.length-1]*=2,o=[r]):o=null==this.mergeMode?[r,r.slice()]:[r],this.returnState?null==this.mergeMode?o.concat(i).concat(i.slice()):[r].concat(i).concat(i.slice()):_n(o)}apply(e,s){let r=null==s?null:s.initialState,o=null==s?null:s.constants;null==s&&(s={});const i=$b(e,r,o,this.numConstants);if(e=i.inputs,r=i.initialState,o=i.constants,Array.isArray(e)&&(r=e.slice(1),e=e[0]),(null==r||0===r.length)&&null==o)return super.apply(e,s);const a=[],l=[];if(null!=r){const c=r.length;if(c%2>0)throw new B("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");s.initialState=r,a.push(...r);const h=r.map(d=>new Qt({shape:d.shape}));this.forwardLayer.stateSpec=h.slice(0,c/2),this.backwardLayer.stateSpec=h.slice(c/2),l.push(...h)}if(null!=o)throw new Pe("Support for constants in Bidirectional layers is not implemented yet.");const u=a[0]instanceof Us;for(const c of a)if(c instanceof Us!==u)throw new B("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(u){const c=[e].concat(a),h=this.inputSpec.concat(l),d=this.inputSpec;this.inputSpec=h;const p=super.apply(c,s);return this.inputSpec=d,p}return super.apply(e,s)}call(e,s){return U(()=>{const r=s.initialState;let o,i,a,l;if(null==r)o=this.forwardLayer.call(e,s),i=this.backwardLayer.call(e,s);else{const u=r.slice(0,r.length/2),c=r.slice(r.length/2);o=this.forwardLayer.call(e,Object.assign(s,{initialState:u})),i=this.backwardLayer.call(e,Object.assign(s,{initialState:c}))}return this.returnState&&(Array.isArray(o)&&(a=o.slice(1).concat(i.slice(1))),o=o[0],i=i[0]),this.returnSequences&&(i=as(i,1)),"concat"===this.mergeMode?l=$f([o,i]):"sum"===this.mergeMode?l=ne(o,i):"ave"===this.mergeMode?l=L(.5,ne(o,i)):"mul"===this.mergeMode?l=L(o,i):null==this.mergeMode&&(l=[o,i]),this.returnState?null==this.mergeMode?l.concat(a):[l].concat(a):l})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){uo(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),uo(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,s){let r;if(Array.isArray(s)&&(s=s[0]),r=this.returnSequences?null==this.mergeMode?[s,s]:s:null==this.mergeMode?[null,null]:null,this.returnState){const i=this.forwardLayer.states.map(a=>null);return Array.isArray(r)?r.concat(i).concat(i):[r].concat(i).concat(i)}return r}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},s=super.getConfig();return Object.assign(e,s),e}static fromConfig(e,s){const r=tr(s.layer);if(delete s.layer,null!=s.numConstants)throw new Pe("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const o=s;return o.layer=r,new e(o)}}return n.className="Bidirectional",n})()),se((()=>{class n extends He{constructor(e){super(e),this.scale=e.scale,this.offset=e.offset?e.offset:0}getConfig(){const e={scale:this.scale,offset:this.offset},s=super.getConfig();return Object.assign(e,s),e}call(e,s){return U(()=>("float32"!==(e=$e(e)).dtype&&(e=Bs(e,"float32")),ne(L(e,this.scale),this.offset)))}}return n.className="Rescaling",n})());const{resizeBilinear:n$,cropAndResize:s$}=Os;se((()=>{class n extends He{constructor(e){super(e),this.height=e.height,this.width=e.width}centerCrop(e,s,r,o,i,a,l,u){return U(()=>{let c,h=!1;const m=[s/a,r/l,(o+s)/a,(i+r)/l],A=[];3===e.rank?(h=!0,c=Qn([e])):c=e;for(let S=0;S<c.shape[0];S++)A.push(m);const y=St(A,[A.length,4]),x=qo(0,A.length,1,"int32"),I=s$(c,y,x,[o,i],"nearest");return Bs(h?$e(ls(I)):I,u)})}upsize(e,s,r,o){return U(()=>Bs(n$(e,[s,r]),o))}call(e,s){return U(()=>{const r=$e(e),o=r.dtype,i=r.shape,a=i[i.length-3],l=i[i.length-2];let u=0;a!==this.height&&(u=Math.floor((a-this.height)/2));let c=0;return l!==this.width&&(c=Math.floor((l-this.width)/2),0===c&&(c=1)),u>=0&&c>=0?this.centerCrop(r,u,c,this.height,this.width,a,l,o):this.upsize(e,this.height,this.width,o)})}getConfig(){const e={height:this.height,width:this.width},s=super.getConfig();return Object.assign(e,s),e}computeOutputShape(e){const r=(e=nt(e)).length-2;return e[e.length-3]=this.height,e[r]=this.width,e}}return n.className="CenterCrop",n})()),se((()=>{class n extends He{constructor(e){super(e),this.numTokens=e.numTokens,this.outputMode=e.outputMode?e.outputMode:"multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},s=super.getConfig();return Object.assign(e,s),e}computeOutputShape(e){return null==(e=nt(e))?[this.numTokens]:"oneHot"===this.outputMode&&1!==e[e.length-1]?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,s){return U(()=>{let r;if("int32"!==(e=$e(e)).dtype&&(e=Bs(e,"int32")),typeof s.countWeights<"u"){if("count"!==this.outputMode)throw new B(`countWeights is not used when outputMode !== count.\n              Received countWeights=${s.countWeights}`);r=$e(s.countWeights)}const o=Gn(e),i=Na(e),a=En(this.numTokens,o).bufferSync().get(0),l=Cr(i,0).bufferSync().get(0);if(!a||!l)throw new B(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function r$(n,t,e,s){let r=$e(n);if("int32"!==r.dtype&&(r=Bs(r,"int32")),"int"===t)return r;const o=r.shape;if(0===r.rank&&(r=Cn(r,-1)),"oneHot"===t&&1!==r.shape[r.shape.length-1]&&(r=Cn(r,-1)),r.rank>2)throw new B(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${o} which would result in output rank ${r.rank}.`);const i=["multiHot","oneHot"].includes(t);let l;if(l=yp(r,typeof s<"u"&&"count"===t?s:[],e,i),"tfIdf"!==t)return l;if(s)return L(l,s);throw new B("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,r)})}}return n.className="CategoryEncoding",n})());const qb=new Set(["bilinear","nearest"]);se((()=>{class n extends He{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation){if(!qb.has(e.interpolation))throw new B(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);this.interpolation=e.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=!!e.cropToAspectRatio}computeOutputShape(e){return e=nt(e),[this.height,this.width,e[2]]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},s=super.getConfig();return Object.assign(e,s),e}call(e,s){return U(()=>{const r=[this.height,this.width];if("bilinear"===this.interpolation)return Os.resizeBilinear(e,r,!this.cropToAspectRatio);if("nearest"===this.interpolation)return Os.resizeNearestNeighbor(e,r,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...qb]} are supported`)})}}return n.className="Resizing",n})());let i$=(()=>{class n{constructor(e){this.seed=e}next(){if(void 0!==this.seed)return this.seed++}}return n.className="RandomSeed",n})(),a$=(()=>{class n extends He{constructor(e){super(e),this.randomGenerator=new i$(e.seed)}getConfig(){const e={seed:this.randomGenerator.seed},s=super.getConfig();return Object.assign(e,s),e}}return n.className="BaseRandomLayer",n})();const jb=new Set(["bilinear","nearest"]);se((()=>{class n extends a${constructor(e){super(e);const{factor:s,interpolation:r="bilinear"}=e;if(this.factor=s,Array.isArray(this.factor)&&2===this.factor.length)this.widthLower=this.factor[0],this.widthUpper=this.factor[1];else{if(Array.isArray(this.factor)||!(this.factor>0))throw new B(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);this.widthLower=-this.factor,this.widthUpper=this.factor}if(this.widthLower<-1||this.widthUpper<-1)throw new B(`factor must have values larger than -1. Got: ${this.factor}`);if(this.widthUpper<this.widthLower)throw new B(`factor cannot have upper bound less than lower bound.\n        Got upper bound: ${this.widthUpper}.\n        Got lower bound: ${this.widthLower}\n      `);if(r){if(!jb.has(r))throw new B(`Invalid interpolation parameter: ${r} is not implemented`);this.interpolation=r}}getConfig(){const e={factor:this.factor,interpolation:this.interpolation},s=super.getConfig();return Object.assign(e,s),e}computeOutputShape(e){return e=nt(e),[this.imgHeight,-1,e[2]]}call(e,s){return U(()=>{const r=$e(e);this.imgHeight=r.shape[r.shape.length-3];const o=r.shape[r.shape.length-2];this.widthFactor=no([1],1+this.widthLower,1+this.widthUpper,"float32",this.randomGenerator.next());let i=this.widthFactor.dataSync()[0]*o;i=Math.round(i);const a=[this.imgHeight,i];switch(this.interpolation){case"bilinear":return Os.resizeBilinear(e,a);case"nearest":return Os.resizeNearestNeighbor(e,a);default:throw new Error(`Interpolation is ${this.interpolation}\n          but only ${[...jb]} are supported`)}})}}return n.className="RandomWidth",n})()),W().registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,n=>{n&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")});var Jb,Ns=function(n){return n[n.DT_INVALID=0]="DT_INVALID",n[n.DT_FLOAT=1]="DT_FLOAT",n[n.DT_DOUBLE=2]="DT_DOUBLE",n[n.DT_INT32=3]="DT_INT32",n[n.DT_UINT8=4]="DT_UINT8",n[n.DT_INT16=5]="DT_INT16",n[n.DT_INT8=6]="DT_INT8",n[n.DT_STRING=7]="DT_STRING",n[n.DT_COMPLEX64=8]="DT_COMPLEX64",n[n.DT_INT64=9]="DT_INT64",n[n.DT_BOOL=10]="DT_BOOL",n[n.DT_QINT8=11]="DT_QINT8",n[n.DT_QUINT8=12]="DT_QUINT8",n[n.DT_QINT32=13]="DT_QINT32",n[n.DT_BFLOAT16=14]="DT_BFLOAT16",n[n.DT_QINT16=15]="DT_QINT16",n[n.DT_QUINT16=16]="DT_QUINT16",n[n.DT_UINT16=17]="DT_UINT16",n[n.DT_COMPLEX128=18]="DT_COMPLEX128",n[n.DT_HALF=19]="DT_HALF",n[n.DT_RESOURCE=20]="DT_RESOURCE",n[n.DT_VARIANT=21]="DT_VARIANT",n[n.DT_UINT32=22]="DT_UINT32",n[n.DT_UINT64=23]="DT_UINT64",n[n.DT_FLOAT_REF=101]="DT_FLOAT_REF",n[n.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",n[n.DT_INT32_REF=103]="DT_INT32_REF",n[n.DT_UINT8_REF=104]="DT_UINT8_REF",n[n.DT_INT16_REF=105]="DT_INT16_REF",n[n.DT_INT8_REF=106]="DT_INT8_REF",n[n.DT_STRING_REF=107]="DT_STRING_REF",n[n.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",n[n.DT_INT64_REF=109]="DT_INT64_REF",n[n.DT_BOOL_REF=110]="DT_BOOL_REF",n[n.DT_QINT8_REF=111]="DT_QINT8_REF",n[n.DT_QUINT8_REF=112]="DT_QUINT8_REF",n[n.DT_QINT32_REF=113]="DT_QINT32_REF",n[n.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",n[n.DT_QINT16_REF=115]="DT_QINT16_REF",n[n.DT_QUINT16_REF=116]="DT_QUINT16_REF",n[n.DT_UINT16_REF=117]="DT_UINT16_REF",n[n.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",n[n.DT_HALF_REF=119]="DT_HALF_REF",n[n.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",n[n.DT_VARIANT_REF=121]="DT_VARIANT_REF",n[n.DT_UINT32_REF=122]="DT_UINT32_REF",n[n.DT_UINT64_REF=123]="DT_UINT64_REF",n}(Ns||{});!function(n){let t;var e;(e=t=n.CheckpointFormatVersion||(n.CheckpointFormatVersion={}))[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(Jb||(Jb={}));const gm={};function e0(n){return gm[n]}function w(n,t,e,s,r){const o=t.inputParams[n];if(o&&void 0!==o.inputIndexStart){const a=o.inputIndexStart,l=0===o.inputIndexEnd?void 0:void 0===o.inputIndexEnd?a+1:o.inputIndexEnd,u=a<0?t.inputNames.length+a:a;if("tensor"===o.type)return un(t.inputNames[u],e,s,r);if("tensors"===o.type){const d=t.inputs.slice(a,l);return t.inputNames.slice(a,l).filter((f,g)=>{var m;return"NoOp"!==(null===(m=d[g])||void 0===m?void 0:m.op)}).map(f=>un(f,e,s,r))}const c=un(t.inputNames[u],e,s,r),h=c.dataSync();return"number"===o.type?h[0]:ns(c.shape,h)}const i=t.attrParams[n];return i&&i.value}function un(n,t,e,s){const[r,o]=Mn(n,e);if(null!=s){const a=s.getHashTableHandleByName(r);if(null!=a)return a}const i=e.currentContextIds.find(a=>!!t[Sc(r,a)]);return void 0!==i?t[Sc(r,i)][o]:void 0}function t0(n,t,e){return t[Sc(n,e.currentContextId)]}function nr(n,t){const[e,s,r]=Mn(n,t);return[Sc(e,t&&t.currentContextId),s,r]}function Sc(n,t){return t?`${n}-${t}`:n}function Mn(n,t){if(""===n)return["",0,void 0];const e=null!=t&&null!=t.parseNodeNameCache;if(e){const o=t.parseNodeNameCache.get(n);if(null!=o)return o}const s=n.split(":");let r;if(1===s.length)r=[n,0,void 0];else{const i=3===s.length?s[1]:void 0;r=[s[0],Number(s[s.length-1]),i]}return e&&t.parseNodeNameCache.set(n,r),r}function Nc(n,t,e){let s=w("pad",n,t,e);if("explicit"===s){s=w("explicitPaddings",n,t,e);const r=[[0,0],[0,0],[0,0],[0,0]];for(let o=0;o<4;o++)r[o][0]=s[2*o],r[o][1]=s[2*o+1];return r}return s}function sr(n){return n.kept?n:qs(n)}const d$=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],p$=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],f$=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],m$=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],g$=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],A$=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],y$=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],x$=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],b$=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],w$=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],I$=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}],C$=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}],v$=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}],S$=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],N$=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],T$=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],k$=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],E$=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],_$=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class n0{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[Ee,Me,ye,G,le,fe,J,ie,be,ve,at,Ut,Bt,ts,Vn,Xe,rt,ot,re].map(s=>s.json));this.opMappers=e.reduce((s,r)=>(s[r.tfOpName]=r,s),{})}transformGraph(t,e={}){const r=[],o=[],i=[],a=t.node.reduce((g,m)=>(g[m.name]=this.mapNode(m),m.op.startsWith("Placeholder")?r.push(g[m.name]):"Const"===m.op?o.push(g[m.name]):(null==m.input||0===m.input.length)&&i.push(g[m.name]),g),{});let l=[];const u=[];let c={},h={};null!=e&&(c=this.mapSignatureEntries(e.inputs),h=this.mapSignatureEntries(e.outputs));const d=Object.keys(a);d.forEach(g=>{const m=a[g];m.inputNames.forEach((A,y)=>{const[x,,b]=nr(A),I=a[x];if(null!=I.outputs){const S=I.outputs.indexOf(b);-1!==S&&(m.inputNames[y]=`${x}:${S}`)}m.inputs.push(I),I.children.push(m)})}),0===Object.keys(h).length?d.forEach(g=>{const m=a[g];0===m.children.length&&u.push(m)}):Object.keys(h).forEach(g=>{const[m]=nr(g),A=a[m];null!=A&&(A.signatureKey=h[g],u.push(A))}),Object.keys(c).length>0?Object.keys(c).forEach(g=>{const[m]=nr(g),A=a[m];A&&(A.signatureKey=c[g],l.push(A))}):l=r;let p={};null!=t.library&&null!=t.library.function&&(p=t.library.function.reduce((g,m)=>(g[m.signature.name]=this.mapFunction(m),g),{}));const f={nodes:a,inputs:l,outputs:u,weights:o,placeholders:r,signature:e,functions:p};return i.length>0&&(f.initNodes=i),f}mapSignatureEntries(t){return Object.keys(t||{}).reduce((e,s)=>(e[t[s].name]=s,e),{})}mapNode(t){const e=e0(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const s={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map(r=>r.startsWith("^")?r.slice(1):r),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr,outputs:e.outputs};return null!=e.inputs&&(s.inputParams=e.inputs.reduce((r,o)=>(r[o.name]={type:o.type,inputIndexStart:o.start,inputIndexEnd:o.end},r),{})),null!=e.attrs&&(s.attrParams=e.attrs.reduce((r,o)=>{const i=o.type;let a;switch(o.type){case"string":a=Am(t.attr,o.tfName,o.defaultValue),void 0===a&&o.tfDeprecatedName&&(a=Am(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"string[]":a=Sm(t.attr,o.tfName,o.defaultValue),void 0===a&&o.tfDeprecatedName&&(a=Sm(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"number":a=xm(t.attr,o.tfName,o.defaultValue||0),void 0===a&&o.tfDeprecatedName&&(a=xm(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"number[]":a=vm(t.attr,o.tfName,o.defaultValue),void 0===a&&o.tfDeprecatedName&&(a=vm(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"bool":a=ym(t.attr,o.tfName,o.defaultValue),void 0===a&&o.tfDeprecatedName&&(a=ym(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"bool[]":a=Tm(t.attr,o.tfName,o.defaultValue),void 0===a&&o.tfDeprecatedName&&(a=Tm(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"shape":a=Cm(t.attr,o.tfName,o.defaultValue),void 0===a&&o.tfDeprecatedName&&(a=Cm(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"shape[]":a=Nm(t.attr,o.tfName,o.defaultValue),void 0===a&&o.tfDeprecatedName&&(a=Nm(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"dtype":a=wm(t.attr,o.tfName,o.defaultValue),void 0===a&&o.tfDeprecatedName&&(a=wm(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"dtype[]":a=Im(t.attr,o.tfName,o.defaultValue),void 0===a&&o.tfDeprecatedName&&(a=Im(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"func":a=r0(t.attr,o.tfName,o.defaultValue),void 0===a&&o.tfDeprecatedName&&(a=r0(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${o.type} for op: ${t.op}`)}return r[o.name]={value:a,type:i},r},{})),s}mapFunction(t){const e=t.nodeDef,r=[];let o={};null!=e&&(o=e.reduce((h,d)=>(h[d.name]=this.mapNode(d),"Const"===d.op&&r.push(h[d.name]),h),{}));const i=[],a=[];t.signature.inputArg.forEach(h=>{const[d]=nr(h.name),p={name:d,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:bm(h.type),type:"dtype"}},children:[]};p.signatureKey=h.name,i.push(p),o[d]=p}),Object.keys(o).forEach(h=>{const d=o[h];d.inputNames.forEach((p,f)=>{const[g,,m]=nr(p),A=o[g];if(null!=A.outputs){const y=A.outputs.indexOf(m);-1!==y&&(d.inputNames[f]=`${g}:${y}`)}d.inputs.push(A),A.children.push(d)})});const u=t.ret;t.signature.outputArg.forEach(h=>{const[d,p]=nr(u[h.name]),f=o[d];null!=f&&(f.defaultOutput=p,a.push(f))});const c=this.mapArgsToSignature(t);return{nodes:o,inputs:i,outputs:a,weights:r,placeholders:[],signature:c}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce((e,s)=>(e[s.name]=this.mapArgToTensorInfo(s),e),{}),outputs:t.signature.outputArg.reduce((e,s)=>(e[s.name]=this.mapArgToTensorInfo(s,t.ret),e),{})}}mapArgToTensorInfo(t,e){let s=t.name;return null!=e&&(s=e[s]),{name:s,dtype:t.type}}}function s0(n,t){const e=Array.isArray(n)?String.fromCharCode.apply(null,n):function D$(n){const t=W().global;if(typeof t.atob<"u")return t.atob(n);if(typeof Buffer<"u")return new Buffer(n,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(n);return t?e:e.toLowerCase()}function Am(n,t,e,s=!1){const r=n[t];return null!=r?s0(r.s,s):e}function ym(n,t,e){const s=n[t];return s?s.b:e}function xm(n,t,e){const s=n[t]||{},r=null!=s.i?s.i:null!=s.f?s.f:e;return"number"==typeof r?r:parseInt(r,10)}function bm(n){switch("string"==typeof n&&(n=Ns[n]),n){case Ns.DT_FLOAT:case Ns.DT_HALF:return"float32";case Ns.DT_INT32:case Ns.DT_INT64:case Ns.DT_INT8:case Ns.DT_UINT8:return"int32";case Ns.DT_BOOL:return"bool";case Ns.DT_DOUBLE:return"float32";case Ns.DT_STRING:return"string";default:return null}}function r0(n,t,e){const s=n[t];return s&&s.func?s.func.name:e}function wm(n,t,e){const s=n[t];return s&&s.type?bm(s.type):e}function Im(n,t,e){const s=n[t];return s&&s.list&&s.list.type?s.list.type.map(r=>bm(r)):e}function o0(n){if(!n.unknownRank)return null!=n.dim?n.dim.map(t=>"number"==typeof t.size?t.size:parseInt(t.size,10)):[]}function Cm(n,t,e){const s=n[t];return s&&s.shape?o0(s.shape):e}function vm(n,t,e){const s=n[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map(r=>"number"==typeof r?r:parseInt(r,10)):e}function Sm(n,t,e,s=!1){const r=n[t];return r&&r.list&&r.list.s?r.list.s.map(o=>s0(o,s)):e}function Nm(n,t,e){const s=n[t];return s&&s.list&&s.list.shape?s.list.shape.map(r=>o0(r)):e}function Tm(n,t,e){const s=n[t];return s&&s.list&&s.list.b?s.list.b:e}class R${constructor(t,e,s){this.node=t,this.tensorMap=e,this.context=s,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map(r=>this.getInput(r)),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce((r,o)=>(r[o]=this.getAttr(o),r),{}))}getInput(t){return un(t,this.tensorMap,this.context)}getAttr(t,e){const s=this.node.rawAttrs[t];if(null!=s.tensor)return un(t,this.tensorMap,this.context);if(null!=s.i||null!=s.f)return xm(this.node.rawAttrs,t,e);if(null!=s.s)return Am(this.node.rawAttrs,t,e);if(null!=s.b)return ym(this.node.rawAttrs,t,e);if(null!=s.shape)return Cm(this.node.rawAttrs,t,e);if(null!=s.type)return wm(this.node.rawAttrs,t,e);if(null!=s.list){if(null!=s.list.i||null!=s.list.f)return vm(this.node.rawAttrs,t,e);if(null!=s.list.s)return Sm(this.node.rawAttrs,t,e);if(null!=s.list.shape)return Nm(this.node.rawAttrs,t,e);if(null!=s.list.b)return Tm(this.node.rawAttrs,t,e);if(null!=s.list.type)return Im(this.node.rawAttrs,t,e)}return e}}function ds(n,t,e=""){if("number"!=typeof n&&"number"!=typeof t){v(n.length===t.length,()=>e+` Shapes ${n} and ${t} must match`);for(let s=0;s<n.length;s++){const r=n[s],o=t[s];v(r<0||o<0||r===o,()=>e+` Shapes ${n} and ${t} must match`)}}}function i0(n){return!("number"==typeof n||n.some(t=>t<0))}function Xa(n,t,e){let s=km(n,e);const r=!i0(s);if(r&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);if(r&&t.forEach(o=>{s=km(o.shape,s)}),!i0(s))throw new Error(`Non-fully-defined elementShape: ${s}`);return s}function km(n,t){if("number"==typeof n)return t;if("number"==typeof t)return n;if(n.length!==t.length)throw new Error(`Incompatible ranks during merge: ${n} vs. ${t}`);const e=[];for(let s=0;s<n.length;++s){const r=n[s],o=t[s];if(r>=0&&o>=0&&r!==o)throw new Error(`Incompatible shape during merge: ${n} vs. ${t}`);e[s]=r>=0?r:o}return e}class O${constructor(t,e,s,r,o,i,a){this.name=t,this.dtype=e,this.maxSize=s,this.elementShape=r,this.identicalElementShapes=o,this.dynamicSize=i,this.clearAfterRead=a,this.tensors=[],this.closed_=!1,this.idTensor=ke(0),en(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach(e=>{(null==t||!t.has(e.tensor.id))&&e.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map(e=>this.read(e))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const s=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0===this.size()&&(null==this.elementShape||0===this.elementShape.length)&&(this.elementShape=e.shape),ds(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),s.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(s.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);s.tensor=e,en(e),s.written=!0,this.tensors[t]=s}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach((s,r)=>this.write(s,e[r]))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let r=0;r<this.size();r++)t.push(r)}if(0===t.length)return St([],[0].concat(this.elementShape));const s=this.readMany(t);return ds(this.elementShape,s[0].shape,"TensorArray shape mismatch: "),Qn(s,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return St([],[0].concat(this.elementShape));const e=[];for(let r=0;r<this.size();r++)e.push(r);const s=this.readMany(e);return ds(this.elementShape,s[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${s[0].shape})`),zt(s,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(!this.dynamicSize&&s>=this.maxSize)throw new Error(`Max index must be < array size (${s}  vs. ${this.maxSize})`);this.writeMany(t,ls(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let s=0;const r=t.map(l=>(s+=l,s));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const o=0===s?0:e.size/s,i=[];U(()=>{e=M(e,[1,s,o]);for(let l=0;l<t.length;++l)i[l]=M(Ye(e,[0,0===l?0:r[l-1],0],[1,t[l],o]),this.elementShape);return i});const a=[];for(let l=0;l<t.length;l++)a[l]=l;this.writeMany(a,i)}}class po{get id(){return this.idTensor.id}constructor(t,e,s,r=-1){this.tensors=t,this.elementShape=e,this.elementDtype=s,null!=t&&t.forEach(o=>{if(s!==o.dtype)throw new Error(`Invalid data types; op elements ${s}, but list elements ${o.dtype}`);ds(e,o.shape,"TensorList shape mismatch: "),en(o)}),this.idTensor=ke(0),this.maxNumElements=r,en(this.idTensor)}copy(){return new po([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach(e=>{(null==t||!t.has(e.id))&&e.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,s=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(-1!==s&&this.tensors.length!==s)throw new Error(`Operation expected a list with ${s} elements but got a list with ${this.tensors.length} elements.`);ds(t,this.elementShape,"TensorList shape mismatch: ");const r=Xa(this.elementShape,this.tensors,t);return U(()=>{const o=this.tensors.map(i=>M(i,r));return Qn(o,0)})}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const s=Xa(this.elementShape,this.tensors,t),r=this.tensors.pop();return r.kept=!1,ds(r.shape,t,"TensorList shape mismatch: "),M(r,s)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(ds(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");en(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`);if(-1!==this.maxNumElements&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);const e=new po([],this.elementShape,this.elementDtype,this.maxNumElements);e.tensors.length=t;for(let s=0;s<Math.min(this.tensors.length,t);++s)e.tensors[s]=this.tensors[s];return e}getItem(t,e,s){if(s!==this.elementDtype)throw new Error(`Invalid data types; op elements ${s}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[t])throw new Error(`element at index ${t} is null.`);ds(this.tensors[t].shape,e,"TensorList shape mismatch: ");const r=Xa(this.elementShape,this.tensors,e);return M(this.tensors[t],r)}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||-1!==this.maxNumElements&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);ds(this.elementShape,e.shape,"TensorList shape mismatch: "),en(e),null!=this.tensors[t]&&(this.tensors[t].kept=!1),this.tensors[t]=e}gather(t,e,s){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);ds(this.elementShape,s,"TensorList shape mismatch: "),t=t.slice(0,this.size());const r=Xa(this.elementShape,this.tensors,s);return 0===t.length?St([],[0].concat(r)):U(()=>{const o=t.map(i=>M(this.tensors[i],r));return Qn(o,0)})}concat(t,e){if(t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);ds(this.elementShape,e,"TensorList shape mismatch: ");const s=Xa(this.elementShape,this.tensors,e);return 0===this.size()?St([],[0].concat(s)):U(()=>{const r=this.tensors.map(o=>M(o,s));return zt(r,0)})}}const z$=function(){var n=(0,q.Z)(function*(t,e,s){switch(t.op){case"If":case"StatelessIf":{const r=w("thenBranch",t,e,s),o=w("elseBranch",t,e,s),i=w("cond",t,e,s),a=w("args",t,e,s);return(yield i.data())[0]?s.functionMap[r].executeFunctionAsync(a,s.tensorArrayMap,s.tensorListMap):s.functionMap[o].executeFunctionAsync(a,s.tensorArrayMap,s.tensorListMap)}case"While":case"StatelessWhile":{const r=w("body",t,e,s),o=w("cond",t,e,s),i=w("args",t,e,s),a=yield s.functionMap[o].executeFunctionAsync(i,s.tensorArrayMap,s.tensorListMap),l=i.map(h=>h.id);let u=yield a[0].data();a.forEach(h=>{!h.kept&&-1===l.indexOf(h.id)&&h.dispose()});let c=i;for(;u[0];){const h=c;c=yield s.functionMap[r].executeFunctionAsync(c,s.tensorArrayMap,s.tensorListMap);const d=c.map(f=>f.id);h.forEach(f=>{!f.kept&&-1===l.indexOf(f.id)&&-1===d.indexOf(f.id)&&f.dispose()});const p=yield s.functionMap[o].executeFunctionAsync(c,s.tensorArrayMap,s.tensorListMap);u=yield p[0].data(),p.forEach(f=>{!f.kept&&-1===l.indexOf(f.id)&&-1===d.indexOf(f.id)&&f.dispose()})}return c}case"LoopCond":return[sr(w("pred",t,e,s))];case"Switch":{const r=w("pred",t,e,s);let o=w("data",t,e,s);return o.kept||(o=sr(o)),(yield r.data())[0]?[void 0,o]:[o,void 0]}case"Merge":{const r=t.inputNames.find(o=>void 0!==un(o,e,s));return r?[sr(un(r,e,s))]:void 0}case"Enter":{const r=w("frameName",t,e,s),o=w("tensor",t,e,s);return s.enterFrame(r),[sr(o)]}case"Exit":{const r=w("tensor",t,e,s);return s.exitFrame(),[sr(r)]}case"NextIteration":{const r=w("tensor",t,e,s);return s.nextIteration(),[sr(r)]}case"TensorArrayV3":{const r=w("size",t,e,s),o=w("dtype",t,e,s),i=w("elementShape",t,e,s),a=w("dynamicSize",t,e,s),l=w("clearAfterRead",t,e,s),u=w("identicalElementShapes",t,e,s),c=w("name",t,e,s),h=new O$(c,o,r,i,u,a,l);return s.addTensorArray(h),[h.idTensor,ke(1)]}case"TensorArrayWriteV3":{const r=w("tensorArrayId",t,e,s),o=w("index",t,e,s),i=w("tensor",t,e,s),a=s.getTensorArray(r.id);return a.write(o,i),[a.idTensor]}case"TensorArrayReadV3":{const r=w("tensorArrayId",t,e,s),o=w("index",t,e,s);return[s.getTensorArray(r.id).read(o)]}case"TensorArrayGatherV3":{const r=w("tensorArrayId",t,e,s),o=w("indices",t,e,s),i=w("dtype",t,e,s);return[s.getTensorArray(r.id).gather(o,i)]}case"TensorArrayScatterV3":{const r=w("tensorArrayId",t,e,s),o=w("indices",t,e,s),i=w("tensor",t,e,s),a=s.getTensorArray(r.id);return a.scatter(o,i),[a.idTensor]}case"TensorArrayConcatV3":{const r=w("tensorArrayId",t,e,s),o=s.getTensorArray(r.id),i=w("dtype",t,e,s);return[o.concat(i)]}case"TensorArraySplitV3":{const r=w("tensorArrayId",t,e,s),o=w("tensor",t,e,s),i=w("lengths",t,e,s),a=s.getTensorArray(r.id);return a.split(i,o),[a.idTensor]}case"TensorArraySizeV3":{const r=w("tensorArrayId",t,e,s);return[ke(s.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=w("tensorArrayId",t,e,s),o=s.getTensorArray(r.id);return o.clearAndClose(),[o.idTensor]}case"TensorListSetItem":{const r=w("tensorListId",t,e,s),o=w("index",t,e,s),i=w("tensor",t,e,s),a=s.getTensorList(r.id);return a.setItem(o,i),[a.idTensor]}case"TensorListGetItem":{const r=w("tensorListId",t,e,s),o=w("index",t,e,s),i=w("elementShape",t,e,s),a=w("elementDType",t,e,s);return[s.getTensorList(r.id).getItem(o,i,a)]}case"TensorListScatterV2":case"TensorListScatter":{const r=w("indices",t,e,s),l=function M$(n,t,e,s){if(t.length!==n.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${n.shape[0]}`);const r=Math.max(...t);if(null!=s&&-1!==s&&r>=s)throw new Error(`Max index must be < array size (${r}  vs. ${s})`);const o=new po([],e,n.dtype,s),i=ls(n,0);return t.forEach((a,l)=>{o.setItem(a,i[l])}),o}(w("tensor",t,e,s),r,w("elementShape",t,e,s),w("numElements",t,e,s));return s.addTensorList(l),[l.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=w("elementShape",t,e,s),o=w("elementDType",t,e,s);let i;i="TensorListReserve"===t.op?"numElements":"maxNumElements";const a=w(i,t,e,s),u=function P$(n,t,e,s){return new po([],n,t,s)}(r,o,0,"TensorListReserve"===t.op?-1:a);return s.addTensorList(u),[u.idTensor]}case"TensorListGather":{const r=w("tensorListId",t,e,s),o=w("indices",t,e,s),i=w("elementShape",t,e,s),a=w("elementDType",t,e,s);return[s.getTensorList(r.id).gather(o,a,i)]}case"TensorListStack":{const r=w("tensorListId",t,e,s),o=w("elementShape",t,e,s),i=w("elementDType",t,e,s),a=w("numElements",t,e,s);return[s.getTensorList(r.id).stack(o,i,a)]}case"TensorListFromTensor":{const a=function L$(n,t,e){const s=n.dtype;if(n.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${n.shape}`);if(n.dtype!==e)throw new Error(`Invalid data types; op elements ${n.dtype}, but list elements ${e}`);ds(n.shape.slice(1),t,"TensorList shape mismatch: ");const o=ls(n);return new po(o,t,s)}(w("tensor",t,e,s),w("elementShape",t,e,s),w("elementDType",t,e,s));return s.addTensorList(a),[a.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=w("tensorListId",t,e,s),o=s.getTensorList(r.id),i=w("dtype",t,e,s),a=w("elementShape",t,e,s);return[o.concat(i,a)]}case"TensorListPushBack":{const r=w("tensorListId",t,e,s),o=w("tensor",t,e,s),i=s.getTensorList(r.id);return i.pushBack(o),[i.idTensor]}case"TensorListPopBack":{const r=w("tensorListId",t,e,s),o=w("elementShape",t,e,s),i=w("elementDType",t,e,s);return[s.getTensorList(r.id).popBack(o,i)]}case"TensorListSplit":{const r=w("tensor",t,e,s),o=w("elementShape",t,e,s),a=function B$(n,t,e){let s=0;const r=t.map(c=>(s+=c,s));if(s!==n.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${n.shape}`);const i=km(n.shape.slice(1),e),a=0===s?0:n.size/s,l=U(()=>{const c=[];n=M(n,[1,s,a]);for(let h=0;h<t.length;++h)c[h]=M(Ye(n,[0,0===h?0:r[h-1],0],[1,t[h],a]),i);return n.dispose(),c}),u=new po([],e,n.dtype,t.length);for(let c=0;c<l.length;c++)u.setItem(c,l[c]);return u}(r,w("lengths",t,e,s),o);return s.addTensorList(a),[a.idTensor]}case"TensorListLength":{const r=w("tensorListId",t,e,s);return[ke(s.getTensorList(r.id).size(),"int32")]}case"TensorListResize":{const r=w("tensorListId",t,e,s),o=w("size",t,e,s),a=s.getTensorList(r.id).resize(o);return s.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${t.op} is not implemented`)}});return function(e,s,r){return n.apply(this,arguments)}}();function a0(n,t,e){const[s,r]=w("fusedOps",n,t,e),o="biasadd"===s,i=!o,a="prelu"===r,l="fusedbatchnorm"===s,u=w("numArgs",n,t,e);if(o){if(a&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!a&&o&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=w("strides",n,t,e),h=Nc(n,t,e),d=w("dataFormat",n,t,e).toUpperCase(),p=w("dilations",n,t,e);let[f,g]=w("args",n,t,e);return i&&(g=f,f=void 0),{stride:c,pad:h,dataFormat:d,dilations:p,biasArg:f,preluArg:g,activationFunc:r,leakyreluAlpha:w("leakyreluAlpha",n,t,e)}}function Em(n,t,e){return{boxes:w("boxes",n,t,e),scores:w("scores",n,t,e),maxOutputSize:w("maxOutputSize",n,t,e),iouThreshold:w("iouThreshold",n,t,e),scoreThreshold:w("scoreThreshold",n,t,e),softNmsSigma:w("softNmsSigma",n,t,e)}}const W$=function(){var n=(0,q.Z)(function*(t,e,s,r,o=Y){switch(t.op){case"NonMaxSuppressionV5":{const{boxes:i,scores:a,maxOutputSize:l,iouThreshold:u,scoreThreshold:c,softNmsSigma:h}=Em(t,e,s),d=yield o.image.nonMaxSuppressionWithScoreAsync(i,a,l,u,c,h);return[d.selectedIndices,d.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:i,scores:a,maxOutputSize:l,iouThreshold:u,scoreThreshold:c}=Em(t,e,s),h=w("padToMaxOutputSize",t,e,s),d=yield o.image.nonMaxSuppressionPaddedAsync(i,a,l,u,c,h);return[d.selectedIndices,d.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:i,scores:a,maxOutputSize:l,iouThreshold:u,scoreThreshold:c}=Em(t,e,s);return[yield o.image.nonMaxSuppressionAsync(i,a,l,u,c)]}case"Where":{const i=o.cast(w("condition",t,e,s),"bool"),a=[yield o.whereAsync(i)];return i.dispose(),a}case"ListDiff":return o.setdiff1dAsync(w("x",t,e,s),w("y",t,e,s));default:throw TypeError(`Node type ${t.op} is not implemented`)}});return function(e,s,r,o){return n.apply(this,arguments)}}();class K${get id(){return this.handle.id}constructor(t,e){this.keyDType=t,this.valueDType=e,this.handle=ke(0),this.tensorMap=new Map,en(this.handle)}clearAndClose(){this.tensorMap.forEach(t=>t.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return ke(this.size(),"int32")}import(t,e){var s=this;return(0,q.Z)(function*(){s.checkKeyAndValueTensor(t,e);const r=yield t.data();return s.tensorMap.forEach(o=>o.dispose()),s.tensorMap.clear(),U(()=>{const o=ls(e),i=r.length,a=o.length;v(i===a,()=>`The number of elements doesn't match, keys has ${i} elements, the values has ${a} elements.`);for(let l=0;l<i;l++){const u=r[l],c=o[l];en(c),s.tensorMap.set(u,c)}return s.handle})})()}find(t,e){var s=this;return(0,q.Z)(function*(){s.checkKeyAndValueTensor(t,e);const r=yield t.data();return U(()=>{const o=[];for(let i=0;i<r.length;i++){const l=s.findWithDefault(r[i],e);o.push(l)}return Qn(o)})})()}findWithDefault(t,e){const s=this.tensorMap.get(t);return null!=s?s:e}checkKeyAndValueTensor(t,e){if(t.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${t.dtype}`);if(e.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${e.dtype}`)}}const q$=function(){var n=(0,q.Z)(function*(t,e,s,r){switch(t.op){case"HashTable":case"HashTableV2":{const o=r.getHashTableHandleByName(t.name);if(null!=o)return[o];{const i=w("keyDType",t,e,s),a=w("valueDType",t,e,s),l=new K$(i,a);return r.addHashTable(t.name,l),[l.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{const o=w("tableHandle",t,e,s,r),i=w("keys",t,e,s),a=w("values",t,e,s);return[yield r.getHashTableById(o.id).import(i,a)]}case"LookupTableFind":case"LookupTableFindV2":{const o=w("tableHandle",t,e,s,r),i=w("keys",t,e,s),a=w("defaultValue",t,e,s);return[yield r.getHashTableById(o.id).find(i,a)]}case"LookupTableSize":case"LookupTableSizeV2":{const o=w("tableHandle",t,e,s,r);return[r.getHashTableById(o.id).tensorSize()]}default:throw TypeError(`Node type ${t.op} is not implemented`)}});return function(e,s,r,o){return n.apply(this,arguments)}}();function l0(n,t,e,s,r=U){const o=((i,a,l)=>{switch(i.category){case"arithmetic":return r(()=>((n,t,e,s=Y)=>{switch(n.op){case"BiasAdd":case"AddV2":case"Add":return[s.add(w("a",n,t,e),w("b",n,t,e))];case"AddN":return[s.addN(w("tensors",n,t,e))];case"FloorMod":case"Mod":return[s.mod(w("a",n,t,e),w("b",n,t,e))];case"Mul":return[s.mul(w("a",n,t,e),w("b",n,t,e))];case"RealDiv":case"Div":return[s.div(w("a",n,t,e),w("b",n,t,e))];case"DivNoNan":return[s.divNoNan(w("a",n,t,e),w("b",n,t,e))];case"FloorDiv":return[s.floorDiv(w("a",n,t,e),w("b",n,t,e))];case"Sub":return[s.sub(w("a",n,t,e),w("b",n,t,e))];case"Minimum":return[s.minimum(w("a",n,t,e),w("b",n,t,e))];case"Maximum":return[s.maximum(w("a",n,t,e),w("b",n,t,e))];case"Pow":return[s.pow(w("a",n,t,e),w("b",n,t,e))];case"SquaredDifference":return[s.squaredDifference(w("a",n,t,e),w("b",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,l));case"basic_math":return r(()=>((n,t,e,s=Y)=>{switch(n.op){case"Abs":case"ComplexAbs":return[s.abs(w("x",n,t,e))];case"Acos":return[s.acos(w("x",n,t,e))];case"Acosh":return[s.acosh(w("x",n,t,e))];case"Asin":return[s.asin(w("x",n,t,e))];case"Asinh":return[s.asinh(w("x",n,t,e))];case"Atan":return[s.atan(w("x",n,t,e))];case"Atan2":return[s.atan2(w("x",n,t,e),w("y",n,t,e))];case"Atanh":return[s.atanh(w("x",n,t,e))];case"Ceil":return[s.ceil(w("x",n,t,e))];case"Complex":return[s.complex(w("real",n,t,e),w("imag",n,t,e))];case"Cos":return[s.cos(w("x",n,t,e))];case"Cosh":return[s.cosh(w("x",n,t,e))];case"Elu":return[s.elu(w("x",n,t,e))];case"Erf":return[s.erf(w("x",n,t,e))];case"Exp":return[s.exp(w("x",n,t,e))];case"Expm1":return[s.expm1(w("x",n,t,e))];case"Floor":return[s.floor(w("x",n,t,e))];case"Log":return[s.log(w("x",n,t,e))];case"Log1p":return[s.log1p(w("x",n,t,e))];case"Imag":return[s.imag(w("x",n,t,e))];case"Neg":return[s.neg(w("x",n,t,e))];case"Reciprocal":return[s.reciprocal(w("x",n,t,e))];case"Real":return[s.real(w("x",n,t,e))];case"Relu":return[s.relu(w("x",n,t,e))];case"Round":return[s.round(w("x",n,t,e))];case"Selu":return[s.selu(w("x",n,t,e))];case"Sigmoid":return[s.sigmoid(w("x",n,t,e))];case"Sin":return[s.sin(w("x",n,t,e))];case"Sign":return[s.sign(w("x",n,t,e))];case"Sinh":return[s.sinh(w("x",n,t,e))];case"Softplus":return[s.softplus(w("x",n,t,e))];case"Sqrt":return[s.sqrt(w("x",n,t,e))];case"Square":return[s.square(w("x",n,t,e))];case"Tanh":return[s.tanh(w("x",n,t,e))];case"Tan":return[s.tan(w("x",n,t,e))];case"ClipByValue":return[s.clipByValue(w("x",n,t,e),w("clipValueMin",n,t,e),w("clipValueMax",n,t,e))];case"Relu6":return[s.relu6(w("x",n,t,e))];case"Rsqrt":return[s.rsqrt(un(n.inputNames[0],t,e))];case"LeakyRelu":return[s.leakyRelu(w("x",n,t,e),w("alpha",n,t,e))];case"Prelu":return[s.prelu(w("x",n,t,e),w("alpha",n,t,e))];case"IsNan":return[s.isNaN(un(n.inputNames[0],t,e))];case"IsInf":return[s.isInf(un(n.inputNames[0],t,e))];case"IsFinite":return[s.isFinite(un(n.inputNames[0],t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,l));case"control":return z$(i,a,l);case"convolution":return r(()=>((n,t,e,s=Y)=>{switch(n.op){case"Conv1D":{const r=w("stride",n,t,e),o=w("pad",n,t,e),i=w("dataFormat",n,t,e).toUpperCase(),a=w("dilation",n,t,e);return[s.conv1d(w("x",n,t,e),w("filter",n,t,e),r,o,i,a)]}case"Conv2D":{const r=w("strides",n,t,e),o=Nc(n,t,e),i=w("dataFormat",n,t,e).toUpperCase(),a=w("dilations",n,t,e);return[s.conv2d(w("x",n,t,e),w("filter",n,t,e),[r[1],r[2]],o,i,[a[1],a[2]])]}case"_FusedConv2D":{const{stride:r,pad:o,dataFormat:i,dilations:a,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:h}=a0(n,t,e);return[s.fused.conv2d({x:w("x",n,t,e),filter:w("filter",n,t,e),strides:[r[1],r[2]],pad:o,dataFormat:i,dilations:[a[1],a[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:h})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:o,dataFormat:i,dilations:a,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:h}=a0(n,t,e);return[s.fused.depthwiseConv2d({x:w("x",n,t,e),filter:w("filter",n,t,e),strides:[r[1],r[2]],pad:o,dataFormat:i,dilations:[a[1],a[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:h})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=w("outputShape",n,t,e),o=w("strides",n,t,e),i=Nc(n,t,e);return[s.conv2dTranspose(w("x",n,t,e),w("filter",n,t,e),r,[o[1],o[2]],i)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=w("strides",n,t,e),o=Nc(n,t,e),i=w("dilations",n,t,e),a=w("dataFormat",n,t,e).toUpperCase();return[s.depthwiseConv2d(w("input",n,t,e),w("filter",n,t,e),[r[1],r[2]],o,a,[i[1],i[2]])]}case"Conv3D":{const r=w("strides",n,t,e),o=w("pad",n,t,e),i=w("dataFormat",n,t,e).toUpperCase(),a=w("dilations",n,t,e);return[s.conv3d(w("x",n,t,e),w("filter",n,t,e),[r[1],r[2],r[3]],o,i,[a[1],a[2],a[3]])]}case"AvgPool":{const r=w("strides",n,t,e),o=w("pad",n,t,e),i=w("kernelSize",n,t,e);return[s.avgPool(w("x",n,t,e),[i[1],i[2]],[r[1],r[2]],o)]}case"MaxPool":{const r=w("strides",n,t,e),o=w("pad",n,t,e),i=w("kernelSize",n,t,e);return[s.maxPool(w("x",n,t,e),[i[1],i[2]],[r[1],r[2]],o)]}case"MaxPoolWithArgmax":{const r=w("strides",n,t,e),o=w("pad",n,t,e),i=w("kernelSize",n,t,e),a=w("includeBatchInIndex",n,t,e),{result:l,indexes:u}=s.maxPoolWithArgmax(w("x",n,t,e),[i[1],i[2]],[r[1],r[2]],o,a);return[l,u]}case"AvgPool3D":{const r=w("strides",n,t,e),o=w("pad",n,t,e),i=w("kernelSize",n,t,e);return[s.avgPool3d(w("x",n,t,e),[i[1],i[2],i[3]],[r[1],r[2],r[3]],o)]}case"MaxPool3D":{const r=w("strides",n,t,e),o=w("pad",n,t,e),i=w("kernelSize",n,t,e);return[s.maxPool3d(w("x",n,t,e),[i[1],i[2],i[3]],[r[1],r[2],r[3]],o)]}case"Dilation2D":{const r=w("strides",n,t,e),o=w("pad",n,t,e),i=w("dilations",n,t,e),a=r[1],l=r[2],u=i[1],c=i[2];return[s.dilation2d(w("x",n,t,e),w("filter",n,t,e),[a,l],o,[u,c],"NHWC")]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,l));case"creation":return r(()=>((n,t,e,s=Y)=>{switch(n.op){case"Fill":{const r=w("shape",n,t,e),o=w("dtype",n,t,e),i=w("value",n,t,e);return[s.fill(r,i,o)]}case"LinSpace":{const r=w("start",n,t,e),o=w("stop",n,t,e),i=w("num",n,t,e);return[s.linspace(r,o,i)]}case"Multinomial":{const r=w("logits",n,t,e),o=w("numSamples",n,t,e),i=w("seed",n,t,e);return[s.multinomial(r,o,i)]}case"OneHot":{const r=w("indices",n,t,e),o=w("depth",n,t,e),i=w("onValue",n,t,e),a=w("offValue",n,t,e),l=w("dtype",n,t,e);return[s.oneHot(r,o,i,a,l)]}case"Ones":return[s.ones(w("shape",n,t,e),w("dtype",n,t,e))];case"OnesLike":return[s.onesLike(w("x",n,t,e))];case"RandomStandardNormal":return[s.randomStandardNormal(w("shape",n,t,e),w("dtype",n,t,e),w("seed",n,t,e))];case"RandomUniform":return[s.randomUniform(w("shape",n,t,e),w("minval",n,t,e),w("maxval",n,t,e),w("dtype",n,t,e))];case"RandomUniformInt":return[s.randomUniformInt(w("shape",n,t,e),w("minval",n,t,e),w("maxval",n,t,e),w("seed",n,t,e))];case"Range":{const r=w("start",n,t,e),o=w("stop",n,t,e),i=w("step",n,t,e);return[s.range(r,o,i,w("dtype",n,t,e))]}case"TruncatedNormal":{const r=w("shape",n,t,e),o=w("mean",n,t,e),i=w("stdDev",n,t,e),a=w("seed",n,t,e);return[s.truncatedNormal(r,o,i,w("dtype",n,t,e),a)]}case"Zeros":return[s.zeros(w("shape",n,t,e),w("dtype",n,t,e))];case"ZerosLike":return[s.zerosLike(w("x",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,l));case"dynamic":return W$(i,a,l);case"evaluation":return r(()=>((n,t,e,s=Y)=>{switch(n.op){case"LowerBound":{const r=w("sortedSequence",n,t,e),o=w("values",n,t,e);return[s.lowerBound(r,o)]}case"TopKV2":{const r=w("x",n,t,e),o=w("k",n,t,e),i=w("sorted",n,t,e),a=s.topk(r,o,i);return[a.values,a.indices]}case"UpperBound":{const r=w("sortedSequence",n,t,e),o=w("values",n,t,e);return[s.upperBound(r,o)]}case"Unique":{const r=w("x",n,t,e),o=s.unique(r);return[o.values,o.indices]}case"UniqueV2":{const r=w("x",n,t,e),o=w("axis",n,t,e),i=s.unique(r,o);return[i.values,i.indices]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,l));case"image":return r(()=>((n,t,e,s=Y)=>{switch(n.op){case"ResizeBilinear":{const r=w("images",n,t,e),o=w("size",n,t,e),i=w("alignCorners",n,t,e),a=w("halfPixelCenters",n,t,e);return[s.image.resizeBilinear(r,[o[0],o[1]],i,a)]}case"ResizeNearestNeighbor":{const r=w("images",n,t,e),o=w("size",n,t,e),i=w("alignCorners",n,t,e),a=w("halfPixelCenters",n,t,e);return[s.image.resizeNearestNeighbor(r,[o[0],o[1]],i,a)]}case"CropAndResize":{const r=w("image",n,t,e),o=w("boxes",n,t,e),i=w("boxInd",n,t,e),a=w("cropSize",n,t,e),l=w("method",n,t,e),u=w("extrapolationValue",n,t,e);return[s.image.cropAndResize(r,o,i,a,l,u)]}case"ImageProjectiveTransformV3":{const r=w("images",n,t,e),o=w("transforms",n,t,e),i=w("outputShape",n,t,e),a=w("fillValue",n,t,e),l=w("interpolation",n,t,e),u=w("fillMode",n,t,e);return[s.image.transform(r,o,l.toLowerCase(),u.toLowerCase(),a,i)]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,l));case"graph":return r(()=>((n,t,e,s=Y)=>{switch(n.op){case"Const":return t[n.name];case"PlaceholderWithDefault":const r=w("default",n,t,e);return[un(n.name,t,e)||r];case"Placeholder":return[un(n.name,t,e)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[sr(w("x",n,t,e))];case"IdentityN":return w("x",n,t,e).map(c=>sr(c));case"Shape":return[s.tensor1d(w("x",n,t,e).shape,"int32")];case"ShapeN":return w("x",n,t,e).map(c=>s.tensor1d(c.shape));case"Size":return[s.scalar(w("x",n,t,e).size,"int32")];case"Rank":return[s.scalar(w("x",n,t,e).rank,"int32")];case"NoOp":return[s.scalar(1)];case"Print":const i=w("x",n,t,e),a=w("data",n,t,e),l=w("message",n,t,e),u=w("summarize",n,t,e);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(l);for(let c=0;c<a.length;c++)console.log(Array.prototype.slice.call(a[c].dataSync()).slice(0,u));return[i];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,l));case"logical":return r(()=>((n,t,e,s=Y)=>{switch(n.op){case"Equal":return[s.equal(w("a",n,t,e),w("b",n,t,e))];case"NotEqual":return[s.notEqual(w("a",n,t,e),w("b",n,t,e))];case"Greater":return[s.greater(w("a",n,t,e),w("b",n,t,e))];case"GreaterEqual":return[s.greaterEqual(w("a",n,t,e),w("b",n,t,e))];case"Less":return[s.less(w("a",n,t,e),w("b",n,t,e))];case"LessEqual":return[s.lessEqual(w("a",n,t,e),w("b",n,t,e))];case"LogicalAnd":return[s.logicalAnd(w("a",n,t,e),w("b",n,t,e))];case"LogicalNot":return[s.logicalNot(w("a",n,t,e))];case"LogicalOr":return[s.logicalOr(w("a",n,t,e),w("b",n,t,e))];case"Select":case"SelectV2":return[s.where(w("condition",n,t,e),w("a",n,t,e),w("b",n,t,e))];case"BitwiseAnd":return[s.bitwiseAnd(w("a",n,t,e),w("b",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,l));case"matrices":return r(()=>((n,t,e,s=Y)=>{switch(n.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[s.matMul(w("a",n,t,e),w("b",n,t,e),w("transposeA",n,t,e),w("transposeB",n,t,e))];case"Einsum":return[s.einsum(w("equation",n,t,e),...w("tensors",n,t,e))];case"Transpose":return[s.transpose(w("x",n,t,e),w("perm",n,t,e))];case"_FusedMatMul":const[r,o]=w("fusedOps",n,t,e),i="biasadd"===r,a="prelu"===o,l=w("numArgs",n,t,e),u=w("leakyreluAlpha",n,t,e);if(i){if(a&&2!==l)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!a&&1!==l)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,h]=w("args",n,t,e);return[s.fused.matMul({a:w("a",n,t,e),b:w("b",n,t,e),transposeA:w("transposeA",n,t,e),transposeB:w("transposeB",n,t,e),bias:c,activation:o,preluActivationWeights:h,leakyreluAlpha:u})];case"MatrixBandPart":return[s.linalg.bandPart(w("a",n,t,e),w("numLower",n,t,e),w("numUpper",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,l));case"normalization":return r(()=>((n,t,e,s=Y)=>{switch(n.op){case"EuclideanNorm":return[s.euclideanNorm(w("x",n,t,e),w("axis",n,t,e),w("keepDims",n,t,e))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[s.batchNorm(w("x",n,t,e),w("mean",n,t,e),w("variance",n,t,e),w("offset",n,t,e),w("scale",n,t,e),w("epsilon",n,t,e))];case"LRN":return[s.localResponseNormalization(w("x",n,t,e),w("radius",n,t,e),w("bias",n,t,e),w("alpha",n,t,e),w("beta",n,t,e))];case"Softmax":return[s.softmax(w("x",n,t,e))];case"LogSoftmax":return[s.logSoftmax(w("x",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,l));case"ragged":return r(()=>((n,t,e,s=Y)=>{switch(n.op){case"RaggedGather":{const{outputNestedSplits:r,outputDenseValues:o}=s.raggedGather(w("paramsNestedSplits",n,t,e),w("paramsDenseValues",n,t,e),w("indices",n,t,e),w("outputRaggedRank",n,t,e));return r.concat(o)}case"RaggedRange":{const{rtNestedSplits:r,rtDenseValues:o}=s.raggedRange(w("starts",n,t,e),w("limits",n,t,e),w("splits",n,t,e));return[r,o]}case"RaggedTensorToTensor":return[s.raggedTensorToTensor(w("shape",n,t,e),w("values",n,t,e),w("defaultValue",n,t,e),w("rowPartitionTensors",n,t,e),w("rowPartitionTypes",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,l));case"reduction":return r(()=>((n,t,e,s=Y)=>{switch(n.op){case"Max":{const a=w("axis",n,t,e),l=w("keepDims",n,t,e);return[s.max(w("x",n,t,e),a,l)]}case"Mean":{const a=w("axis",n,t,e),l=w("keepDims",n,t,e);return[s.mean(w("x",n,t,e),a,l)]}case"Min":{const a=w("axis",n,t,e),l=w("keepDims",n,t,e);return[s.min(w("x",n,t,e),a,l)]}case"Sum":{const a=w("axis",n,t,e),l=w("keepDims",n,t,e);return[s.sum(w("x",n,t,e),a,l)]}case"All":{const a=w("axis",n,t,e),l=w("keepDims",n,t,e);return[s.all(w("x",n,t,e),a,l)]}case"Any":{const a=w("axis",n,t,e),l=w("keepDims",n,t,e);return[s.any(w("x",n,t,e),a,l)]}case"ArgMax":{const a=w("axis",n,t,e);return[s.argMax(w("x",n,t,e),a)]}case"ArgMin":{const a=w("axis",n,t,e);return[s.argMin(w("x",n,t,e),a)]}case"Prod":{const a=w("axis",n,t,e),l=w("keepDims",n,t,e);return[s.prod(w("x",n,t,e),a,l)]}case"Cumprod":{const a=w("axis",n,t,e),l=w("exclusive",n,t,e),u=w("reverse",n,t,e);return[s.cumprod(w("x",n,t,e),a,l,u)]}case"Cumsum":{const a=w("axis",n,t,e),l=w("exclusive",n,t,e),u=w("reverse",n,t,e);return[s.cumsum(w("x",n,t,e),a,l,u)]}case"Bincount":const r=w("x",n,t,e),o=w("weights",n,t,e),i=w("size",n,t,e);return[s.bincount(r,o,i)];case"DenseBincount":{const a=w("x",n,t,e),l=w("weights",n,t,e),u=w("size",n,t,e),c=w("binaryOutput",n,t,e);return[s.denseBincount(a,l,u,c)]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,l));case"slice_join":return r(()=>((n,t,e,s=Y)=>{switch(n.op){case"ConcatV2":case"Concat":{const r=w("n",n,t,e),o=w("axis",n,t,e);let i=w("tensors",n,t,e);return i=i.slice(0,r),[s.concat(i,o)]}case"Gather":{const r=w("x",n,t,e),o=w("indices",n,t,e);return[s.gather(r,s.cast(o,"int32"),0)]}case"GatherV2":{const r=w("axis",n,t,e),o=w("batchDims",n,t,e),i=w("x",n,t,e),a=w("indices",n,t,e);return[s.gather(i,s.cast(a,"int32"),r,o)]}case"Reverse":{const r=w("dims",n,t,e),o=[];for(let a=0;a<r.length;a++)r[a]&&o.push(a);const i=w("x",n,t,e);return[s.reverse(i,o)]}case"ReverseV2":{const r=w("axis",n,t,e),o=w("x",n,t,e);return[s.reverse(o,r)]}case"Slice":{const r=w("begin",n,t,e),o=w("size",n,t,e);return[s.slice(w("x",n,t,e),r,o)]}case"StridedSlice":{const r=w("begin",n,t,e),o=w("end",n,t,e),i=w("strides",n,t,e),a=w("beginMask",n,t,e),l=w("endMask",n,t,e),u=w("ellipsisMask",n,t,e),c=w("newAxisMask",n,t,e),h=w("shrinkAxisMask",n,t,e),d=w("x",n,t,e);return[s.stridedSlice(d,r,o,i,a,l,u,c,h)]}case"Pack":return U(()=>{const r=w("axis",n,t,e),o=w("tensors",n,t,e),i=o[0].shape,a=s.squeeze(o[0]).shape,l=o.map(u=>{const c=Qe(u.shape,i);if(!c&&!Qe(s.squeeze(u).shape,a))throw new Error("the input tensors shape does not match");return c?u:s.reshape(u,i)});return[s.stack(l,r)]});case"Unpack":{const r=w("axis",n,t,e),o=w("tensor",n,t,e);return s.unstack(o,r)}case"Tile":{const r=w("reps",n,t,e);return[s.tile(w("x",n,t,e),r)]}case"Split":case"SplitV":{const r=w("axis",n,t,e),o=w("numOrSizeSplits",n,t,e),i=w("x",n,t,e);return s.split(i,o,r)}case"ScatterNd":{const r=w("indices",n,t,e),o=w("values",n,t,e),i=w("shape",n,t,e);return[s.scatterND(r,o,i)]}case"GatherNd":{const r=w("x",n,t,e),o=w("indices",n,t,e);return[s.gatherND(r,o)]}case"SparseToDense":{const r=w("sparseIndices",n,t,e),o=w("outputShape",n,t,e),i=w("sparseValues",n,t,e),a=w("defaultValue",n,t,e);return[s.sparseToDense(r,i,o,i.dtype===a.dtype?a:s.cast(a,i.dtype))]}case"TensorScatterUpdate":{const r=w("indices",n,t,e),o=w("values",n,t,e),i=w("tensor",n,t,e);return[s.tensorScatterUpdate(i,r,o)]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,l));case"sparse":return r(()=>((n,t,e,s=Y)=>{switch(n.op){case"SparseFillEmptyRows":{const{outputIndices:r,outputValues:o,emptyRowIndicator:i,reverseIndexMap:a}=s.sparse.sparseFillEmptyRows(w("indices",n,t,e),w("values",n,t,e),w("denseShape",n,t,e),w("defaultValue",n,t,e));return[r,o,i,a]}case"SparseReshape":{const{outputIndices:r,outputShape:o}=s.sparse.sparseReshape(w("inputIndices",n,t,e),w("inputShape",n,t,e),w("newShape",n,t,e));return[r,o]}case"SparseSegmentMean":return[s.sparse.sparseSegmentMean(w("data",n,t,e),w("indices",n,t,e),w("segmentIds",n,t,e))];case"SparseSegmentSum":return[s.sparse.sparseSegmentSum(w("data",n,t,e),w("indices",n,t,e),w("segmentIds",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,l));case"spectral":return r(()=>((n,t,e,s=Y)=>{switch(n.op){case"FFT":return[s.fft(w("x",n,t,e))];case"IFFT":return[s.ifft(w("x",n,t,e))];case"RFFT":return[s.rfft(w("x",n,t,e))];case"IRFFT":return[s.irfft(w("x",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,l));case"string":return r(()=>((n,t,e,s=Y)=>{switch(n.op){case"StaticRegexReplace":return[s.string.staticRegexReplace(w("input",n,t,e),w("pattern",n,t,e),w("rewrite",n,t,e),w("replaceGlobal",n,t,e))];case"StringNGrams":{const{nGrams:r,nGramsSplits:o}=s.string.stringNGrams(w("data",n,t,e),w("dataSplits",n,t,e),w("separator",n,t,e),w("nGramWidths",n,t,e),w("leftPad",n,t,e),w("rightPad",n,t,e),w("padWidth",n,t,e),w("preserveShortSequences",n,t,e));return[r,o]}case"StringSplit":{const{indices:r,values:o,shape:i}=s.string.stringSplit(w("input",n,t,e),w("delimiter",n,t,e),w("skipEmpty",n,t,e));return[r,o,i]}case"StringToHashBucketFast":return[s.string.stringToHashBucketFast(w("input",n,t,e),w("numBuckets",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,l));case"transformation":return r(()=>((n,t,e,s=Y)=>{switch(n.op){case"Cast":return[s.cast(w("x",n,t,e),w("dtype",n,t,e))];case"ExpandDims":{const r=w("axis",n,t,e);return[s.expandDims(w("x",n,t,e),r)]}case"Squeeze":{const r=w("axis",n,t,e);return[s.squeeze(w("x",n,t,e),r)]}case"Reshape":return[s.reshape(w("x",n,t,e),w("shape",n,t,e))];case"EnsureShape":return[s.ensureShape(w("x",n,t,e),w("shape",n,t,e))];case"MirrorPad":return[s.mirrorPad(w("x",n,t,e),w("padding",n,t,e),w("mode",n,t,e))];case"PadV2":case"Pad":return[s.pad(w("x",n,t,e),w("padding",n,t,e),w("constantValue",n,t,e))];case"SpaceToBatchND":{const r=w("blockShape",n,t,e),o=w("paddings",n,t,e);return[s.spaceToBatchND(w("x",n,t,e),r,o)]}case"BatchToSpaceND":{const r=w("blockShape",n,t,e),o=w("crops",n,t,e);return[s.batchToSpaceND(w("x",n,t,e),r,o)]}case"DepthToSpace":{const r=w("blockSize",n,t,e),o=w("dataFormat",n,t,e).toUpperCase();return[s.depthToSpace(w("x",n,t,e),r,o)]}case"BroadcastTo":return[s.broadcastTo(w("x",n,t,e),w("shape",n,t,e))];case"BroadcastArgs":return[s.broadcastArgs(w("s0",n,t,e),w("s1",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(i,a,l));case"hash_table":return q$(i,a,l,s);case"custom":const u=e0(i.op);if(u&&u.customExecutor)return u.customExecutor(new R$(i,a,l));throw TypeError(`Custom op ${i.op} is not registered.`);default:throw TypeError(`Unknown op '${i.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(n,t,e);return Gr(o)?o.then(i=>[].concat(i)):[].concat(o)}class u0{constructor(t={},e={},s={},r={},o){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=s,this.functionMap=r,this.parseNodeNameCache=o,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let e=0;e<this.contexts.length-1;e++){const s=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(s))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map(e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(const e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(const e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}}function c0(n,t,e,s){const r=new Set,o=[];let i=null,a=null;const l=new Set,u=new Set(Object.keys(n).map(d=>Mn(d)[0]));s=s||[];const c=new Set(s.map(d=>Mn(d.name)[0])),h=[...t];for(;h.length>0;){const d=h.pop();if((fo(d)||dF(d)||pF(d))&&null==i&&(i=d,a=i.children.map(p=>p.name).filter(p=>r.has(p))),r.add(d.name),null==e[d.name]&&!u.has(d.name)&&!c.has(d.name)){if(0===d.inputs.length){o.push(d.name);continue}d.inputs.forEach(p=>{l.has(p.name)||(l.add(p.name),h.push(p))})}}return{inputs:n,outputs:t,usedNodes:r,missingInputs:o,dynamicNode:i,syncInputs:a}}class Tc extends Error{constructor(t){super(`NodesExecutionOrderError: ${t}`)}}const uF=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),cF=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),hF=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function fo(n){return uF.has(n.op)}function dF(n){return cF.has(n.op)}function pF(n){return hF.has(n.op)}class kc{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map(s=>t[s].map(r=>r.id));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(t=>t.signatureKey||t.name)}get outputNodes(){return this._outputs.map(t=>{const e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e})}get functions(){return Object.keys(this._functions).reduce((t,e)=>(t[e]=this._functions[e].signature,t),{})}constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach(s=>{this._functionExecutorMap[s]=new kc(t.functions[s],this)})}getCompilationKey(t,e){const s=t.map(o=>o.name).sort(),r=e.map(o=>o.name).sort();return s.join(this.SEPARATOR)+"--"+r.join(this.SEPARATOR)}compile(t,e){const s=c0(t,e,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:o,syncInputs:i}=s;if(null!=o)throw new Error(`This execution contains the node '${o.name}', which has the dynamic op '${o.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${i}]`);if(r.length>0){const u=e.map(h=>h.name),c=Object.keys(t);throw new Error(`Cannot compute the outputs [${u}] from the provided inputs [${c}]. Missing the following inputs: [${r}]`)}const a=function oF(n,t){const{usedNodes:e,inputs:s}=t,i=m=>e.has("string"==typeof m?m:m.name);function a(m){return[...new Map(m.map(A=>[A.name,A])).values()]}const l=a([...Object.keys(s).map(m=>Mn(m)[0]).map(m=>n.nodes[m]),...n.weights,...n.initNodes||[]]).filter(i),u=a([...l,...Object.values(n.nodes)]).filter(i),c=new Map(u.map(m=>[m.name,m])),h={};for(const m of u){h[m.name]=h[m.name]||0;for(const A of m.children)i(A)||(h[A.name]=Number.POSITIVE_INFINITY),h[A.name]=(h[A.name]||0)+1}const d=Object.entries(h).filter(([,m])=>0===m).map(([m])=>m),p=[...d];for(;d.length>0;){const m=d.pop(),A=c.get(m);for(const y of A.children.filter(i))0==--h[y.name]&&(p.push(y.name),d.push(y.name))}const g=function iF(n,t){const e=new Map(n.map(i=>[i.name,i])),s=t.map(i=>i.name),r=new Set(s);for(;s.length>0;){const i=s.pop(),a=e.get(i);for(const l of a.children)!e.has(l.name)||r.has(l.name)||(r.add(l.name),s.push(l.name))}return n.filter(i=>r.has(i.name))}(p.map(m=>c.get(m)),l);return function aF(n,t){const e=new Map(n.map((a,l)=>[a.name,l])),s=new Set(t.map(a=>a.name)),r=a=>s.has("string"==typeof a?a:a.name),o=new Set(n.map(a=>a.name)),i=a=>o.has("string"==typeof a?a:a.name);for(const a of n){for(const l of a.children.filter(i)){if(!e.has(l.name))throw new Tc(`Child ${l.name} of node ${a.name} is unreachable.`);if(e.get(a.name)>e.get(l.name))throw new Tc(`Node ${a.name} is scheduled to run after its child ${l.name}.`)}if(!r(a))for(const l of a.inputs){if(!e.has(l.name))throw new Tc(`Input ${l.name} of node ${a.name} is unreachable.`);if(e.get(l.name)>e.get(a.name))throw new Tc(`Node ${a.name} is scheduled to run before its input ${l.name}.`)}}}(g,l),g}(this.graph,s),l=function lF(n){const t=new Map(n.map((a,l)=>[a.name,l])),e=Number.MAX_SAFE_INTEGER,s=n.map((a,l)=>fo(a)?e:l),r=a=>{const l=s[t.get(a.name)];return null==l?-1:l},o=n.map((a,l)=>a.children.map(r).reduce((u,c)=>Math.max(u,c),s[l])),i=new Map;for(let a=0;a<n.length;++a){const l=o[a];if(l===e)continue;const u=n[a],c=n[l];i.has(c.name)||i.set(c.name,[]),i.get(c.name).push(u)}return i}(a);return{orderedNodes:a,nodeLiveUntilMap:l}}cloneAndKeepTensor(t){if(null==t)return null;const e=t.clone();return en(e),e}cloneTensorList(t){return t?t.map(s=>this.cloneAndKeepTensor(s)):null}cloneTensorMap(t){return Object.fromEntries(Object.entries(t).map(([e,s])=>[e,this.cloneTensorList(s)]))}execute(t,e){this.disposeIntermediateTensors(),t=this.mapInputs(t);const s=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const r=s.map(d=>this.graph.nodes[Mn(d)[0]]),o=e.map(d=>Mn(d)[0]),i=new Set(o);let a=o.map(d=>this.graph.nodes[d]);0===a.length&&(a=this._outputs);const l=this.getCompilationKey(r,a);let u=this.compiledMap.get(l);null==u&&(u=this.compile(t,a),this.compiledMap.set(l,u));try{this.keepIntermediateTensors=W().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(d){this.keepIntermediateTensors=!1,console.warn(d.message)}const c={},h={};return U(()=>{const d=new u0(this.weightMap,c,h,this.functionExecutorMap,this.parseNodeNameCache),p=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(t).forEach(A=>{const[y,x]=Mn(A,d),b=[];b[x]=t[A],p[y]=b,this.keepIntermediateTensors&&(this.clonedTensorsMap[y]=this.cloneTensorList(b))});const f=this.getFrozenTensorIds(p),{orderedNodes:g,nodeLiveUntilMap:m}=u;for(const A of g){if(p[A.name])continue;const y=l0(A,p,d,this._resourceManager);if(Gr(y))throw new Error(`The execution of the op '${A.op}' returned a promise. Please use model.executeAsync() instead.`);p[A.name]=y,this.keepIntermediateTensors&&(this.clonedTensorsMap[A.name]=this.cloneTensorList(y)),this.checkTensorForDisposalWithNodeLiveUntilInfo(A,p,d,f,i,m.get(A.name))}return null==this.parent&&d.dispose(f),e.map(A=>un(A,p,d))})}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map(s=>t[s]).map(s=>s.map(r=>r.id)));return new Set(e)}checkTensorForDisposal(t,e,s,r,o,i,a){if(!fo(e)&&!i.has(t)){for(const l of s[t])null!=l&&(a[l.id]=(a[l.id]||0)+e.children.length);for(const l of e.inputs){if(fo(l))continue;const u=t0(l.name,s,r);if(null!=u)for(const c of u){if(!c||c.kept||o.has(c.id))continue;const h=a[c.id];1===h?(c.dispose(),delete a[c.id]):null!=h&&a[c.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(t,e,s,r,o,i){function a(l){return fo(l)||o.has(l.name)}if(!fo(t)&&null!=i)for(const l of i){if(a(l))continue;const u=t0(l.name,e,s);for(const c of u)!c||c.kept||r.has(c.id)||c.dispose()}}executeAsync(t,e){var s=this;return(0,q.Z)(function*(){return s._executeAsync(t,e)})()}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach(t=>{for(const e of t)e&&!e.isDisposed&&e.dispose()}),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}_executeAsync(t,e,s=!1,r={},o={}){var i=this;return(0,q.Z)(function*(){i.disposeIntermediateTensors(),s||(t=i.mapInputs(t),i.checkInputs(t),i.checkInputShapeAndType(t),e=i.mapOutputs(e),i.checkOutputs(e));try{i.keepIntermediateTensors=W().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(p){i.keepIntermediateTensors=!1,console.warn(p.message)}const a=new u0(i.weightMap,r,o,i.functionExecutorMap,i.parseNodeNameCache);i.keepIntermediateTensors&&(i.clonedTensorsMap=i.cloneTensorMap(i.weightMap));const l=yield i.executeWithControlFlow(t,a,e,s),u=e.map(p=>un(p,l,a)),c=u.map(p=>p.id),h=Object.keys(t).map(p=>t[p].id),d=new Set([...c,...h,...i.weightIds]);return Object.values(l).forEach(p=>{p.forEach(f=>{f&&!f.isDisposed&&!d.has(f.id)&&f.dispose()})}),null==i.parent&&a.dispose(d),u})()}executeFunctionAsync(t,e,s){var r=this;return(0,q.Z)(function*(){const o=t.reduce((i,a,l)=>(i[r.inputs[l].name]=a,i),{});return r._executeAsync(o,r.outputNodes,!0,e,s)})()}executeWithControlFlow(t,e,s,r){var o=this;return(0,q.Z)(function*(){const i=Object.keys(t),a=i.map(I=>o.graph.nodes[Mn(I)[0]]),l=s.map(I=>Mn(I)[0]),u=new Set(l);let c=l.map(I=>o.graph.nodes[I]);0===c.length&&(c=o._outputs);const{usedNodes:h,missingInputs:d,dynamicNode:p,syncInputs:f}=c0(t,c,o.weightMap,o._initNodes),g=[...a,...o.graph.weights,...o._initNodes||[]].map(I=>({node:I,contexts:e.currentContext})),m=Object.assign({},o.weightMap);Object.keys(t).forEach(I=>{const[S,k]=Mn(I),E=[];E[k]=t[I],m[S]=E});const A={},y=o.getFrozenTensorIds(m),x={};for(;g.length>0;){const I=o.processStack(a,g,e,m,x,y,u,A,h);yield Promise.all(I)}null==p&&!r&&console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const b=c.filter(I=>!fo(I)&&!un(I.name,m,e)).map(I=>I.name);if(b.length>0){let I="";throw null!=p&&(I=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${f}]`),new Error(`Cannot compute the outputs [${b}] from the provided inputs [${i}]. Consider providing the following inputs: [${d}]. ${I}`)}return m})()}processStack(t,e,s,r,o,i,a,l,u){const c=[];for(;e.length>0;){const h=e.pop();s.currentContext=h.contexts;let d="";if("Enter"===h.node.op&&w("isConstant",h.node,r,s)&&([d]=nr(h.node.name,s)),null==r[h.node.name]){const p=l0(h.node,r,s,this._resourceManager);d||([d]=nr(h.node.name,s));const f=s.currentContext;Gr(p)?c.push(p.then(g=>(r[d]=g,this.keepIntermediateTensors&&(this.clonedTensorsMap[d]=this.cloneTensorList(g)),s.currentContext=f,this.checkTensorForDisposal(d,h.node,r,s,i,a,l),this.processChildNodes(h.node,e,s,r,o,u),g))):(r[d]=p,this.keepIntermediateTensors&&(this.clonedTensorsMap[d]=this.cloneTensorList(p)),this.checkTensorForDisposal(d,h.node,r,s,i,a,l),this.processChildNodes(h.node,e,s,r,o,u))}else this.processChildNodes(h.node,e,s,r,o,u)}return c}processChildNodes(t,e,s,r,o,i){t.children.forEach(a=>{const[l]=nr(a.name,s);o[l]||!i.has(a.name)||("Merge"===a.op?a.inputNames.some(u=>!!un(u,r,s))&&(o[l]=!0,e.push({contexts:s.currentContext,node:a})):a.inputNames.every(u=>!!un(u,r,s))&&(o[l]=!0,e.push({contexts:s.currentContext,node:a})))})}dispose(){Object.keys(this.weightMap).forEach(t=>this.weightMap[t].forEach(e=>e.dispose()))}checkInputShapeAndType(t){Object.keys(t).forEach(e=>{const s=t[e],[r]=Mn(e),o=this.graph.nodes[r];if(o.attrParams.shape&&o.attrParams.shape.value){const i=o.attrParams.shape.value;v(i.length===s.shape.length&&s.shape.every((l,u)=>-1===i[u]||i[u]===l),()=>`The shape of dict['${o.name}'] provided in model.execute(dict) must be [${i}], but was [${s.shape}]`)}o.attrParams.dtype&&o.attrParams.dtype.value&&v(s.dtype===o.attrParams.dtype.value,()=>`The dtype of dict['${o.name}'] provided in model.execute(dict) must be ${o.attrParams.dtype.value}, but was ${s.dtype}`)})}mapInputs(t){var e,s;const r={};for(const o in t){const i=null===(s=null===(e=this._signature)||void 0===e?void 0:e.inputs)||void 0===s?void 0:s[o];null!=i?r[i.name]=t[o]:r[o]=t[o]}return r}checkInputs(t){const e=Object.keys(t).filter(s=>{const[r]=Mn(s);return null==this.graph.nodes[r]});if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map(e=>{var s,r;const o=null===(r=null===(s=this._signature)||void 0===s?void 0:s.outputs)||void 0===r?void 0:r[e];return null!=o?o.name:e},{})}checkOutputs(t){t.forEach(e=>{const[s]=Mn(e);if(!this.graph.nodes[s])throw new Error(`The output '${e}' is not found in the graph`)})}}class fF{constructor(t={},e={}){this.hashTableNameToHandle=t,this.hashTableMap=e}addHashTable(t,e){this.hashTableNameToHandle[t]=e.handle,this.hashTableMap[e.id]=e}getHashTableHandleByName(t){return this.hashTableNameToHandle[t]}getHashTableById(t){return this.hashTableMap[t]}dispose(){for(const t in this.hashTableMap)this.hashTableMap[t].clearAndClose(),delete this.hashTableMap[t];for(const t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}}class h0{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(t,e={},s=Fe){this.modelUrl=t,this.loadOptions=e,this.version="n/a",this.io=s,null==e&&(this.loadOptions={}),this.resourceManager=new fF}findIOHandler(){const t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(t,this.loadOptions);else{const e=this.io.getLoadHandlers(t,this.loadOptions);if(0===e.length)e.push(this.io.browserHTTPRequest(t,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);this.handler=e[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const t=this.handler.load();return Gr(t)?t.then(e=>this.loadSync(e)):this.loadSync(t)}loadSync(t){this.artifacts=t;const e=this.artifacts.modelTopology;let s=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const o=this.artifacts.userDefinedMetadata;null!=o.signature&&(s=o.signature),null!=o.structuredOutputKeys&&(this.structuredOutputKeys=o.structuredOutputKeys)}this.signature=s,this.version=`${e.versions.producer}.${e.versions.minConsumer}`;const r=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new kc(n0.Instance.transformGraph(e,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=t.modelInitializer&&null!=t.modelInitializer.node){const o=n0.Instance.transformGraph(t.modelInitializer);this.initializer=new kc(o),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=t.initializerSignature}return!0}save(t,e){var s=this;return(0,q.Z)(function*(){if("string"==typeof t){const r=s.io.getSaveHandlers(t);if(0===r.length)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(r.length>1)throw new Error(`Found more than one (${r.length}) save handlers for URL '${t}'`);t=r[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(s.artifacts)})()}addStructuredOutputNames(t){if(this.structuredOutputKeys){const s={};return(t instanceof mt?[t]:t).forEach((r,o)=>s[this.structuredOutputKeys[o]]=r),s}return t}predict(t,e){const s=this.execute(t,this.outputNodes);return this.addStructuredOutputNames(s)}predictAsync(t,e){var s=this;return(0,q.Z)(function*(){const r=yield s.executeAsync(t,s.outputNodes);return s.addStructuredOutputNames(r)})()}normalizeInputs(t){var e;if(!(t instanceof mt||Array.isArray(t))){const o=null===(e=this.signature)||void 0===e?void 0:e.inputs;if(null!=o)for(const i in o){const a=o[i];null!=a.resourceId&&(t[i]=this.resourceIdToCapturedInput[a.resourceId])}return t}t=Array.isArray(t)?t:[t];const s=Object.keys(this.resourceIdToCapturedInput).length;if(t.length+s!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-s} non-resource placeholders, while there are ${t.length} input tensors provided.`);let r=0;return this.inputNodes.reduce((o,i)=>{var a,l,u;const c=null===(u=null===(l=null===(a=this.signature)||void 0===a?void 0:a.inputs)||void 0===l?void 0:l[i])||void 0===u?void 0:u.resourceId;return o[i]=null!=c?this.resourceIdToCapturedInput[c]:t[r++],o},{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}executeInitializerGraph(){return null==this.initializer?[]:this.initializer.execute({},null==this.initializerSignature?[]:Object.keys(this.initializerSignature.outputs))}executeInitializerGraphAsync(){var t=this;return(0,q.Z)(function*(){return null==t.initializer?[]:t.initializer.executeAsync({},null==t.initializerSignature?[]:Object.keys(t.initializerSignature.outputs))})()}setResourceIdToCapturedInput(t){if(this.resourceIdToCapturedInput={},this.initializerSignature){const e=this.initializerSignature.outputs,s=Object.keys(e);for(let r=0;r<s.length;r++)this.resourceIdToCapturedInput[e[s[r]].resourceId]=t[r]}}execute(t,e){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const s=this.executor.execute(t,e);return s.length>1?s:s[0]}executeAsync(t,e){var s=this;return(0,q.Z)(function*(){null==s.resourceIdToCapturedInput&&s.setResourceIdToCapturedInput(yield s.executeInitializerGraphAsync()),t=s.normalizeInputs(t),e=s.normalizeOutputs(e);const r=yield s.executor.executeAsync(t,e);return r.length>1?r:r[0]})()}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce((e,s)=>(e[s]=[t[s]],e),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&ze(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}function _m(){return(_m=(0,q.Z)(function*(n,t={},e=Fe){if(null==n)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof n&&(n=function yF(n){return n.endsWith("/")||(n+="/"),`${n}model.json?tfjs-format=file`}(n));const s=new h0(n,t,e);return yield s.load(),s})).apply(this,arguments)}function Ie(n,t){Array.isArray(n)||(n=[n]),n.forEach(e=>{null!=e&&v("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the CPU backend.`)})}Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");const KF=Wp;let qF=(()=>{class n extends yn{nextDataId(){return n.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new _t(this,Ds())}write(e,s,r){this.firstUse&&(this.firstUse=!1,W().get("IS_NODE")&&Wn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const o={id:this.nextDataId()};return this.data.set(o,{values:e,dtype:r,refCount:1}),o}makeTensorInfo(e,s,r){let o;if("string"===s&&null!=r&&r.length>0&&xi(r[0])){const i=r.map(a=>hr(a));o=this.write(i,e,s)}else o=this.write(r,e,s);return{dataId:o,shape:e,dtype:s}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,s,r,o,i){this.data.set(e,{values:s,dtype:o,refCount:i})}numDataIds(){return this.data.numDataIds()}read(e){var s=this;return(0,q.Z)(function*(){return s.readSync(e)})()}readSync(e){const{dtype:s,complexTensorInfos:r}=this.data.get(e);return"complex64"===s?Ys(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):function aC(n,t){if(Array.isArray(n))return n;if("float32"===t)return n instanceof Float32Array?n:new Float32Array(n);if("int32"===t)return n instanceof Int32Array?n:new Int32Array(n);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(n));throw new Error(`Unknown dtype ${t}`)}(this.data.get(e).values,s)}bufferSync(e){const s=this.readSync(e.dataId);if("string"===e.dtype)try{const r=s.map(o=>dr(o));return Be(e.shape,e.dtype,r)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return Be(e.shape,e.dtype,s)}makeOutput(e,s,r){return Ds().makeTensorFromTensorInfo(this.makeTensorInfo(s,r,e),this)}disposeData(e,s=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!s&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:r}=this.data.get(e);null!=r&&(this.disposeData(r.real.dataId,!0),this.disposeData(r.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}time(e){return(0,q.Z)(function*(){const s=Tn();return e(),{kernelMs:Tn()-s}})()}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){Ie([e],"where");const s=this.readSync(e.dataId);return KF(e.shape,s)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}return n.nextDataId=0,n})();function Gs(n){return(t,e,s)=>{const r=Ft(e,t.length);for(let o=0;o<t.length;++o)r[o]=n(t[o],s);return r}}function lt(n,t,e){return $r(n,Gs(t),e)}function $r(n,t,e){return({inputs:s,attrs:r,backend:o})=>{const{x:i}=s;Ie(i,n);const a=o,l=a.data.get(i.dataId).values;let u;if("string"===i.dtype){if(!Array.isArray(l))throw new Error("String tensor's value was not an instance of Array");u=Js(l)}else u=l;const c=e||i.dtype,h=t(u,c,r);return a.makeTensorInfo(i.shape,c,h)}}uA("cpu",()=>new qF,1);const I0=lt($i,n=>n>=0?n:Math.exp(n)-1),QF={kernelName:$i,backendName:"cpu",kernelFunc:I0};function Hs(n){const{inputs:t,backend:e}=n,{x:s}=t;return e.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const XF={kernelName:zi,backendName:"cpu",kernelFunc:Hs};function C0(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{alpha:o}=s;Ie([r],"leakyRelu");const i=Q(r.shape),a=e.data.get(r.dataId).values,l=on("float32",i);for(let u=0;u<a.length;u++)l[u]=a[u]<0?o*a[u]:a[u];return e.makeTensorInfo(r.shape,"float32",l)}const ZF={kernelName:$l,backendName:"cpu",kernelFunc:C0};function Mt(n){return(t,e,s,r,o)=>{const i=Le(t,e),a=i.length,l=Ne(i),c=on(o,Q(i)),h=t.length,d=e.length,p=Ne(t),f=Ne(e),g=zo(t,i),m=zo(e,i);if(g.length+m.length===0)for(let A=0;A<c.length;++A)c[A]=n(s[A%s.length],r[A%r.length]);else for(let A=0;A<c.length;++A){const y=Eo(A,a,l),x=y.slice(-h);g.forEach(k=>x[k]=0);const b=Es(x,h,p),I=y.slice(-d);m.forEach(k=>I[k]=0);const S=Es(I,d,f);c[A]=n(s[b],r[S])}return[c,i]}}const YF=Mt((n,t)=>n<0?t*n:n);function v0(n){const{inputs:t,backend:e}=n,{x:s,alpha:r}=t;Ie([s,r],"prelu");const o=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,[a,l]=YF(s.shape,r.shape,o,i,"float32");return e.makeTensorInfo(l,"float32",a)}const JF={kernelName:Yl,backendName:"cpu",kernelFunc:v0},S0=lt(Yi,n=>Math.max(0,n)),eO={kernelName:Yi,backendName:"cpu",kernelFunc:S0},N0=lt(Ji,n=>Math.min(Math.max(0,n),6)),tO={kernelName:Ji,backendName:"cpu",kernelFunc:N0},nO=Gs(n=>1/(1+Math.exp(-n))),T0=lt(ia,n=>1/(1+Math.exp(-n))),sO={kernelName:ia,backendName:"cpu",kernelFunc:T0};function Rc(n,t,e,s,r){if("linear"===e)return Hs({inputs:{x:t},backend:n});if("relu"===e)return S0({inputs:{x:t},backend:n});if("elu"===e)return I0({inputs:{x:t},backend:n});if("relu6"===e)return N0({inputs:{x:t},backend:n});if("prelu"===e)return v0({inputs:{x:t,alpha:s},backend:n});if("leakyrelu"===e)return C0({inputs:{x:t},backend:n,attrs:{alpha:r}});if("sigmoid"===e)return T0({inputs:{x:t},backend:n});throw new Error(`Activation ${e} has not been implemented for the CPU backend.`)}function Bn(n){const{inputs:t,backend:e}=n,{real:s,imag:r}=t,o=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,a=e.makeTensorInfo(s.shape,"complex64");return e.data.get(a.dataId).complexTensorInfos={real:e.makeTensorInfo(s.shape,"float32",o),imag:e.makeTensorInfo(r.shape,"float32",i)},a}const rO={kernelName:wh,backendName:"cpu",kernelFunc:Bn};function $c(n,t,e="float32"){if("complex64"===e)return Bn({inputs:{real:$c(n,t,"float32"),imag:$c(n,t,"float32")},backend:n});const s=dn(Q(t),e);return n.makeTensorInfo(t,e,s)}function mo(n){const{inputs:t,backend:e}=n,{input:s}=t,r=e.data.get(s.dataId).complexTensorInfos.real,o=e.data.get(r.dataId).values;return e.makeTensorInfo(r.shape,r.dtype,o)}const oO={kernelName:nd,backendName:"cpu",kernelFunc:mo};function k0(n,t,e,s){if("int32"===s)return[t,"int32",Int32Array.from(n)];if("bool"===s){const r=qr([0],e),[o,i]=Mt((a,l)=>a!==l?1:0)(t,[],n,r,"bool");return[i,"bool",o]}throw new Error(`Error in Cast: failed to cast ${e} to ${s}`)}function Fr(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dtype:o}=s;if("complex64"===o){if("complex64"===r.dtype)return Hs({inputs:{x:r},backend:e});const c=$c(e,r.shape,r.dtype),h=Fr({inputs:{x:r},backend:e,attrs:{dtype:"float32"}}),d=Bn({inputs:{real:h,imag:c},backend:e});return e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),d}if("complex64"===r.dtype){const c=mo({inputs:{input:r},backend:e}),h=Fr({inputs:{x:c},backend:e,attrs:{dtype:o}});return e.disposeIntermediateTensorInfo(c),h}if(!gg(r.dtype,o)){const c=Hs({inputs:{x:r},backend:e});return{dataId:c.dataId,shape:c.shape,dtype:o}}const i=e.data.get(r.dataId).values,[a,l,u]=k0(i,r.shape,r.dtype,o);return e.makeTensorInfo(a,l,u)}const iO={kernelName:Ti,backendName:"cpu",kernelFunc:Fr};function Yt(n,t,e,s){return null==e?({inputs:r,backend:o})=>{const{a:i,b:a}=r,l=o;Ie([i,a],n);const u=l.data.get(i.dataId).values,c=l.data.get(a.dataId).values,h="string"===i.dtype?Js(u):u,d="string"===i.dtype?Js(c):c,p=s||i.dtype,[f,g]=t(i.shape,a.shape,h,d,p);return l.makeTensorInfo(g,p,f)}:({inputs:r,backend:o})=>{const{a:i,b:a}=r,l=o;if("complex64"===i.dtype||"complex64"===a.dtype){const u=Fr({inputs:{x:i},backend:l,attrs:{dtype:"complex64"}}),c=l.data.get(u.dataId),d=c.complexTensorInfos.imag,p=l.data.get(c.complexTensorInfos.real.dataId).values,f=l.data.get(d.dataId).values,g=Fr({inputs:{x:a},backend:l,attrs:{dtype:"complex64"}}),m=l.data.get(g.dataId),y=m.complexTensorInfos.imag,x=l.data.get(m.complexTensorInfos.real.dataId).values,b=l.data.get(y.dataId).values,[I,S,k]=e(i.shape,a.shape,p,f,x,b),E=l.makeTensorInfo(k,"float32",I),D=l.makeTensorInfo(k,"float32",S),O=Bn({inputs:{real:E,imag:D},backend:l});return l.disposeIntermediateTensorInfo(u),l.disposeIntermediateTensorInfo(g),l.disposeIntermediateTensorInfo(E),l.disposeIntermediateTensorInfo(D),O}{const u=l.data.get(i.dataId).values,c=l.data.get(a.dataId).values,h=s||i.dtype,[d,p]=t(i.shape,a.shape,u,c,h);return l.makeTensorInfo(p,h,d)}}}function Pm(n){return(t,e,s,r,o,i)=>{const a=Le(t,e),l=Q(a),u=a.length,c=Ne(a),h=on("float32",l),d=on("float32",l),p=zo(t,a),f=zo(e,a),g=Ys(s,r),m=Ys(o,i),A=t.length,y=Ne(t),x=e.length,b=Ne(e);if(p.length+f.length===0)for(let I=0;I<h.length;I++){const S=I%g.length,k=I%m.length,E=n(g[2*S],g[2*S+1],m[2*k],m[2*k+1]);h[I]=E.real,d[I]=E.imag}else for(let I=0;I<h.length;I++){const S=Eo(I,u,c),k=S.slice(-A);p.forEach(T=>k[T]=0);const E=Es(k,A,y),D=S.slice(-x);f.forEach(T=>D[T]=0);const O=Es(D,x,b),C=n(g[2*E],g[2*E+1],m[2*O],m[2*O+1]);h[I]=C.real,d[I]=C.imag}return[h,d,a]}}const E0=Mt((n,t)=>n+t),aO=Pm((n,t,e,s)=>({real:n+e,imag:t+s})),ri=Yt(_o,E0,aO),lO={kernelName:_o,backendName:"cpu",kernelFunc:ri};function At(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{shape:o}=s,i=Q(r.shape),a=mg(o,i),l=Q(a);v(i===l,()=>`The new shape (${a}) has ${l} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`),e.incRef(r.dataId);const u=e.data.get(r.dataId);if(null!=u.complexTensorInfos){const h=u.complexTensorInfos.imag;u.complexTensorInfos.real.shape=a,h.shape=a}return{dataId:r.dataId,shape:a,dtype:r.dtype}}const uO={kernelName:eu,backendName:"cpu",kernelFunc:At};function _0(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o}=t,{transposeA:i,transposeB:a}=s;Ie([r,o],"matMul");const l=r.shape.length,u=o.shape.length,c=i?r.shape[l-2]:r.shape[l-1],h=a?o.shape[u-1]:o.shape[u-2],d=i?r.shape[l-1]:r.shape[l-2],p=a?o.shape[u-2]:o.shape[u-1],f=r.shape.slice(0,-2),g=o.shape.slice(0,-2),m=Q(f),A=Q(g),x=Le(r.shape.slice(0,-2),o.shape.slice(0,-2)).concat([d,p]);v(c===h,()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${r.shape} and ${o.shape} and transposeA=${i} and transposeB=${a} must match.`);const I=a?[A,p,h]:[A,h,p],S=At({inputs:{x:r},backend:e,attrs:{shape:i?[m,c,d]:[m,d,c]}}),k=At({inputs:{x:o},backend:e,attrs:{shape:I}}),E=i?S.shape[1]:S.shape[2],D=i?S.shape[2]:S.shape[1],O=a?k.shape[1]:k.shape[2],C=Math.max(m,A),T=e.data.get(S.dataId).values,_=e.data.get(k.dataId).values,P=Ne(S.shape),z=Ne(k.shape),[V,H,K]=i?[P[0],1,P[1]]:[P[0],P[1],1],[Z,ee,te]=a?[1,z[1],z[0]]:[z[1],1,z[0]],ae=D*O,oe=Be([C,D,O],S.dtype),pe=oe.values,ue=e.blockSize;for(let Ae=0;Ae<C;Ae++){const Te=Ae%m,Re=Ae%A;for(let _e=0;_e<D;_e+=ue){const Ve=Math.min(_e+ue,D);for(let We=0;We<O;We+=ue){const ut=Math.min(We+ue,O);for(let yt=0;yt<E;yt+=ue){const $t=Math.min(yt+ue,E);for(let xt=_e;xt<Ve;xt++)for(let ht=We;ht<ut;ht++){let Et=0;for(let vt=yt;vt<$t;vt++)Et+=T[Te*V+xt*H+vt*K]*_[vt*Z+ht*ee+Re*te];pe[Ae*ae+(xt*O+ht)]+=Et}}}}}return e.disposeIntermediateTensorInfo(S),e.disposeIntermediateTensorInfo(k),e.makeTensorInfo(x,oe.dtype,oe.values)}const cO={kernelName:Al,backendName:"cpu",kernelFunc:_0},dO={kernelName:fu,backendName:"cpu",kernelFunc:function hO(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o,bias:i,preluActivationWeights:a}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let d,p,f;const g=[];d=_0({inputs:{a:r,b:o},attrs:{transposeA:l,transposeB:u},backend:e}),i&&(p=ri({inputs:{a:d,b:i},backend:e}),g.push(d),d=p),c&&(f=Rc(e,d,c,a,h),g.push(d),d=f);for(const A of g)e.disposeIntermediateTensorInfo(A);return d}};function D0(n){const t=new Float32Array(n.length);for(let e=0;e<n.length;++e)t[e]=Math.abs(n[e]);return t}const pO={kernelName:hl,backendName:"cpu",kernelFunc:n=>{const{x:t}=n.inputs,e=n.backend;Ie(t,"abs");let s=new Float32Array(Q(t.shape));return s=D0(e.data.get(t.dataId).values),e.makeOutput(s,t.shape,t.dtype)}},fO=lt(bi,n=>Math.acos(n)),mO={kernelName:bi,backendName:"cpu",kernelFunc:fO},gO=lt(wi,n=>Math.acosh(n)),AO={kernelName:wi,backendName:"cpu",kernelFunc:gO},xO={kernelName:dl,backendName:"cpu",kernelFunc:function yO(n){const{inputs:t,backend:e}=n,s=t;Ie(t,"addN");const r=s.map(a=>e.data.get(a.dataId).values),o=Be(s[0].shape,s[0].dtype),i=o.values;for(let a=0;a<s.length;a++){const l=r[a];for(let u=0;u<i.length;u++)i[u]+=l[u]}return e.makeTensorInfo(o.shape,o.dtype,o.values)}};function Mm(n,t,e,s,r){const o=t.length,i=Q(t),a=Ne(t),l=Ne(r),u=on(e,Q(r));for(let c=0;c<i;++c){const h=Eo(c,o,a),d=new Array(h.length);for(let f=0;f<d.length;f++)d[f]=h[s[f]];u[Es(d,o,l)]=n[c]}return u}function Rn(n){const{inputs:t,attrs:e,backend:s}=n,{x:r}=t,{perm:o}=e;Ie(r,"transpose");const a=new Array(r.shape.length);for(let h=0;h<a.length;h++)a[h]=r.shape[o[h]];const u=Mm(s.data.get(r.dataId).values,r.shape,r.dtype,o,a);return{dataId:s.write(u,a,r.dtype),shape:a,dtype:r.dtype}}const bO={kernelName:Do,backendName:"cpu",kernelFunc:Rn},IO={kernelName:"All",backendName:"cpu",kernelFunc:function wO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:i}=s;Ie(r,"all");const a=Ge(o,r.shape);let l=a;const u=Tt(l,r.shape.length);let c=r;null!=u&&(c=Rn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=Lt(l.length,r.shape.length)),ln("all",l,c.shape.length);const[h,d]=nn(c.shape,l),p=Q(d),f=dn(Q(h),c.dtype),g=e.data.get(c.dataId).values;for(let A=0;A<f.length;++A){const y=A*p;let x=g[y];for(let b=0;b<p;++b)x=x&&g[y+b];f[A]=x}null!=u&&e.disposeIntermediateTensorInfo(c);const m=e.makeTensorInfo(h,c.dtype,f);if(i){const y=At({inputs:{x:m},backend:e,attrs:{shape:Ot(h,a)}});return e.disposeIntermediateTensorInfo(m),y}return m}},vO={kernelName:"Any",backendName:"cpu",kernelFunc:function CO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:i}=s;Ie(r,"any");const a=Ge(o,r.shape);let l=a;const u=Tt(l,r.shape.length);let c=r;null!=u&&(c=Rn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=Lt(l.length,r.shape.length)),ln("any",l,c.shape.length);const[h,d]=nn(c.shape,l),p=Q(d),f=dn(Q(h),c.dtype),g=e.data.get(c.dataId).values;for(let A=0;A<f.length;++A){const y=A*p;let x=g[y];for(let b=0;b<p;++b)x=x||g[y+b];f[A]=x}null!=u&&e.disposeIntermediateTensorInfo(c);const m=e.makeTensorInfo(h,c.dtype,f);if(i){const y=At({inputs:{x:m},backend:e,attrs:{shape:Ot(h,a)}});return e.disposeIntermediateTensorInfo(m),y}return m}},NO={kernelName:pl,backendName:"cpu",kernelFunc:function SO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;Ie(r,"argMax");let i=Ge(o,r.shape);const a=Tt(i,r.shape.length);let l=r;const u=[];null!=a&&(l=Rn({inputs:{x:r},backend:e,attrs:{perm:a}}),u.push(l),i=Lt(i.length,l.shape.length)),i=[i[0]],ln("argMax",i,l.shape.length);const[c,h]=nn(l.shape,i),p=dn(Q(c),"int32"),f=Q(h),g=e.data.get(l.dataId).values;for(let m=0;m<p.length;++m){const A=m*f;let y=g[A],x=0;for(let b=0;b<f;++b){const I=g[A+b];I>y&&(y=I,x=b)}p[m]=x}return u.forEach(m=>e.disposeIntermediateTensorInfo(m)),e.makeTensorInfo(c,"int32",p)}},kO={kernelName:fl,backendName:"cpu",kernelFunc:function TO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;Ie(r,"argMin");let i=Ge(o,r.shape);const a=Tt(i,r.shape.length);let l=r;const u=[];null!=a&&(l=Rn({inputs:{x:r},backend:e,attrs:{perm:a}}),u.push(l),i=Lt(i.length,l.shape.length)),i=[i[0]],ln("argMin",i,l.shape.length);const[c,h]=nn(l.shape,i),p=dn(Q(c),"int32"),f=Q(h),g=e.data.get(l.dataId).values;for(let m=0;m<p.length;++m){const A=m*f;let y=g[A],x=0;for(let b=0;b<f;++b){const I=g[A+b];I<y&&(y=I,x=b)}p[m]=x}return u.forEach(m=>e.disposeIntermediateTensorInfo(m)),e.makeTensorInfo(c,"int32",p)}},EO=lt(Ii,n=>Math.asin(n)),_O={kernelName:Ii,backendName:"cpu",kernelFunc:EO},DO=lt(Ci,n=>Math.asinh(n)),RO={kernelName:Ci,backendName:"cpu",kernelFunc:DO},$O=lt(vi,n=>Math.atan(n)),FO={kernelName:vi,backendName:"cpu",kernelFunc:$O},OO=Mt((n,t)=>Math.atan2(n,t)),LO=Yt(Ni,OO),PO={kernelName:Ni,backendName:"cpu",kernelFunc:LO},MO=lt(Si,n=>Math.atanh(n)),BO={kernelName:Si,backendName:"cpu",kernelFunc:MO};function Bm(n,t,e,s,r,o){const i=r.strideHeight,a=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=r.padInfo.top,p=r.padInfo.left,f="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=Be(r.outShape,e),m=g.values,A=r.outShape[1]*r.outShape[2]*r.outShape[3],y=r.outShape[2]*r.outShape[3],x=r.outShape[3];for(let b=0;b<r.batchSize;++b){const I=b*A,S=b*s[0];for(let k=0;k<r.inChannels;++k)for(let E=0;E<r.outHeight;++E){const D=E*i-d,O=Math.max(0,D),C=Math.min(r.inHeight,c+D),T=I+E*y;for(let _=0;_<r.outWidth;++_){const P=_*a-p,z=Math.max(0,P),V=Math.min(r.inWidth,h+P);let H=f,K=0,Z=0;for(let te=O;te<C;te+=l){const ae=S+te*s[1];for(let oe=z;oe<V;oe+=u){const ue=n[ae+oe*s[2]+k];"max"===o&&ue>H?H=ue:"avg"===o&&(K+=ue,Z++)}if(isNaN(H))break}m[T+_*x+k]="avg"===o?K/Z:H}}}return g}function R0(n,t,e,s,r=!1,o=!1){const i=Be(s.outShape,"int32"),a=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,d=s.effectiveFilterWidth,p=s.padInfo.top,f=s.padInfo.left,g=Be(t,e,n);for(let m=0;m<s.batchSize;++m)for(let A=0;A<s.inChannels;++A)for(let y=0;y<s.outHeight;++y){const x=y*a-p;let b=x;for(;b<0;)b+=u;const I=Math.min(s.inHeight,h+x);for(let S=0;S<s.outWidth;++S){const k=S*l-f;let E=k;for(;E<0;)E+=c;const D=Math.min(s.inWidth,d+k);let O=Number.NEGATIVE_INFINITY,C=-1;for(let T=b;T<I;T+=u){const _=T-x;for(let P=E;P<D;P+=c){const z=P-k,V=g.get(m,T,P,A);V>O&&(O=V,C=r?o?((m*s.inHeight+T)*s.inWidth+P)*s.inChannels+A:(T*s.inWidth+P)*s.inChannels+A:_*d+z)}}i.set(C,m,y,S,A)}}return i}function $0(n,t,e,s,r,o){const i=r.strideDepth,a=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,d=r.effectiveFilterDepth,p=r.effectiveFilterHeight,f=r.effectiveFilterWidth,g=r.padInfo.front,m=r.padInfo.top,A=r.padInfo.left,y="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=Be(r.outShape,e),b=x.values,I=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],S=r.outShape[2]*r.outShape[3]*r.outShape[4],k=r.outShape[3]*r.outShape[4],E=r.outShape[4];for(let D=0;D<r.batchSize;++D){const O=D*I,C=D*s[0];for(let T=0;T<r.inChannels;++T)for(let _=0;_<r.outDepth;++_){const P=_*i-g;let z=P;for(;z<0;)z+=u;const V=Math.min(r.inDepth,d+P),H=O+_*S;for(let K=0;K<r.outHeight;++K){const Z=K*a-m;let ee=Z;for(;ee<0;)ee+=c;const te=Math.min(r.inHeight,p+Z),ae=H+K*k;for(let oe=0;oe<r.outWidth;++oe){const pe=oe*l-A;let ue=pe;for(;ue<0;)ue+=h;const Ae=Math.min(r.inWidth,f+pe),Te=ae+oe*E;let Re=y,_e=0,Ve=0;for(let ut=z;ut<V;ut+=u){const yt=C+ut*s[1];for(let $t=ee;$t<te;$t+=c){const xt=yt+$t*s[2];for(let ht=ue;ht<Ae;ht+=h){const vt=n[xt+ht*s[3]+T];if("max"===o&&vt>Re?Re=vt:"avg"===o&&(_e+=vt,Ve++),isNaN(Re))break}if(isNaN(Re))break}if(isNaN(Re))break}b[Te+T]="avg"===o?_e/Math.max(Ve,1):Re}}}}return x}const UO={kernelName:ml,backendName:"cpu",kernelFunc:function VO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;Ie(r,"avgPool");const{filterSize:o,strides:i,pad:a,dimRoundingMode:l}=s;v(an(i,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const c=os(r.shape,o,i,1,a,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&Qe(c.inShape,c.outShape))h=Hs({inputs:{x:r},backend:e});else{const d=e.data.get(r.dataId).values,p=Ne(r.shape),f=Bm(d,0,r.dtype,p,c,"avg");h=e.makeTensorInfo(c.outShape,r.dtype,f.values)}return h}},GO={kernelName:gl,backendName:"cpu",kernelFunc:function WO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:i,pad:a,dimRoundingMode:l,dataFormat:u}=s;Ie(r,"avgPool3d");const c=Qs(r.shape,o,i,1,a,l,u),d=$0(e.data.get(r.dataId).values,0,r.dtype,Ne(r.shape),c,"avg");return e.makeTensorInfo(d.shape,"float32",d.values)}},KO={kernelName:yh,backendName:"cpu",kernelFunc:function HO(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,{filterSize:i,strides:a,pad:l,dimRoundingMode:u}=s;Ie([r,o],"avgPool3DGrad");const c=Qs(o.shape,i,a,1,l,u),h=c.strideDepth,d=c.strideHeight,p=c.strideWidth,f=c.filterDepth,g=c.filterHeight,m=c.filterWidth,A=c.dilationDepth,y=c.dilationHeight,x=c.dilationWidth,b=c.effectiveFilterDepth,I=c.effectiveFilterHeight,S=c.effectiveFilterWidth,k=b-1-c.padInfo.front,E=S-1-c.padInfo.left,D=I-1-c.padInfo.top,O=Be(o.shape,"float32"),C=1/(f*g*m),T=e.bufferSync(r);for(let _=0;_<c.batchSize;++_)for(let P=0;P<c.inChannels;++P)for(let z=0;z<c.inDepth;++z)for(let V=0;V<c.inHeight;++V)for(let H=0;H<c.inWidth;++H){const K=z-k,Z=V-D,ee=H-E;let te=0;for(let ae=0;ae<b;ae+=A){const oe=(K+ae)/h;if(!(oe<0||oe>=c.outDepth||Math.floor(oe)!==oe))for(let pe=0;pe<I;pe+=y){const ue=(Z+pe)/d;if(!(ue<0||ue>=c.outHeight||Math.floor(ue)!==ue))for(let Ae=0;Ae<S;Ae+=x){const Te=(ee+Ae)/p;Te<0||Te>=c.outWidth||Math.floor(Te)!==Te||(te+=T.get(_,oe,ue,Te,P))}}}O.set(te*C,_,z,V,H,P)}return e.makeTensorInfo(O.shape,O.dtype,O.values)}},jO={kernelName:Ah,backendName:"cpu",kernelFunc:function qO(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,i=o;Ie([r,o],"avgPoolGrad");const{filterSize:a,strides:l,pad:u}=s,c=os(i.shape,a,l,1,u),h=c.strideHeight,d=c.strideWidth,p=c.filterHeight,f=c.filterWidth,g=c.dilationHeight,m=c.dilationWidth,A=c.effectiveFilterHeight,y=c.effectiveFilterWidth,x=y-1-c.padInfo.left,b=A-1-c.padInfo.top,I=Be(i.shape,"float32"),S=1/(p*f),k=e.data.get(r.dataId).values,E=Be(r.shape,"float32",k);for(let D=0;D<c.batchSize;++D)for(let O=0;O<c.inChannels;++O)for(let C=0;C<c.inHeight;++C)for(let T=0;T<c.inWidth;++T){const _=C-b,P=T-x;let z=0;for(let V=0;V<A;V+=g){const H=(_+V)/h;if(!(H<0||H>=c.outHeight||Math.floor(H)!==H))for(let K=0;K<y;K+=m){const Z=(P+K)/d;Z<0||Z>=c.outWidth||Math.floor(Z)!==Z||(z+=E.get(D,H,Z,O))}}I.set(z*S,D,C,T,O)}return e.makeTensorInfo(I.shape,I.dtype,I.values)}},XO={kernelName:_l,backendName:"cpu",kernelFunc:function QO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,scale:o,offset:i,mean:a,variance:l}=t;v(a.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),v(null==i||a.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),v(null==o||a.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),Ie([r,a,l,o,i],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=e.data.get(r.dataId).values,h=e.data.get(a.dataId).values,d=e.data.get(l.dataId).values,p=o?e.data.get(o.dataId).values:new Float32Array([1]),f=i?e.data.get(i.dataId).values:new Float32Array([0]),g=new Float32Array(c.length),m=f.length,A=p.length,y=d.length,x=h.length;let b=0,I=0,S=0,k=0;for(let E=0;E<c.length;++E)g[E]=f[b++]+(c[E]-h[I++])*p[S++]/Math.sqrt(d[k++]+u),b>=m&&(b=0),I>=x&&(I=0),S>=A&&(S=0),k>=y&&(k=0);return e.makeTensorInfo(r.shape,r.dtype,g)}};function F0(n,t,e,s,r){const o=ap(s,t,e),i=Q(e),a=Ne(s);if(o){const h=lp(t,a);return"string"===r?n.slice(h,h+i):n.subarray(h,h+i)}const u=Be(s,r,"string"===r?Js(n):n),c=Be(e,r);for(let h=0;h<c.size;++h){const d=c.indexToLoc(h),p=d.map((f,g)=>f+t[g]);c.set(u.get(...p),...d)}return"string"===r?yx(c.values):c.values}function go(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,size:i}=s;Ie(r,"slice");const[a,l]=Tu(r,o,i);op(r,a,l);const c=F0(e.data.get(r.dataId).values,a,l,r.shape,r.dtype);return e.makeTensorInfo(l,r.dtype,c)}const ZO={kernelName:ou,backendName:"cpu",kernelFunc:go},JO={kernelName:yl,backendName:"cpu",kernelFunc:function YO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,crops:i}=s;Ie([r],"batchToSpaceND");const a=o.reduce((A,y)=>A*y),l=Oa(r.shape,o,a),u=La(l.length,o.length),c=Pa(r.shape,o,a),h=uf(i,o.length),d=cf(c,i,o.length),p=At({inputs:{x:r},backend:e,attrs:{shape:l}}),f=Rn({inputs:{x:p},backend:e,attrs:{perm:u}}),g=At({inputs:{x:f},backend:e,attrs:{shape:c}}),m=go({inputs:{x:g},backend:e,attrs:{begin:h,size:d}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),m}};function zm(n,t,e,s,r){const o=Q(s),i=dn(r,e);for(let a=0;a<n.length;a++){const l=n[a];if(l<0)throw new Error("Input x must be non-negative!");l>=r||(i[l]+=o>0?t[a]:1)}return i}function O0(n,t,e,s=!1){const r=n.shape[0],o=n.shape[1],i=Be([r,e],t.dtype);for(let a=0;a<r;a++)for(let l=0;l<o;l++){const u=n.get(a,l);if(u<0)throw new Error("Input x must be non-negative!");u>=e||i.set(s?1:t.size>0?i.get(a,u)+t.get(a,l):i.get(a,u)+1,a,u)}return i}const tL={kernelName:xh,backendName:"cpu",kernelFunc:function eL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:i}=s,u=zm(e.data.get(r.dataId).values,e.data.get(o.dataId).values,o.dtype,o.shape,i);return e.makeTensorInfo([i],o.dtype,u)}},L0=Mt((n,t)=>n&t),nL=Yt(xl,L0),sL={kernelName:xl,backendName:"cpu",kernelFunc:nL},oL={kernelName:bh,backendName:"cpu",kernelFunc:function rL(n){const{inputs:t,backend:e}=n,{s0:s,s1:r}=t,o=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,a=Le(Array.from(o),Array.from(i));return e.makeTensorInfo([a.length],"int32",Int32Array.from(a))}},P0=Gs(n=>Math.ceil(n)),iL=$r(ki,P0),aL={kernelName:ki,backendName:"cpu",kernelFunc:iL},lL=lt(Ei,(n,t)=>n>t.clipValueMax?t.clipValueMax:n<t.clipValueMin?t.clipValueMin:n),uL={kernelName:Ei,backendName:"cpu",kernelFunc:lL},cL={kernelName:bl,backendName:"cpu",kernelFunc:n=>{const{x:t}=n.inputs,e=n.backend,s=new Float32Array(Q(t.shape)),r=e.data.get(t.dataId),i=r.complexTensorInfos.imag,a=e.data.get(r.complexTensorInfos.real.dataId).values,l=e.data.get(i.dataId).values;for(let u=0;u<a.length;u++)s[u]=Math.hypot(a[u],l[u]);return e.makeOutput(s,t.shape,"float32")}};function M0(n,t,e,s){const r=Ft(e,Q(t));if(s&&"string"!==e){let o=0;n.forEach(i=>{const a=Q(i.shape);r.set(i.vals,o),o+=a})}else{let o=0;n.forEach(i=>{const a="string"===e?Js(i.vals):i.vals;let l=0;for(let u=0;u<i.shape[0];++u){const c=u*t[1]+o;for(let h=0;h<i.shape[1];++h)r[c+h]=a[l++]}o+=i.shape[1]})}return r}function oi(n){const{inputs:t,backend:e}=n,{input:s}=t,r=e.data.get(s.dataId).complexTensorInfos.imag,o=e.data.get(r.dataId).values;return e.makeTensorInfo(r.shape,r.dtype,o)}const hL={kernelName:Uh,backendName:"cpu",kernelFunc:oi};function ii(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s,o=Ge(r,t[0].shape)[0];of(t.map(g=>g.shape),o);let a=Ls(t.map(g=>g.shape),o);if(0===Q(a))return e.makeTensorInfo(a,t[0].dtype,[]);const l=t.filter(g=>Q(g.shape)>0);if(1===l.length)return Hs({inputs:{x:l[0]},backend:e});if("complex64"===l[0].dtype){const g=l.map(b=>mo({inputs:{input:b},backend:e})),m=l.map(b=>oi({inputs:{input:b},backend:e})),A=ii({inputs:g,backend:e,attrs:{axis:o}}),y=ii({inputs:m,backend:e,attrs:{axis:o}}),x=Bn({inputs:{real:A,imag:y},backend:e});return g.forEach(b=>e.disposeIntermediateTensorInfo(b)),m.forEach(b=>e.disposeIntermediateTensorInfo(b)),e.disposeIntermediateTensorInfo(A),e.disposeIntermediateTensorInfo(y),x}const u=l.map(g=>{const A=[-1,Q(g.shape.slice(o))];return At({inputs:{x:g},backend:e,attrs:{shape:A}})}),c=u.map(g=>({vals:e.data.get(g.dataId).values,shape:g.shape}));a=Ls(u.map(g=>g.shape),1);const d=M0(c,a,t[0].dtype,1===u[0].shape[0]),p=Ls(l.map(g=>g.shape),o),f=e.makeTensorInfo(p,t[0].dtype,d);return u.forEach(g=>e.disposeIntermediateTensorInfo(g)),f}const dL={kernelName:wl,backendName:"cpu",kernelFunc:ii};function B0(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:i,pad:a,dataFormat:l,dilations:u,dimRoundingMode:c}=s;Ie([r,o],"conv2d");const h=Xs(l),d=tn(r.shape,o.shape,i,u,a,c,!1,h),p=d.filterHeight,f=d.filterWidth,g=d.dilationHeight,m=d.dilationWidth,A=d.padInfo.left,y=d.padInfo.top,x="channelsLast"===d.dataFormat,b=new Gt(d.outShape,r.dtype),I=Ne(r.shape),S=Ne(o.shape),k=I[0],E=x?I[1]:I[2],D=x?I[2]:1,O=x?1:I[1],C=b.strides[0],T=x?b.strides[1]:b.strides[2],_=x?b.strides[2]:1,P=x?1:b.strides[1],z=e.data.get(r.dataId).values,V=e.data.get(o.dataId).values,H=b.values;for(let K=0;K<d.batchSize;++K){const Z=K*k,ee=K*C;for(let te=0;te<d.outHeight;++te){const ae=ee+te*T,oe=te*d.strideHeight-y;for(let pe=0;pe<p;++pe){const ue=oe+pe*g;if(ue<0||ue>=d.inHeight)continue;const Ae=pe*S[0],Te=Z+ue*E;for(let Re=0;Re<d.outWidth;++Re){const _e=ae+Re*_,Ve=Re*d.strideWidth-A;for(let We=0;We<f;++We){const ut=Ve+We*m;if(ut<0||ut>=d.inWidth)continue;const $t=Te+ut*D;let xt=Ae+We*S[1];for(let ht=0;ht<d.inChannels;++ht){const Et=z[$t+ht*O];for(let vt=0;vt<d.outChannels;++vt)H[_e+vt*P]+=Et*V[xt+vt];xt+=d.outChannels}}}}}}return e.makeTensorInfo(b.shape,b.dtype,H)}const pL={kernelName:Il,backendName:"cpu",kernelFunc:B0},mL={kernelName:Ih,backendName:"cpu",kernelFunc:function fL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:i,pad:a,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;Ie([r,o],"conv2dBackpropFilter");const h=Xs(l),d=tn(r.shape,c,i,1,a,u,!1,h),{strideHeight:p,strideWidth:f,filterHeight:g,filterWidth:m}=d,A="channelsLast"===d.dataFormat,y=new Gt(d.filterShape,"float32"),x=d.padInfo.left,b=d.padInfo.top,I=e.data.get(r.dataId).values,S=e.data.get(o.dataId).values,k=new Gt(r.shape,r.dtype,I),E=new Gt(o.shape,o.dtype,S);for(let D=0;D<g;++D){const O=Math.max(0,Math.ceil((b-D)/p)),C=Math.min(d.outHeight,(d.inHeight+b-D)/p);for(let T=0;T<m;++T){const _=Math.max(0,Math.ceil((x-T)/f)),P=Math.min(d.outWidth,(d.inWidth+x-T)/f);for(let z=0;z<d.inChannels;++z)for(let V=0;V<d.outChannels;++V){let H=0;for(let K=0;K<d.batchSize;++K)for(let Z=O;Z<C;++Z){const ee=D+Z*p-b;for(let te=_;te<P;++te){const ae=T+te*f-x;H+=A?k.get(K,ee,ae,z)*E.get(K,Z,te,V):k.get(K,z,ee,ae)*E.get(K,V,Z,te)}}y.set(H,D,T,z,V)}}}return e.makeTensorInfo(y.shape,y.dtype,y.values)}},AL={kernelName:Cl,backendName:"cpu",kernelFunc:function gL(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{inputShape:i,strides:a,pad:l,dataFormat:u,dimRoundingMode:c}=s;Ie([r,o],"conv2dBackpropInput");const h=Ne(o.shape),d=Ne(r.shape);let p=Xs(u);const f=tn(i,o.shape,a,1,l,c,!1,p),g=new Gt(f.inShape,"float32"),m=g.values,A=e.data.get(r.dataId).values,y=e.data.get(o.dataId).values,[x,b,I]=h,{batchSize:S,filterHeight:k,filterWidth:E,inChannels:D,inHeight:O,inWidth:C,outChannels:T,outHeight:_,outWidth:P,strideHeight:z,strideWidth:V}=f;p=f.dataFormat;const H=k-1-f.padInfo.top,K=E-1-f.padInfo.left,Z="channelsLast"===p,ee=g.strides[0],te=Z?g.strides[1]:g.strides[2],ae=Z?g.strides[2]:1,oe=Z?1:g.strides[1],pe=d[0],ue=Z?d[1]:d[2],Ae=Z?d[2]:1,Te=Z?1:d[1];for(let Re=0;Re<S;++Re)for(let _e=0;_e<D;++_e)for(let Ve=0;Ve<O;++Ve){const We=Ve-H,ut=Math.max(0,Math.ceil(We/z)),yt=Math.min(_,(k+We)/z);for(let $t=0;$t<C;++$t){const xt=$t-K,ht=Math.max(0,Math.ceil(xt/V)),Et=Math.min(P,(E+xt)/V);let vt=0;for(let hn=ut;hn<yt;++hn){const Br=hn*z-We;for(let es=ht;es<Et;++es){const ks=pe*Re+ue*hn+Ae*es,ir=x*(k-1-Br)+b*(E-1-(es*V-xt))+I*_e;for(let zr=0;zr<T;++zr)vt+=A[ks+Te*zr]*y[ir+zr]}}m[ee*Re+te*Ve+ae*$t+oe*_e]=vt}}return e.makeTensorInfo(g.shape,g.dtype,g.values)}},xL={kernelName:vl,backendName:"cpu",kernelFunc:function yL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:i,pad:a,dilations:l}=s;Ie([r,o],"conv3d");const u=xr(r.shape,o.shape,i,l,a),{filterDepth:c,filterHeight:h,filterWidth:d,dilationDepth:p,dilationHeight:f,dilationWidth:g,padInfo:m}=u,A=m.front,y=m.left,x=m.top,b=new Gt(u.outShape,r.dtype),I=e.data.get(r.dataId).values,S=e.data.get(o.dataId).values,k=b.values,E=Ne(r.shape),D=Ne(o.shape);for(let O=0;O<u.batchSize;++O){const C=O*E[0],T=O*b.strides[0];for(let _=0;_<u.outDepth;++_){const P=T+_*b.strides[1],z=_*u.strideDepth-A;for(let V=0;V<c;++V){const H=z+V*p;if(H<0||H>=u.inDepth)continue;const K=V*D[0],Z=C+H*E[1];for(let ee=0;ee<u.outHeight;++ee){const te=P+ee*b.strides[2],ae=ee*u.strideHeight-x;for(let oe=0;oe<h;++oe){const pe=ae+oe*f;if(pe<0||pe>=u.inHeight)continue;const ue=K+oe*D[1],Ae=Z+pe*E[2];for(let Te=0;Te<u.outWidth;++Te){const Re=te+Te*u.outChannels,_e=Te*u.strideWidth-y;for(let Ve=0;Ve<d;++Ve){const We=_e+Ve*g;if(We<0||We>=u.inWidth)continue;const yt=Ae+We*u.inChannels;let $t=ue+Ve*D[2];for(let xt=0;xt<u.inChannels;++xt){const ht=I[yt+xt];for(let Et=0;Et<u.outChannels;++Et)k[Re+Et]+=ht*S[$t+Et];$t+=u.outChannels}}}}}}}}return e.makeTensorInfo(b.shape,b.dtype,b.values)}},wL={kernelName:Ch,backendName:"cpu",kernelFunc:function bL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:i,pad:a,filterShape:l}=s;Ie([r,o],"conv3dBackpropFilterV2");const u=Ne(r.shape),c=Ne(o.shape),h=xr(r.shape,l,i,1,a),d=h.strideDepth,p=h.strideHeight,f=h.strideWidth,g=h.filterDepth,m=h.filterHeight,A=h.filterWidth,y=new Gt(h.filterShape,"float32"),x=y.values,[b,I,S,k]=y.strides,E=e.data.get(o.dataId).values,[D,O,C,T]=c,_=e.data.get(r.dataId).values,[P,z,V,H]=u,K=h.padInfo.front,Z=h.padInfo.left,ee=h.padInfo.top;for(let te=0;te<g;++te){const ae=Math.max(0,Math.ceil((K-te)/d)),oe=Math.min(h.outDepth,(h.inDepth+K-te)/d),pe=te*b;for(let ue=0;ue<m;++ue){const Ae=Math.max(0,Math.ceil((ee-ue)/p)),Te=Math.min(h.outHeight,(h.inHeight+ee-ue)/p),Re=ue*I+pe;for(let _e=0;_e<A;++_e){const Ve=Math.max(0,Math.ceil((Z-_e)/f)),We=Math.min(h.outWidth,(h.inWidth+Z-_e)/f),ut=_e*S+Re;for(let yt=0;yt<h.inChannels;++yt){const $t=yt*k+ut;for(let xt=0;xt<h.outChannels;++xt){let ht=0;for(let Et=0;Et<h.batchSize;++Et){const vt=Et*P,or=Et*D;for(let hn=ae;hn<oe;++hn){const es=(te+hn*d-K)*z+vt,vo=hn*O+or;for(let ks=Ae;ks<Te;++ks){const zr=(ue+ks*p-ee)*V+es,Vr=ks*C+vo;for(let Ur=Ve;Ur<We;++Ur)ht+=_[(_e+Ur*f-Z)*H+zr+yt]*E[Ur*T+Vr+xt]}}}x[$t+xt]=ht}}}}}return e.makeTensorInfo(y.shape,y.dtype,y.values)}},CL={kernelName:vh,backendName:"cpu",kernelFunc:function IL(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{pad:i,strides:a,inputShape:l}=s;Ie([r],"conv3dBackpropInputV2");const u=Ne(r.shape),c=Ne(o.shape),h=xr(l,o.shape,a,1,i),d=new Gt(h.inShape,"float32"),p=d.values,[f,g,m,A]=d.strides,y=e.data.get(r.dataId).values,[x,b,I,S]=u,k=e.data.get(o.dataId).values,[E,D,O,C]=c,{batchSize:T,filterDepth:_,filterHeight:P,filterWidth:z,inChannels:V,inDepth:H,inHeight:K,inWidth:Z,outChannels:ee,outDepth:te,outHeight:ae,outWidth:oe,strideDepth:pe,strideHeight:ue,strideWidth:Ae}=h,Te=_-1-h.padInfo.front,Re=P-1-h.padInfo.top,_e=z-1-h.padInfo.left;for(let Ve=0;Ve<T;++Ve)for(let We=0;We<V;++We)for(let ut=0;ut<H;++ut){const yt=ut-Te,$t=Math.max(0,Math.ceil(yt/pe)),xt=Math.min(te,(_+yt)/pe);for(let ht=0;ht<K;++ht){const Et=ht-Re,vt=Math.max(0,Math.ceil(Et/ue)),or=Math.min(ae,(P+Et)/ue);for(let hn=0;hn<Z;++hn){const Br=hn-_e,es=Math.max(0,Math.ceil(Br/Ae)),vo=Math.min(oe,(z+Br)/Ae);let ks=0;for(let ir=$t;ir<xt;++ir){const zr=ir*pe-yt;for(let Vr=vt;Vr<or;++Vr){const Ur=Vr*ue-Et;for(let ul=es;ul<vo;++ul){const pg=x*Ve+b*ir+I*Vr+S*ul,N5=E*(_-1-zr)+D*(P-1-Ur)+O*(z-1-(ul*Ae-Br))+C*We;for(let ih=0;ih<ee;++ih)ks+=y[pg+ih]*k[N5+ih]}}}p[f*Ve+g*ut+m*ht+A*hn+We]=ks}}}return e.makeTensorInfo(d.shape,d.dtype,d.values)}},vL=lt(_i,n=>Math.cos(n)),SL={kernelName:_i,backendName:"cpu",kernelFunc:vL},NL=lt(Di,n=>Math.cosh(n)),TL={kernelName:Di,backendName:"cpu",kernelFunc:NL},EL={kernelName:Nh,backendName:"cpu",kernelFunc:function kL(n){const{inputs:t,backend:e,attrs:s}=n,{image:r,boxes:o,boxInd:i}=t,{cropSize:a,method:l,extrapolationValue:u}=s,[c,h,d,p]=r.shape,f=o.shape[0],[g,m]=a,A=Be([f,g,m,p],"float32"),y=e.data.get(o.dataId).values,x=e.data.get(i.dataId).values,b=e.data.get(r.dataId).values,I=Ne(r.shape),S=Ne(A.shape);for(let k=0;k<f;k++){const E=4*k,D=y[E],O=y[E+1],C=y[E+2],T=y[E+3],_=x[k];if(_>=c)continue;const P=g>1?(C-D)*(h-1)/(g-1):0,z=m>1?(T-O)*(d-1)/(m-1):0;for(let V=0;V<g;V++){const H=g>1?D*(h-1)+V*P:.5*(D+C)*(h-1);if(H<0||H>h-1)for(let K=0;K<m;K++)for(let Z=0;Z<p;Z++)A.values[Z+K*S[2]+V*S[1]+k*S[0]]=u;else if("bilinear"===l){const K=Math.floor(H),Z=Math.ceil(H),ee=H-K;for(let te=0;te<m;te++){const ae=m>1?O*(d-1)+te*z:.5*(O+T)*(d-1);if(ae<0||ae>d-1){for(let Ae=0;Ae<p;Ae++)A.values[Ae+te*S[2]+V*S[1]+k*S[0]]=u;continue}const oe=Math.floor(ae),pe=Math.ceil(ae),ue=ae-oe;for(let Ae=0;Ae<p;Ae++){let Te=Ae+oe*I[2]+K*I[1]+_*I[0];const Re=b[Te];Te=Ae+pe*I[2]+K*I[1]+_*I[0];const _e=b[Te];Te=Ae+oe*I[2]+Z*I[1]+_*I[0];const Ve=b[Te];Te=Ae+pe*I[2]+Z*I[1]+_*I[0];const We=b[Te],ut=Re+(_e-Re)*ue;Te=Ae+te*S[2]+V*S[1]+k*S[0],A.values[Te]=ut+(Ve+(We-Ve)*ue-ut)*ee}}}else for(let K=0;K<m;++K){const Z=m>1?O*(d-1)+K*z:.5*(O+T)*(d-1);if(Z<0||Z>d-1){for(let ae=0;ae<p;ae++)A.values[ae+K*S[2]+V*S[1]+k*S[0]]=u;continue}const ee=Math.round(Z),te=Math.round(H);for(let ae=0;ae<p;ae++)A.values[ae+K*S[2]+V*S[1]+k*S[0]]=b[ae+ee*I[2]+te*I[1]+_*I[0]]}}}return e.makeTensorInfo(A.shape,A.dtype,A.values)}},DL={kernelName:Sh,backendName:"cpu",kernelFunc:function _L(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:i,reverse:a}=s;Ie(r,"cumprod");const l=Tt([o],r.shape.length);let u=r;null!=l&&(u=Rn({inputs:{x:r},backend:e,attrs:{perm:l}}));const c=Lt(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Fn(u.dtype,"int32"),d=dh(Q(u.shape),h),p=e.data.get(u.dataId).values,f=u.shape[u.shape.length-1],g=a?(A,y)=>A+f-y-1:(A,y)=>A+y;for(let A=0;A<p.length;A+=f)for(let y=0;y<f;y++){const x=g(A,y);if(0===y)d[x]=i?1:p[x];else{const b=g(A,y-1);d[x]=i?p[b]*d[b]:p[x]*d[b]}}const m=e.makeTensorInfo(u.shape,h,d);if(null!=l){const y=Rn({inputs:{x:m},backend:e,attrs:{perm:Ir(l)}});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(u),y}return m}},$L={kernelName:Sl,backendName:"cpu",kernelFunc:function RL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:i,reverse:a}=s;Ie(r,"cumsum");const l=Tt([o],r.shape.length);let u=r;null!=l&&(u=Rn({inputs:{x:r},backend:e,attrs:{perm:l}}));const c=Lt(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Fn(u.dtype,"int32"),d=dn(Q(u.shape),h),p=e.data.get(u.dataId).values,f=u.shape[u.shape.length-1],g=a?(A,y)=>A+f-y-1:(A,y)=>A+y;for(let A=0;A<p.length;A+=f)for(let y=0;y<f;y++){const x=g(A,y);if(0===y)d[x]=i?0:p[x];else{const b=g(A,y-1);d[x]=i?p[b]+d[b]:p[x]+d[b]}}const m=e.makeTensorInfo(u.shape,h,d);if(null!=l){const y=Rn({inputs:{x:m},backend:e,attrs:{perm:Ir(l)}});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(u),y}return m}},OL={kernelName:Th,backendName:"cpu",kernelFunc:function FL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:i,binaryOutput:a}=s;if(1===r.shape.length){const c=zm(e.data.get(r.dataId).values,e.data.get(o.dataId).values,o.dtype,o.shape,i);return e.makeTensorInfo([i],o.dtype,c)}if(2===r.shape.length){const c=O0(e.bufferSync(r),e.bufferSync(o),i,a);return e.makeTensorInfo(c.shape,o.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}},PL={kernelName:kh,backendName:"cpu",kernelFunc:function LL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockSize:o,dataFormat:i}=s;v("NHWC"===i,()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`);const a=r.shape[0],l=r.shape[1],u=r.shape[2],c=r.shape[3],h=l*o,d=u*o,p=c/(o*o),f=e.data.get(r.dataId).values,g=new Float32Array(a*h*d*p);let m=0;for(let A=0;A<a;++A)for(let y=0;y<h;++y){const x=Math.floor(y/o),b=y%o;for(let I=0;I<d;++I){const S=Math.floor(I/o),E=(b*o+I%o)*p;for(let D=0;D<p;++D)g[m++]=f[D+E+c*(S+u*(x+l*A))]}}return e.makeTensorInfo([a,h,d,p],r.dtype,g)}};function z0(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:i,pad:a,dilations:l,dimRoundingMode:u}=s;Ie([r,o],"depthwiseConv2DNative");const c=Ne(r.shape),h=Ne(o.shape);let d=l;null==d&&(d=[1,1]),v(an(i,d),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${d}'`);const p=tn(r.shape,o.shape,i,d,a,u,!0),{filterHeight:f,filterWidth:g,dilationHeight:m,dilationWidth:A,padInfo:y}=p,x=y.left,b=y.top,I=p.outChannels/p.inChannels,S=new Gt(p.outShape,r.dtype),k=e.data.get(r.dataId).values,E=e.data.get(o.dataId).values,D=S.values;for(let O=0;O<p.batchSize;++O){const C=O*c[0],T=O*S.strides[0];for(let _=0;_<p.outHeight;++_){const P=T+_*S.strides[1],z=_*p.strideHeight-b;for(let V=0;V<f;++V){const H=z+V*m;if(H<0||H>=p.inHeight)continue;const K=V*h[0],Z=C+H*c[1];for(let ee=0;ee<p.outWidth;++ee){const te=P+ee*S.strides[2],ae=ee*p.strideWidth-x;for(let oe=0;oe<g;++oe){const pe=ae+oe*A;if(pe<0||pe>=p.inWidth)continue;const Ae=Z+pe*p.inChannels;let Te=te,Re=K+oe*h[1];for(let _e=0;_e<p.inChannels;++_e){const Ve=k[Ae+_e];for(let We=0;We<I;++We)D[Te+We]+=Ve*E[Re+We];Te+=I,Re+=I}}}}}}return e.makeTensorInfo(S.shape,S.dtype,S.values)}const ML={kernelName:Nl,backendName:"cpu",kernelFunc:z0},zL={kernelName:Eh,backendName:"cpu",kernelFunc:function BL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,filterShape:c}=s;Ie([r,o],"depthwiseConv2dNativeBackpropFilter");const h=tn(r.shape,c,i,a,l,u,!0),{strideHeight:d,strideWidth:p,filterHeight:f,filterWidth:g}=h,m=new Gt(h.filterShape,"float32"),A=h.padInfo.left,y=h.padInfo.top,x=h.outChannels/h.inChannels,b=e.data.get(r.dataId).values,I=new Gt(r.shape,r.dtype,b),S=e.data.get(o.dataId).values,k=new Gt(o.shape,o.dtype,S);for(let E=0;E<f;++E){const D=Math.max(0,Math.ceil((y-E)/d)),O=Math.min(h.outHeight,(h.inHeight+y-E)/d);for(let C=0;C<g;++C){const T=Math.max(0,Math.ceil((A-C)/p)),_=Math.min(h.outWidth,(h.inWidth+A-C)/p);for(let P=0;P<h.outChannels;++P){const z=Math.trunc(P/x),V=P%x;let H=0;for(let K=0;K<h.batchSize;++K)for(let Z=D;Z<O;++Z){const ee=E+Z*d-y;for(let te=T;te<_;++te)H+=I.get(K,ee,C+te*p-A,z)*k.get(K,Z,te,P)}m.set(H,E,C,z,V)}}}return e.makeTensorInfo(m.shape,m.dtype,m.values)}},UL={kernelName:_h,backendName:"cpu",kernelFunc:function VL(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,inputShape:c}=s;Ie([r,o],"depthwiseConv2DNativeBackpropInput");const h=Ne(r.shape),d=Ne(o.shape),p=tn(c,o.shape,i,a,l,u,!0),f=new Gt(p.inShape,"float32"),g=f.values,[m,A,y]=f.strides,x=e.data.get(r.dataId).values,[b,I,S]=h,k=e.data.get(o.dataId).values,[E,D,O]=d,{batchSize:C,filterHeight:T,filterWidth:_,inChannels:P,inHeight:z,inWidth:V,outChannels:H,outHeight:K,outWidth:Z,strideHeight:ee,strideWidth:te}=p,ae=T-1-p.padInfo.top,oe=_-1-p.padInfo.left,pe=H/P;for(let ue=0;ue<C;++ue)for(let Ae=0;Ae<P;++Ae)for(let Te=0;Te<z;++Te){const Re=Te-ae,_e=Math.max(0,Math.ceil(Re/ee)),Ve=Math.min(K,(T+Re)/ee);for(let We=0;We<V;++We){const ut=We-oe,yt=Math.max(0,Math.ceil(ut/te)),$t=Math.min(Z,(_+ut)/te);let xt=0;for(let ht=_e;ht<Ve;++ht){const Et=ht*ee-Re;for(let vt=yt;vt<$t;++vt){const hn=b*ue+I*ht+S*vt,Br=E*(T-1-Et)+D*(_-1-(vt*te-ut))+O*Ae;for(let es=0;es<pe;++es)xt+=x[hn+(Ae*pe+es)]*k[Br+es]}}g[m*ue+A*Te+y*We+Ae]=xt}}return e.makeTensorInfo(f.shape,f.dtype,f.values)}},GL={kernelName:Dh,backendName:"cpu",kernelFunc:function WL(n){const{inputs:t,backend:e}=n,{x:s}=t,r=Q(s.shape),o=e.data.get(s.dataId).values,i=Be([r,r],s.dtype),a=i.values;for(let u=0;u<o.length;u++)a[u*r+u]=o[u];const l=[...s.shape,...s.shape];return e.makeTensorInfo(l,i.dtype,i.values)}},HL={kernelName:Tl,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r}=n,{strides:o,pad:i,dilations:a}=e,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,d=r.shape.length,{batchSize:p,inHeight:f,inWidth:g,inChannels:m,outHeight:A,outWidth:y,padInfo:x,strideHeight:b,strideWidth:I,filterHeight:S,filterWidth:k,dilationHeight:E,dilationWidth:D,outShape:O}=ba(s.shape,r.shape,o,i,"NHWC",a),C=Q(O),T=O.length,_=Ft(s.dtype,C);for(let z=0;z<p;++z)for(let V=0;V<A;++V){const H=V*b-x.top;for(let K=0;K<y;++K){const Z=K*I-x.left;for(let ee=0;ee<m;++ee){let te=Number.MIN_SAFE_INTEGER;for(let oe=0;oe<S;++oe){const pe=H+oe*E;if(pe>=0&&pe<f)for(let ue=0;ue<k;++ue){const Ae=Z+ue*D;if(Ae>=0&&Ae<g){const Te=Es([z,pe,Ae,ee],c,Ne(s.shape)),Re=Es([oe,ue,ee],d,Ne(r.shape)),_e=u[Te]+h[Re];_e>te&&(te=_e)}}}_[Es([z,V,K,ee],T,Ne(O))]=te}}}return{dataId:l.write(qr(_,s.dtype),O,s.dtype),shape:O,dtype:s.dtype}}},KL={kernelName:$h,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r,dy:o}=n,{strides:i,pad:a,dilations:l}=e,u=t,c=ns(s.shape,u.data.get(s.dataId).values),h=ns(r.shape,u.data.get(r.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:g,outHeight:m,outWidth:A,padInfo:y,strideHeight:x,strideWidth:b,filterHeight:I,filterWidth:S,dilationHeight:k,dilationWidth:E,outShape:D}=ba(s.shape,r.shape,i,a,"NHWC",l);v(o.rank===D.length,()=>`Error in ${$h}, dy must have the same rank as output ${D.length}, but got ${o.rank}`);const O=ns(D,u.data.get(o.dataId).values),C=yg(r.shape,r.dtype);for(let _=0;_<d;++_)for(let P=0;P<m;++P){const z=P*x-y.top;for(let V=0;V<A;++V){const H=V*b-y.left;for(let K=0;K<g;++K){let Z=Number.MIN_SAFE_INTEGER,ee=0,te=0;for(let ae=0;ae<I;++ae){const oe=z+ae*k;if(oe>=0&&oe<p)for(let pe=0;pe<S;++pe){const ue=H+pe*E;if(ue>=0&&ue<f){const Ae=c[_][oe][ue][K]+h[ae][pe][K];Ae>Z&&(Z=Ae,ee=ae,te=pe)}}}C[ee][te][K]+=O[_][P][V][K]}}}return{dataId:u.write(qr(C,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},qL={kernelName:Rh,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r,dy:o}=n,{strides:i,pad:a,dilations:l}=e,u=t,c=ns(s.shape,u.data.get(s.dataId).values),h=ns(r.shape,u.data.get(r.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:g,outHeight:m,outWidth:A,padInfo:y,strideHeight:x,strideWidth:b,filterHeight:I,filterWidth:S,dilationHeight:k,dilationWidth:E,outShape:D}=ba(s.shape,r.shape,i,a,"NHWC",l);v(o.rank===D.length,()=>`Error in ${Rh}, dy must have the same rank as output ${D.length}, but got ${o.rank}`);const O=ns(D,u.data.get(o.dataId).values),C=yg(s.shape,s.dtype);for(let _=0;_<d;++_)for(let P=0;P<m;++P){const z=P*x-y.top;for(let V=0;V<A;++V){const H=V*b-y.left;for(let K=0;K<g;++K){let Z=Number.MIN_SAFE_INTEGER,ee=z<0?0:z,te=H<0?0:H;for(let ae=0;ae<I;++ae){const oe=z+ae*k;if(oe>=0&&oe<p)for(let pe=0;pe<S;++pe){const ue=H+pe*E;if(ue>=0&&ue<f){const Ae=c[_][oe][ue][K]+h[ae][pe][K];Ae>Z&&(Z=Ae,ee=oe,te=ue)}}}C[_][ee][te][K]+=O[_][P][V][K]}}}return{dataId:u.write(qr(C,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},QL={kernelName:"Draw",backendName:"cpu",kernelFunc:function jL(n){const{inputs:t,backend:e,attrs:s}=n,{image:r}=t,{canvas:o,options:i}=s,{contextOptions:a,imageOptions:l}=i||{},u=(null==l?void 0:l.alpha)||1,c=(null==a?void 0:a.contextType)||"2d";if("2d"!==c)throw new Error(`Context type ${a.contextType} is not supported by the CPU backend.`);const h=o.getContext(c,(null==a?void 0:a.contextAttributes)||{});if(null==h)throw new Error(`Could not get the context with ${c} type.`);const[d,p]=r.shape.slice(0,2),f=2===r.shape.length?1:r.shape[2],g=e.data.get(r.dataId).values,m="float32"===r.dtype?255:1,A=new Uint8ClampedArray(p*d*4);for(let x=0;x<d*p;++x){const b=[0,0,0,255*u];for(let S=0;S<f;S++){const k=g[x*f+S];if("float32"===r.dtype){if(k<0||k>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${k}.`)}else if("int32"===r.dtype&&(k<0||k>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${k}.`);1===f?(b[0]=k*m,b[1]=k*m,b[2]=k*m):b[S]=k*m}const I=4*x;A[I+0]=Math.round(b[0]),A[I+1]=Math.round(b[1]),A[I+2]=Math.round(b[2]),A[I+3]=Math.round(b[3])}o.width=p,o.height=d;const y=new ImageData(A,p,d);return h.putImageData(y,0,0),r}},Vm=Mt((n,t)=>n*t),XL=Pm((n,t,e,s)=>({real:n*e-t*s,imag:n*s+t*e})),Fc=Yt(Qi,Vm,XL),ZL={kernelName:Qi,backendName:"cpu",kernelFunc:Fc};function Ya(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:i}=s;let a;Ie(r,"sum"),a="bool"===r.dtype?Fr({inputs:{x:r},backend:e,attrs:{dtype:"int32"}}):Hs({inputs:{x:r},backend:e});const l=a.shape.length,u=Ge(o,a.shape),c=Tt(u,l);let h=u,d=a;null!=c&&(d=Rn({inputs:{x:a},backend:e,attrs:{perm:c}}),h=Lt(h.length,l)),ln("sum",h,d.shape.length);const[p,f]=nn(d.shape,h);let m=$c(e,p,Fn(d.dtype,"int32"));const A=Q(f),y=e.data.get(m.dataId).values,x=e.data.get(d.dataId).values;for(let b=0;b<y.length;++b){const I=b*A;let S=0;for(let k=0;k<A;++k)S+=x[I+k];y[b]=S}if(i){const I=m;m=At({inputs:{x:m},backend:e,attrs:{shape:Ot(m.shape,u)}}),e.disposeIntermediateTensorInfo(I)}return e.disposeIntermediateTensorInfo(a),null!=c&&e.disposeIntermediateTensorInfo(d),m}const YL={kernelName:iu,backendName:"cpu",kernelFunc:Ya},eP={kernelName:Oh,backendName:"cpu",kernelFunc:function JL(n){const{inputs:t,backend:e,attrs:s}=n,{equation:r}=s,o=t,{allDims:i,summedDims:a,idDims:l}=bf(r,o.length);If(i.length,l,o);const{path:u,steps:c}=Cf(a,l),h=c.length;let d=null,p=i.length;const f=[];for(let g=0;g<h;++g){for(const m of c[g]){const{permutationIndices:A,expandDims:y}=wf(p,l[m]);let x;vf(A)?x=o[m]:(x=Rn({inputs:{x:o[m]},backend:e,attrs:{perm:A}}),f.push(x));const b=x.shape.slice();for(let I=0;I<y.length;++I)b.splice(y[I],0,1);Qe(x.shape,b)||(x=At({inputs:{x},backend:e,attrs:{shape:b}}),f.push(x)),null===d?d=x:(d=Fc({inputs:{a:x,b:d},backend:e}),f.push(d))}g<h-1&&(u[g]>=0&&(d=Ya({inputs:{x:d},backend:e,attrs:{axis:u[g]-(i.length-p),keepDims:!1}}),f.push(d)),p--)}for(const g of f)g!==d&&e.disposeIntermediateTensorInfo(g);return d}},nP={kernelName:Lh,backendName:"cpu",kernelFunc:function tP(n){const{inputs:t,backend:e}=n,{dy:s,y:r}=t;Ie([s,r],"eluGrad");const o=new Float32Array(Q(r.shape)),i=e.data.get(r.dataId).values,a=e.data.get(s.dataId).values;for(let l=0;l<i.length;++l){const u=i[l];o[l]=u>=0?a[l]:a[l]*(u+1)}return e.makeTensorInfo(r.shape,"float32",o)}},V0=Mt((n,t)=>n===t?1:0),U0=Yt(kl,V0,null,"bool"),sP={kernelName:kl,backendName:"cpu",kernelFunc:U0},rP=df,oP=pf,iP=ff,aP=mf,lP=gf,uP=Af,cP=lt(Fi,n=>{const t=Math.sign(n),e=Math.abs(n),s=1/(1+rP*e);return t*(1-((((uP*s+lP)*s+aP)*s+iP)*s+oP)*s*Math.exp(-e*e))}),hP={kernelName:Fi,backendName:"cpu",kernelFunc:cP},W0=Gs(n=>Math.exp(n)),G0=$r(Oi,W0,"float32"),dP={kernelName:Oi,backendName:"cpu",kernelFunc:G0};function Oc(n){const{inputs:t,backend:e,attrs:s}=n,{input:r}=t,{dim:o}=s,i=r.shape.length,a=r.shape.slice();let l=o;return o<0&&(v(-(i+1)<=o,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+o+1),a.splice(l,0,1),At({inputs:{x:r},backend:e,attrs:{shape:a}})}const pP={kernelName:El,backendName:"cpu",kernelFunc:Oc},H0=Gs(n=>Math.expm1(n)),fP=$r(Li,H0),mP={kernelName:Li,backendName:"cpu",kernelFunc:fP},gP=Mt((n,t)=>n/t),Um=Yt(Ri,gP),Wm={kernelName:Ri,backendName:"cpu",kernelFunc:Um},K0=Mt((n,t)=>n-t),AP=Pm((n,t,e,s)=>({real:n-e,imag:t-s})),Gm=Yt(ca,K0,AP),yP={kernelName:ca,backendName:"cpu",kernelFunc:Gm};function q0(n,t,e){const s=n.shape,r=s[0],o=s[1],i=e.data.get(n.dataId),a=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[r,o],c=Q(u),h=on("float32",c),d=on("float32",c);for(let m=0;m<r;m++){const A=go({inputs:{x:a},backend:e,attrs:{begin:[m,0],size:[1,o]}}),y=go({inputs:{x:l},backend:e,attrs:{begin:[m,0],size:[1,o]}}),x=Bn({inputs:{real:A,imag:y},backend:e}),{real:b,imag:I}=xP(x,t,e),S=Ys(b,I);for(let k=0;k<o;k++){const E=yf(S,k);h[m*o+k]=E.real,d[m*o+k]=E.imag}e.disposeIntermediateTensorInfo(A),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(x)}const p=e.makeTensorInfo(u,"float32",h),f=e.makeTensorInfo(u,"float32",d),g=Bn({inputs:{real:p,imag:f},backend:e});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),g}function xP(n,t,e){const s=Q(n.shape),r=e.data.get(n.dataId),o=e.data.get(r.complexTensorInfos.real.dataId).values,i=e.data.get(r.complexTensorInfos.imag.dataId).values;if(function bP(n){return 0==(n&n-1)}(s)){const a=Hm(o,i,s,t,e),l=[n.shape[0],n.shape[1]];if(t){const u=e.makeTensorInfo(l,"float32",a.real),c=e.makeTensorInfo(l,"float32",a.imag),h=e.makeTensorInfo([],"float32",cr(s,"float32")),d=Hs({inputs:{x:h},backend:e}),p=Wm.kernelFunc({inputs:{a:u,b:h},backend:e}),f=Wm.kernelFunc({inputs:{a:c,b:d},backend:e}),g=e.data.get(p.dataId).values,m=e.data.get(f.dataId).values;return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),{real:g,imag:m}}return a}{const l=function wP(n,t,e){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let o=0,i=0;for(let a=0;a<t;a++){const l=nx(r*a,t,e),u=yf(n,a);o+=u.real*l.real-u.imag*l.imag,i+=u.real*l.imag+u.imag*l.real}e&&(o/=t,i/=t),ex(s,o,i,r)}return s}(Ys(o,i),s,t);return Zy(l)}}function Hm(n,t,e,s,r){if(1===e)return{real:n,imag:t};const o=Ys(n,t),i=e/2,a=Yy(o),l=a.real,u=a.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),d=r.makeTensorInfo(c,"float32",u),p=Bn({inputs:{real:h,imag:d},backend:r}),f=Jy(o),g=f.real,m=f.imag,A=[g.length],y=r.makeTensorInfo(A,"float32",g),x=r.makeTensorInfo(A,"float32",m),b=Bn({inputs:{real:y,imag:x},backend:r}),I=Hm(l,u,i,s,r),S=I.real,k=I.imag,E=[S.length],D=r.makeTensorInfo(E,"float32",S),O=r.makeTensorInfo(E,"float32",k),C=Bn({inputs:{real:D,imag:O},backend:r}),T=Hm(g,m,i,s,r),_=T.real,P=T.imag,z=[_.length],V=r.makeTensorInfo(z,"float32",_),H=r.makeTensorInfo(z,"float32",P),K=Bn({inputs:{real:V,imag:H},backend:r}),Z=tx(e,s),ee=[Z.real.length],te=r.makeTensorInfo(ee,"float32",Z.real),ae=r.makeTensorInfo(ee,"float32",Z.imag),oe=Bn({inputs:{real:te,imag:ae},backend:r}),pe=Fc({inputs:{a:oe,b:K},backend:r}),ue=ri({inputs:{a:C,b:pe},backend:r}),Ae=Gm({inputs:{a:C,b:pe},backend:r}),Te=mo({inputs:{input:ue},backend:r}),Re=mo({inputs:{input:Ae},backend:r}),_e=oi({inputs:{input:ue},backend:r}),Ve=oi({inputs:{input:Ae},backend:r}),We=ii({inputs:[Te,Re],backend:r,attrs:{axis:0}}),ut=ii({inputs:[_e,Ve],backend:r,attrs:{axis:0}}),yt=r.data.get(We.dataId).values,$t=r.data.get(ut.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(y),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(D),r.disposeIntermediateTensorInfo(O),r.disposeIntermediateTensorInfo(C),r.disposeIntermediateTensorInfo(V),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(K),r.disposeIntermediateTensorInfo(te),r.disposeIntermediateTensorInfo(ae),r.disposeIntermediateTensorInfo(oe),r.disposeIntermediateTensorInfo(pe),r.disposeIntermediateTensorInfo(ue),r.disposeIntermediateTensorInfo(Ae),r.disposeIntermediateTensorInfo(Te),r.disposeIntermediateTensorInfo(_e),r.disposeIntermediateTensorInfo(Re),r.disposeIntermediateTensorInfo(Ve),r.disposeIntermediateTensorInfo(We),r.disposeIntermediateTensorInfo(ut),{real:yt,imag:$t}}const CP={kernelName:"FFT",backendName:"cpu",kernelFunc:function IP(n){const{inputs:t,backend:e}=n,{input:s}=t,r=Q(s.shape),o=s.shape[s.shape.length-1],a=At({inputs:{x:s},backend:e,attrs:{shape:[r/o,o]}}),l=q0(a,!1,e),u=At({inputs:{x:l},backend:e,attrs:{shape:s.shape}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(l),u}};function Km(n){const{backend:t,attrs:e}=n,{shape:s,value:r,dtype:o}=e,i=o||ko(r),a=Ft(i,Q(s));return function SP(n,t,e){n.fill(t)}(a,r),t.makeTensorInfo(s,i,a)}const vP={kernelName:Mh,backendName:"cpu",kernelFunc:Km},NP={kernelName:Bh,backendName:"cpu",kernelFunc:({inputs:n,backend:e})=>{const{image:s}=n,r=e,o=on(s.dtype,Q(s.shape)),[i,a,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let d=0;d<i;d++){const p=d*l*a*u;for(let f=0;f<a;f++){const g=f*(l*u);for(let m=0;m<l;m++){const A=m*u;for(let y=0;y<u;y++){const x=Math.round(l-m-1),b=p+g+A+y;let I=c[b];x>=0&&x<l&&(I=c[p+g+x*u+y]),o[b]=I}}}}return{dataId:r.write(o,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},j0=Gs(n=>Math.floor(n)),TP=$r(Pi,j0),kP={kernelName:Pi,backendName:"cpu",kernelFunc:TP},EP=Mt((n,t)=>Math.floor(n/t)),_P=Yt(Mi,EP,null,"int32"),DP={kernelName:Mi,backendName:"cpu",kernelFunc:_P},$P={kernelName:mu,backendName:"cpu",kernelFunc:function RP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let g=B0({inputs:{x:r,filter:o},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(i){const m=g;if("NCHW"===c&&1===i.shape.length&&1!==i.shape[0]){const A=At({inputs:{x:i},backend:e,attrs:{shape:[i.shape[0],1,1]}});g=ri({inputs:{a:g,b:A},backend:e}),e.disposeIntermediateTensorInfo(A)}else g=ri({inputs:{a:g,b:i},backend:e});e.disposeIntermediateTensorInfo(m)}if(p){const m=g;if("NCHW"===c&&"prelu"===p&&1===a.shape.length&&1!==a.shape[0]){const A=At({inputs:{x:a},backend:e,attrs:{shape:[a.shape[0],1,1]}});g=Rc(e,g,p,A,f),e.disposeIntermediateTensorInfo(A)}else g=Rc(e,g,p,a,f);e.disposeIntermediateTensorInfo(m)}return g}},OP={kernelName:gu,backendName:"cpu",kernelFunc:function FP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let g=z0({inputs:{x:r,filter:o},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(i){const m=g;g=ri({inputs:{a:g,b:i},backend:e}),e.disposeIntermediateTensorInfo(m)}if(p){const m=g;g=Rc(e,g,p,a,f),e.disposeIntermediateTensorInfo(m)}return g}};function Q0(n,t,e,s,r,o,i,a,l){const u=Be([s,o],e);for(let c=0;c<s;c++){const h=[];let d=0;for(let p=0;p<r;p++){const f=n[c*r+p];d+=f*i[p],h.push(f)}if(d<0||d>=l/o)throw new Error(`Invalid indices: ${h} does not index into ${a}`);for(let p=0;p<o;p++)u.values[c*o+p]=t.get(...t.indexToLoc(d*o+p))}return u}const PP={kernelName:zh,backendName:"cpu",kernelFunc:function LP(n){const{inputs:t,backend:e}=n,{params:s,indices:r}=t,o=Q(s.shape),i=r.shape,a=i[i.length-1],[l,u,c,h]=hf(s,r);if(0===u)return e.makeTensorInfo(l,s.dtype,[]);const f=Q0(e.data.get(r.dataId).values,e.bufferSync(s),s.dtype,u,a,c,h,s.shape,o);return e.makeTensorInfo(l,s.dtype,f.values)}};function X0(n,t,e){const s=Be(e,n.dtype);for(let r=0;r<s.size;++r){const i=s.indexToLoc(r).slice(),u=t.locToIndex([i[0],i[2]]);i[2]=t.values[u];const c=n.locToIndex(i);0<=c&&c<n.values.length&&(s.values[r]=n.values[c])}return s}const BP={kernelName:Dl,backendName:"cpu",kernelFunc:function MP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,indices:o}=t,{axis:i,batchDims:a}=s;Ie([r,o],"gatherV2");const l=Ge(i,r.shape)[0],u=e.data.get(o.dataId).values,c=r.shape[l];for(let b=0;b<u.length;++b){const I=u[b];v(I<=c-1&&I>=0,()=>`GatherV2: the index value ${I} is not in [0, ${c-1}]`)}let h=a;null==a&&(h=0);const d=Q(o.shape),p=Tf(r,o,l,h),f=At({inputs:{x:r},backend:e,attrs:{shape:[p.batchSize,p.outerSize,p.dimSize,p.sliceSize]}}),g=At({inputs:{x:o},backend:e,attrs:{shape:[p.batchSize,d/p.batchSize]}}),m=[p.batchSize,p.outerSize,d/p.batchSize,p.sliceSize],A=e.bufferSync(g),x=X0(e.bufferSync(f),A,m);return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),e.makeTensorInfo(p.outputShape,x.dtype,x.values)}},Z0=Mt((n,t)=>n>t?1:0),zP=Yt(Rl,Z0,null,"bool"),VP={kernelName:Rl,backendName:"cpu",kernelFunc:zP},Y0=Mt((n,t)=>n>=t?1:0),UP=Yt(Bi,Y0,null,"bool"),WP={kernelName:Bi,backendName:"cpu",kernelFunc:UP},HP={kernelName:Vh,backendName:"cpu",kernelFunc:function GP(n){const{inputs:t,backend:e}=n,{input:s}=t,r=Q(s.shape),o=s.shape[s.shape.length-1],a=At({inputs:{x:s},backend:e,attrs:{shape:[r/o,o]}}),l=q0(a,!0,e),u=At({inputs:{x:l},backend:e,attrs:{shape:s.shape}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(l),u}},KP=lt(Vi,n=>Number.isFinite(n)?1:0,"bool"),qP={kernelName:Vi,backendName:"cpu",kernelFunc:KP},jP=lt(Ui,n=>Math.abs(n)===1/0?1:0,"bool"),QP={kernelName:Ui,backendName:"cpu",kernelFunc:jP},XP=lt(Wi,n=>Number.isNaN(n)?1:0,"bool"),ZP={kernelName:Wi,backendName:"cpu",kernelFunc:XP},J0=Mt((n,t)=>n<t?1:0),YP=Yt(Fl,J0,null,"bool"),JP={kernelName:Fl,backendName:"cpu",kernelFunc:YP},ew=Mt((n,t)=>n<=t?1:0),eM=Yt(Ol,ew,null,"bool"),tM={kernelName:Ol,backendName:"cpu",kernelFunc:eM};function tw(n,t,e){const s=(t-n)/(e-1),r=dn(e,"float32");r[0]=n;for(let o=1;o<r.length;o++)r[o]=r[o-1]+s;return r}const sM={kernelName:Wh,backendName:"cpu",kernelFunc:function nM(n){const{backend:t,attrs:e}=n,{start:s,stop:r,num:o}=e,i=tw(s,r,o);return t.makeTensorInfo([i.length],"float32",i)}},nw=Gs(n=>Math.log(n)),rM=$r(Gi,nw),oM={kernelName:Gi,backendName:"cpu",kernelFunc:rM},iM=lt(Hi,n=>Math.log1p(n)),aM={kernelName:Hi,backendName:"cpu",kernelFunc:iM},lM=Mt((n,t)=>n&&t),uM=Yt(Ll,lM,null,"bool"),cM={kernelName:Ll,backendName:"cpu",kernelFunc:uM},hM=lt(Pl,n=>n?0:1,"bool"),dM={kernelName:Pl,backendName:"cpu",kernelFunc:hM},pM=Mt((n,t)=>n||t),fM=Yt(Ml,pM,null,"bool"),mM={kernelName:Ml,backendName:"cpu",kernelFunc:fM},AM={kernelName:Bl,backendName:"cpu",kernelFunc:function gM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{depthRadius:o,bias:i,alpha:a,beta:l}=s;Ie(r,"LRN");const u=r.shape[3],c=u-1,h=e.data.get(r.dataId).values,d=Q(r.shape),p=new Float32Array(d);function f(g){const m=g%u;let A=g-m+Math.max(0,m-o);const y=g-m+Math.min(m+o,c);let x=0;for(;A<=y;A++){const b=h[A];x+=b*b}return x}for(let g=0;g<d;g++){const m=f(g),A=h[g]*Math.pow(i+a*m,-l);p[g]=A}return e.makeTensorInfo(r.shape,r.dtype,p)}},xM={kernelName:Gh,backendName:"cpu",kernelFunc:function yM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,y:o,dy:i}=t,{depthRadius:a,bias:l,alpha:u,beta:c}=s;Ie(i,"LRNGrad");const h=Q(i.shape),d=i.shape[3],p=e.data.get(i.dataId).values,f=e.data.get(r.dataId).values,g=e.data.get(o.dataId).values,m=new Float32Array(h),A=h;for(let y=0;y<A;y++){const x=y%d,b=y-x+Math.max(0,x-a),I=y-x+Math.min(d,x+a+1);let S=0;for(let k=b;k<I;k++)S+=Math.pow(f[k],2);S=u*S+l;for(let k=b;k<I;k++){let E=-2*u*c*f[k]*g[y]/S;y===k&&(E+=Math.pow(S,-c)),E*=p[y],m[k]+=E}}return e.makeTensorInfo(i.shape,r.dtype,m)}};function sw(n,t,e,s){const r=on(s,Q(e));for(let o=0;o<r.length;++o){const i=o*t;let a=n[i];for(let l=0;l<t;++l){const u=n[i+l];(Number.isNaN(u)||u>a)&&(a=u)}r[o]=a}return r}function rw(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reductionIndices:o,keepDims:i}=s,a=e;let l=r.shape;const u=l.length,c=Ge(o,l);let h=c;const d=Tt(h,u);let p=a.data.get(r.dataId).values;if(null!=d){const b=new Array(u);for(let I=0;I<b.length;I++)b[I]=l[d[I]];p=Mm(p,l,r.dtype,d,b),h=Lt(h.length,u),l=b}Ie(r,"max"),ln("max",h,u);const[f,g]=nn(l,h),A=sw(p,Q(g),f,r.dtype),y=a.write(A,f,r.dtype);let x=f;return i&&(x=Ot(f,c)),{dataId:y,shape:x,dtype:r.dtype}}const bM={kernelName:zl,backendName:"cpu",kernelFunc:rw},ow=Mt((n,t)=>Math.max(n,t)),wM=Yt(Ki,ow),IM={kernelName:Ki,backendName:"cpu",kernelFunc:wM},vM={kernelName:Vl,backendName:"cpu",kernelFunc:function CM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;Ie(r,"maxPool");const{filterSize:o,strides:i,pad:a,dimRoundingMode:l}=s;v(an(i,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const c=os(r.shape,o,i,1,a,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&Qe(c.inShape,c.outShape))h=Hs({inputs:{x:r},backend:e});else{const d=e.data.get(r.dataId).values,p=Ne(r.shape),f=Bm(d,0,r.dtype,p,c,"max");h=e.makeTensorInfo(c.outShape,r.dtype,f.values)}return h}},NM={kernelName:Ul,backendName:"cpu",kernelFunc:function SM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:i,pad:a,dimRoundingMode:l,dataFormat:u}=s;Ie(r,"maxPool3d");const c=Qs(r.shape,o,i,1,a,l,u),d=$0(e.data.get(r.dataId).values,0,r.dtype,Ne(r.shape),c,"max");return e.makeTensorInfo(d.shape,"float32",d.values)}},kM={kernelName:Kh,backendName:"cpu",kernelFunc:function TM(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,{filterSize:i,strides:a,pad:l,dimRoundingMode:u}=s;Ie([r,o],"maxPool3DGrad");const c=Qs(o.shape,i,a,1,l,u),d=function zO(n,t){const e=Be(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,o=t.strideWidth,i=t.dilationDepth,a=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.front,p=t.padInfo.top,f=t.padInfo.left;for(let g=0;g<t.batchSize;++g)for(let m=0;m<t.inChannels;++m)for(let A=0;A<t.outDepth;++A){const y=A*s-d;let x=y;for(;x<0;)x+=i;const b=Math.min(t.inDepth,u+y);for(let I=0;I<t.outHeight;++I){const S=I*r-p;let k=S;for(;k<0;)k+=a;const E=Math.min(t.inHeight,c+S);for(let D=0;D<t.outWidth;++D){const O=D*o-f;let C=O;for(;C<0;)C+=l;const T=Math.min(t.inWidth,h+O);let _=Number.NEGATIVE_INFINITY,P=-1;for(let z=x;z<b;z+=i){const V=z-y;for(let H=k;H<E;H+=a){const K=H-S;for(let Z=C;Z<T;Z+=l){const ee=Z-O,te=n.get(g,z,H,Z,m);te>=_&&(_=te,P=V*c*h+K*c+ee)}}}e.set(P,g,A,I,D,m)}}}return e}(e.bufferSync(o),c),p=c.strideDepth,f=c.strideHeight,g=c.strideWidth,m=c.dilationDepth,A=c.dilationHeight,y=c.dilationWidth,x=c.effectiveFilterDepth,b=c.effectiveFilterHeight,I=c.effectiveFilterWidth,S=x-1-c.padInfo.front,k=I-1-c.padInfo.left,E=b-1-c.padInfo.top,D=Be(o.shape,"float32"),O=e.bufferSync(r);for(let C=0;C<c.batchSize;++C)for(let T=0;T<c.inChannels;++T)for(let _=0;_<c.inDepth;++_)for(let P=0;P<c.inHeight;++P)for(let z=0;z<c.inWidth;++z){const V=_-S,H=P-E,K=z-k;let Z=0;for(let ee=0;ee<x;ee+=m){const te=(V+ee)/p;if(!(te<0||te>=c.outDepth||Math.floor(te)!==te))for(let ae=0;ae<b;ae+=A){const oe=(H+ae)/f;if(!(oe<0||oe>=c.outHeight||Math.floor(oe)!==oe))for(let pe=0;pe<I;pe+=y){const ue=(K+pe)/g;if(ue<0||ue>=c.outWidth||Math.floor(ue)!==ue)continue;const Re=x*b*I-1-d.get(C,te,oe,ue,T)===ee*b*I+ae*I+pe?1:0;0!==Re&&(Z+=O.get(C,te,oe,ue,T)*Re)}}}D.set(Z,C,_,P,z,T)}return e.makeTensorInfo(D.shape,D.dtype,D.values)}},_M={kernelName:Hh,backendName:"cpu",kernelFunc:function EM(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o,output:i}=t,a=o;Ie([o,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=os(a.shape,l,u,1,c,h),p=e.data.get(a.dataId).values,f=Be(d.outShape,a.dtype,R0(p,a.shape,a.dtype,d).values),g=d.strideHeight,m=d.strideWidth,A=d.dilationHeight,y=d.dilationWidth,x=d.effectiveFilterHeight,b=d.effectiveFilterWidth,I=b-1-d.padInfo.left,S=x-1-d.padInfo.top,k=Be(a.shape,"float32"),E=e.data.get(r.dataId).values,D=Be(r.shape,"float32",E);for(let O=0;O<d.batchSize;++O)for(let C=0;C<d.inChannels;++C)for(let T=0;T<d.inHeight;++T)for(let _=0;_<d.inWidth;++_){const P=T-S,z=_-I;let V=0;for(let H=0;H<x;H+=A){const K=(P+H)/g;if(!(K<0||K>=d.outHeight||Math.floor(K)!==K))for(let Z=0;Z<b;Z+=y){const ee=(z+Z)/m;if(ee<0||ee>=d.outWidth||Math.floor(ee)!==ee)continue;const oe=x*b-1-f.get(O,K,ee,C)===H*b+Z?1:0;0!==oe&&(V+=D.get(O,K,ee,C)*oe)}}k.set(V,O,T,_,C)}return e.makeTensorInfo(k.shape,k.dtype,k.values)}},RM={kernelName:qh,backendName:"cpu",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{filterSize:r,strides:o,pad:i,includeBatchInIndex:a}=t,l=e;Ie(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=os(s.shape,r,o,[1,1],i),[h,d]=function DM(n,t,e,s,r){const i=Bm(n,0,e,Ne(t),r,"max"),a=R0(n,t,e,r,!0,s);return[i.values,a.values]}(u,s.shape,s.dtype,a,c),p=l.write(h,c.outShape,s.dtype),f=l.write(d,c.outShape,s.dtype);return[{dataId:p,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},FM={kernelName:Wl,backendName:"cpu",kernelFunc:function $M(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:i}=s,a=Ge(o,r.shape),c=Q(nn(r.shape,a)[1]),h=[],d=e.makeTensorInfo([],"float32",new Float32Array([c]));h.push(d);const p=Fr({inputs:{x:r},backend:e,attrs:{dtype:"float32"}});h.push(p);const f=Um({inputs:{a:p,b:d},backend:e});h.push(f);const g=Ya({inputs:{x:f},backend:e,attrs:{axis:o,keepDims:i}});return h.forEach(m=>e.disposeIntermediateTensorInfo(m)),g}},LM={kernelName:Gl,backendName:"cpu",kernelFunc:function OM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:i}=s;Ie(r,"min");const a=Ge(o,r.shape);let l=a;const u=Tt(l,r.shape.length);let c=r;null!=u&&(c=Rn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=Lt(l.length,r.shape.length)),ln("min",l,c.shape.length);const[h,d]=nn(c.shape,l),p=Q(d),f=dn(Q(h),c.dtype),g=e.data.get(c.dataId).values;for(let A=0;A<f.length;++A){const y=A*p;let x=g[y];for(let b=0;b<p;++b){const I=g[y+b];(Number.isNaN(I)||I<x)&&(x=I)}f[A]=x}null!=u&&e.disposeIntermediateTensorInfo(c);const m=e.makeTensorInfo(h,c.dtype,f);if(i){const y=At({inputs:{x:m},backend:e,attrs:{shape:Ot(h,a)}});return e.disposeIntermediateTensorInfo(m),y}return m}},iw=Mt((n,t)=>Math.min(n,t)),PM=Yt(qi,iw),MM={kernelName:qi,backendName:"cpu",kernelFunc:PM},zM={kernelName:Hl,backendName:"cpu",kernelFunc:function BM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:o,mode:i}=s;Ie(r,"mirrorPad");const a=o.map((x,b)=>x[0]+r.shape[b]+x[1]),l=o.map(x=>x[0]),u=o.map((x,b)=>x[0]+r.shape[b]),c="reflect"===i?0:1,h=e.data.get(r.dataId).values,d=r.shape.length,p=Ne(r.shape),f=Q(a),g=a.length,m=Ne(a),A=on(r.dtype,f);for(let x=0;x<f;x++){let b=Eo(x,g,m);for(let S=0;S<g;S++)b[S]<l[S]?b[S]=2*l[S]-b[S]-c:b[S]>=u[S]&&(b[S]=2*(u[S]-1)-b[S]+c);b=b.map((S,k)=>S-l[k]);const I=Es(b,d,p);A[x]=h[I]}return{dataId:e.write(A,a,r.dtype),shape:a,dtype:r.dtype}}},VM=Mt((n,t)=>{const e=n%t;return n<0&&t<0||n>=0&&t>=0?e:(e+t)%t}),UM=Yt(ji,VM),WM={kernelName:ji,backendName:"cpu",kernelFunc:UM};function aw(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{dim:o}=s,i=r.shape.length;let a=o;if(-1===a&&(a=i-1),a!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${a}`);const l=Ge([a],r.shape),u=rw({inputs:{x:r},backend:e,attrs:{reductionIndices:l,keepDims:!1}}),c=Ot(u.shape,l),h=At({inputs:{x:u},backend:e,attrs:{shape:c}}),d=Gm({inputs:{a:r,b:h},backend:e}),p=G0({inputs:{x:d},backend:e}),f=Ya({inputs:{x:p},backend:e,attrs:{axis:l,keepDims:!1}}),g=At({inputs:{x:f},backend:e,attrs:{shape:c}}),m=Um({inputs:{a:p,b:g},backend:e});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),m}const GM={kernelName:uu,backendName:"cpu",kernelFunc:aw},KM={kernelName:jh,backendName:"cpu",kernelFunc:function HM(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{numSamples:o,seed:i,normalized:a}=s;Ie(r,"multinomial");const l=a?r:aw({inputs:{logits:r},backend:e,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=e.data.get(l.dataId).values,d=[u,o],p=dn(Q(d),"int32");for(let f=0;f<u;++f){const g=f*c,m=new Float32Array(c-1);m[0]=h[g];for(let x=1;x<m.length;++x)m[x]=m[x-1]+h[g+x];const A=Uu.alea(i.toString()),y=f*o;for(let x=0;x<o;++x){const b=A();p[y+x]=m.length;for(let I=0;I<m.length;I++)if(b<m[I]){p[y+x]=I;break}}}return a||e.disposeIntermediateTensorInfo(l),e.makeTensorInfo(d,"int32",p)}};function lw(n,t,e){const s=cr(-1,e);return Vm([],t,s,n,e)}const jM={kernelName:Kl,backendName:"cpu",kernelFunc:function qM(n){const{inputs:t,backend:e}=n,{x:s}=t;Ie(s,"neg");const r=e.data.get(s.dataId).values,[o,i]=lw(r,s.shape,s.dtype);return e.makeTensorInfo(i,s.dtype,o)}},QM=Zp,ZM={kernelName:Qh,backendName:"cpu",kernelFunc:function XM(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l}=s;Ie(r,"NonMaxSuppression");const u=e.data.get(r.dataId).values,c=e.data.get(o.dataId).values,{selectedIndices:h}=QM(u,c,i,a,l);return e.makeTensorInfo([h.length],"int32",new Int32Array(h))}},YM=Yp,eB={kernelName:Xh,backendName:"cpu",kernelFunc:function JM(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,padToMaxOutputSize:u}=s;Ie(r,"NonMaxSuppressionPadded");const c=e.data.get(r.dataId).values,h=e.data.get(o.dataId).values,{selectedIndices:d,validOutputs:p}=YM(c,h,i,a,l,u);return[e.makeTensorInfo([d.length],"int32",new Int32Array(d)),e.makeTensorInfo([],"int32",new Int32Array([p]))]}},tB=Jp,sB={kernelName:Zh,backendName:"cpu",kernelFunc:function nB(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,softNmsSigma:u}=s;Ie(r,"NonMaxSuppressionWithScore");const c=e.data.get(r.dataId).values,h=e.data.get(o.dataId).values,d=i,p=a,f=l,g=u,{selectedIndices:m,selectedScores:A}=tB(c,h,d,p,f,g);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([A.length],"float32",new Float32Array(A))]}},uw=Mt((n,t)=>n!==t?1:0),rB=Yt(ql,uw,null,"bool"),oB={kernelName:ql,backendName:"cpu",kernelFunc:rB},aB={kernelName:Ql,backendName:"cpu",kernelFunc:function iB(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r}=t,{dtype:o,depth:i,onValue:a,offValue:l}=s;Ie(r,"oneHot");const u=Q(r.shape),c=new Float32Array(u*i);c.fill(l);const h=e.data.get(r.dataId).values;for(let d=0;d<u;++d)h[d]>=0&&h[d]<i&&(c[d*i+h[d]]=a);return e.makeTensorInfo([...r.shape,i],o,c)}};function Lc(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const r=mo({inputs:{input:s},backend:e}),o=Lc({inputs:{x:r},backend:e}),i=oi({inputs:{input:s},backend:e}),a=Lc({inputs:{x:i},backend:e}),l=Bn({inputs:{real:o,imag:a},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}return Km({backend:e,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const lB={kernelName:pu,backendName:"cpu",kernelFunc:Lc},uB={kernelName:jl,backendName:"cpu",kernelFunc:function cw(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const r=mo({inputs:{input:s},backend:e}),o=cw({inputs:{x:r},backend:e}),i=oi({inputs:{input:s},backend:e}),a=Lc({inputs:{x:i},backend:e}),l=Bn({inputs:{real:o,imag:a},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}return Km({backend:e,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function hw(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s;if(1===t.length)return Oc({inputs:{input:t[0]},backend:e,attrs:{dim:r}});const o=t[0].shape,i=t[0].dtype;t.forEach(c=>{$n(o,c.shape,"All tensors passed to stack must have matching shapes"),v(i===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});const a=[],u=ii({inputs:t.map(c=>{const h=Oc({inputs:{input:c},backend:e,attrs:{dim:r}});return a.push(h),h}),backend:e,attrs:{axis:r}});return a.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}const cB={kernelName:Xl,backendName:"cpu",kernelFunc:hw},dw={kernelName:Zl,backendName:"cpu",kernelFunc:function hB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:o,constantValue:i}=s;Ie(r,"pad");const a=o.map((y,x)=>y[0]+r.shape[x]+y[1]),l=o.map(y=>y[0]),u=e.data.get(r.dataId).values,c=Q(r.shape),h=r.shape.length,d=Ne(r.shape),p=Q(a),f=a.length,g=Ne(a),m=on(r.dtype,p);0!==i&&m.fill(i);for(let y=0;y<c;y++)m[Es(Eo(y,h,d).map((S,k)=>S+l[k]),f,g)]=u[y];return{dataId:e.write(m,a,r.dtype),shape:a,dtype:r.dtype}}},dB=Mt((n,t)=>Math.pow(n,t)),pB=Yt(Xi,dB),fB={kernelName:Xi,backendName:"cpu",kernelFunc:pB};function pw(n,t,e,s){const[r,o]=nn(n,s),i=Fn(t,"int32"),a=dn(Q(r),i),l=Q(o);for(let u=0;u<a.length;++u){const c=u*l;let h=1;for(let d=0;d<l;++d)h*=e[c+d];a[u]=h}return{outVals:a,outShape:r,outDtype:i}}const gB={kernelName:Jl,backendName:"cpu",kernelFunc:function mB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:i}=s;Ie(r,"prod");const a=r.shape.length,l=Ge(o,r.shape),u=Tt(l,a);let c=l,h=r;const d=[];null!=u&&(h=Rn({inputs:{x:r},backend:e,attrs:{perm:u}}),d.push(h),c=Lt(c.length,a));const p=e.data.get(h.dataId).values,{outVals:f,outShape:g,outDtype:m}=pw(h.shape,h.dtype,p,c);let A=g;return i&&(A=Ot(g,l)),d.forEach(y=>e.disposeIntermediateTensorInfo(y)),e.makeTensorInfo(A,m,f)}};function fw(n,t){const e=n.slice(0,t);for(;e.length<t;)e.push(1);for(let s=t;s<n.length;s++)e[t-1]*=n[s];return e}function mw(n,t,e,s,r,o,i,a){if(0===n.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function AB(n,t,e){n.forEach((s,r)=>{if(s<0||s>=e){const o=Eo(r,t.length,Ne(t)).join(",");throw new Error(`indices[${o}] = ${s} is not in [0, ${e})`)}})}(o,i,t[0][0]-1),0===s.length)throw new Error("params.rank must be nonzero");const u=s[0],{outSplits:c,valueSlices:h,numValues:d}=function xB(n,t,e,s){const r=[];let o=0;const a=new Array(t.length-1+e.length).fill(null).map(()=>[0]);!function yB(n,t){for(let e=0;e<n.length;++e){const s=n[e],r=e===n.length-1?t:n[e+1].length;if(0===s.length)throw new Error("Ragged splits may not be empty");if(s[0]<0)throw new Error("Ragged splits must be non-negative");if(s[s.length-1]>r)throw new Error("Ragged splits must not point past values");for(let o=1;o<s.length;++o)if(s[o-1]>s[o])throw new Error("Ragged splits must be sorted in ascending order")}}(e,s);let l=1;for(let u=0;u<t.length-1;++u){l*=t[u];const c=t[u+1];for(let h=1;h<l+1;++h)a[u].push(h*c)}for(let u=0;u<n.length;++u){let c=n[u],h=n[u]+1;for(let d=0;d<e.length;++d){const p=e[d],f=d+t.length-1;if(f>=0){const g=a[f],m=g[g.length-1]-p[c];for(let A=c;A<h;++A)a[f].push(p[A+1]+m)}c=p[c],h=p[h]}h!==c&&(r.push([c,h]),o+=h-c)}return{outSplits:a,valueSlices:r,numValues:o}}(o,i,n,u),p=function bB(n){const t=[];for(let e=0;e<n.length;++e){const r=Ft("int32",n[e].length);t.push(r),n[e].forEach((o,i)=>r[i]=o)}return t}(c),f=function IB(n,t,e,s,r){const o=t.slice();o[0]=r;const i=Ft(e,Q(o)),a=n.length;return function wB(n,t,e,s,r,o){const i=fw(t,2)[1],a=fw(o,2)[1];let l=0;for(const u of e)for(let c=u[0];c<u[1];++c){for(let h=0;h<s;++h)r[l*a+h]=n[c*i+h];++l}}(n,t,s,0===a?0:a/t[0],i,o),[i,o]}(e,s,r,h,d);return[p,f[0],f[1]]}const vB={kernelName:Yh,backendName:"cpu",kernelFunc:function CB(n){const{inputs:t,backend:e,attrs:s}=n,{paramsNestedSplits:r,paramsDenseValues:o,indices:i}=t,l=r.map(A=>e.data.get(A.dataId).values),u=r.map(A=>A.shape),c=e.data.get(o.dataId).values,h=e.data.get(i.dataId).values,[d,p,f]=mw(l,u,c,o.shape,o.dtype,h,i.shape),g=d.map(A=>e.makeTensorInfo([A.length],"int32",A)),m=e.makeTensorInfo(f,o.dtype,p);return g.concat([m])}},gw=2147483647;function Aw(n,t,e,s,r,o,i){if(t.length>1)throw new Error("starts must be a scalar or vector");if(r.length>1)throw new Error("limits must be a scalar or vector");if(i.length>1)throw new Error("deltas must be a scalar or vector");const a=0===t.length,l=0===r.length,u=0===i.length,c=[];a||c.push(t[0]),l||c.push(r[0]),u||c.push(i[0]);for(let m=1;m<c.length;++m)if(c[m]!==c[m-1])throw new Error("starts, limits, and deltas must have the same shape");const h=0===c.length?1:c[0],d=Ft("int32",h+1);d[0]=0;for(let m=0;m<h;++m){const A=a?n[0]:n[m],y=l?s[0]:s[m],x=u?o[0]:o[m];if(0===x)throw new Error("Requires delta != 0");let b;if(x>0&&y<A||x<0&&y>A)b=0;else if(b=Math.ceil(Math.abs((y-A)/x)),b>gw)throw new Error(`Requires ((limit - start) / delta) <= ${gw}`);d[m+1]=d[m]+b}const f=Ft(e,d[h]);let g=0;for(let m=0;m<h;++m){const A=d[m+1]-d[m];let y=a?n[0]:n[m];const x=u?o[0]:o[m];for(let b=0;b<A;++b)f[g++]=y,y+=x}return[d,f]}const NB={kernelName:Jh,backendName:"cpu",kernelFunc:function SB(n){const{inputs:t,backend:e}=n,{starts:s,limits:r,deltas:o}=t,i=e.data.get(s.dataId).values,a=e.data.get(r.dataId).values,l=e.data.get(o.dataId).values,[u,c]=Aw(i,s.shape,s.dtype,a,r.shape,l,o.shape);return[e.makeTensorInfo([u.length],"int32",u),e.makeTensorInfo([c.length],s.dtype,c)]}};var ps=Ps;class Pc{constructor(t,e,s,r,o,i,a,l,u,c){this.shape=t,this.shapeShape=e,this.values=s,this.valuesShape=r,this.valuesDType=o,this.defaultValue=i,this.defaultValueShape=a,this.rowPartitionValues=l,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=jy(c),this.raggedRank=Qy(this.rowPartitionTypes)}getRowPartitionTypeByDimension(t){return this.rowPartitionTypes[0]===ps.FIRST_DIM_SIZE?this.rowPartitionTypes[t+1]:this.rowPartitionTypes[t]}getRowPartitionTensor(t){return this.rowPartitionTypes[0]===ps.FIRST_DIM_SIZE?this.rowPartitionValues[t+1]:this.rowPartitionValues[t]}getMaxWidth(t){const e=this.getRowPartitionTensor(t-1);switch(this.getRowPartitionTypeByDimension(t-1)){case ps.VALUE_ROWIDS:return Pc.getMaxWidthValueRowID(e);case ps.ROW_SPLITS:return Pc.getMaxWidthRowSplit(e);default:throw new Error(`Cannot handle partition type ${ps[this.getRowPartitionTypeByDimension(t-1)]}`)}}static getMaxWidthRowSplit(t){const e=t.length;if(0===e||1===e)return 0;let s=0;for(let r=0;r<e-1;++r){const o=t[r+1]-t[r];o>s&&(s=o)}return s}static getMaxWidthValueRowID(t){const e=t.length;if(0===e)return 0;let s=0,r=t[0],o=0;for(let i=1;i<e;++i){const a=t[i];a!==r&&(r=a,o=Math.max(i-s,o),s=i)}return Math.max(e-s,o)}tensorShapeFromTensor(t,e,s=!0){if(0===e.length){if(-1===t[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return xw(t,s)}calculateOutputSize(t){const e=this.valuesShape;Xy(this.defaultValueShape,e);const r=this.tensorShapeFromTensor(this.shape,this.shapeShape),i=qy(this.raggedRank,r,e);i[0]<0&&(i[0]=t);for(let a=1;a<=this.raggedRank;++a)i[a]<0&&(i[a]=this.getMaxWidth(a));return i}calculateFirstParentOutputIndex(t,e,s){const r=Math.min(t,s),o=[];let i=0;for(let a=0;a<r;++a,i+=e)o.push(i);for(let a=r;a<t;++a)o.push(-1);return v(o.length===t,()=>"Final length of result must be equal to firstDimension."),o}calculateOutputIndexRowSplit(t,e,s,r){const o=t.length,i=[];for(let a=0;a<o-1;++a){const l=t[a+1]-t[a];let u=Math.min(r,l),c=e[a];-1===c&&(u=0);for(let h=0;h<u;++h)i.push(c),c+=s;for(let h=0;h<l-u;++h)i.push(-1)}if(o>0&&i.length!==t[o-1])throw new Error("Invalid row split size.");return i}calculateOutputIndexValueRowID(t,e,s,r){const o=t.length,i=[];if(0===o)return[];let a=0,l=t[0];if(l>=e.length)throw new Error(`Got currentValueRowId=${l}, which is not less than ${e.length}`);let u=e[l];i.push(u);for(let c=1;c<o;++c){const h=t[c];if(h===l)u>=0&&(++a,a<r?u+=s:u=-1);else{if(a=0,l=h,h>=e.length)throw new Error(`Got nextValueRowId=${h} which is not less than ${e.length}`);u=e[h]}i.push(u)}if(i.length!==t.length)throw new Error("Invalid row ids.");return i}calculateOutputIndex(t,e,s,r){const o=this.getRowPartitionTensor(t),i=this.getRowPartitionTypeByDimension(t);switch(i){case ps.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(o,e,s,r);case ps.ROW_SPLITS:if(o.length-1>e.length)throw new Error(`Row partition size is greater than output size: ${o.length-1} > ${e.length}`);return this.calculateOutputIndexRowSplit(o,e,s,r);default:throw new Error(`Unsupported partition type: ${ps[i]}`)}}getFirstDimensionSize(){const t=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const e=this.rowPartitionTypes[0];switch(e){case ps.FIRST_DIM_SIZE:return t[0];case ps.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case ps.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${ps[e]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),s=this.calculateOutputSize(e),r=new Array(this.raggedRank+1);r[r.length-1]=1;for(let l=r.length-2;l>=0;--l)r[l]=r[l+1]*s[l+1];const o=xw(s,!1),i=Ft(this.valuesDType,Q(o));if(r[0]*s[0]>0){let l=this.calculateFirstParentOutputIndex(e,r[0],s[0]);for(let u=1;u<=this.raggedRank;++u)l=this.calculateOutputIndex(u-1,l,r[u],s[u]);this.setOutput(this.raggedRank,l,i,o)}return[o,i]}setOutput(t,e,s,r){if(0===s.length)return;const o=this.values,i=s;let a=r.slice();a=a.slice(t+1);const l=Q(a),u=e.length;let c=this.defaultValue;if(c.length!==l&&1!==c.length){const f=this.defaultValueShape;U(()=>{const g=M(c,f);c=Wo(g,a).dataSync()})}let h=0,d=0,p=0;for(let f=0;f<=u;++f){let g=f<u?e[f]:-1;if(g!==p){if(d<p){const m=o.subarray(h*l);yw(i.subarray(d*l),m,(p-d)*l)}if(f>=u&&(g=Math.floor(s.length/l)),g>p)if(1===this.defaultValue.length)i.subarray(p*l,g*l).fill(this.defaultValue[0]),p=g;else for(;g>p;)yw(i.slice(p*l),c,l),++p;g<0?(h=f+1,d=p):(h=f,d=p,p=d+1)}else++p}}}function yw(n,t,e){for(let s=0;s<e;s++)n[s]=t[s]}function xw(n,t){const e=[];for(let s of n){if(s<0){if(!t)throw new Error(`Dimension ${s} must be >= 0`);if(s<-1)throw new Error(`Dimension ${s} must be >= -1`);s=-1}e.push(s)}return e}function bw(n,t,e,s,r,o,i,a,l,u){return new Pc(n,t,e,s,r,o,i,a,l,u).compute()}const kB={kernelName:ed,backendName:"cpu",kernelFunc:function TB(n){const{inputs:t,backend:e,attrs:s}=n,{shape:r,values:o,defaultValue:i,rowPartitionTensors:a}=t,{rowPartitionTypes:l}=s,u=e.data.get(r.dataId).values,c=e.data.get(o.dataId).values,h=e.data.get(i.dataId).values,d=a.map(m=>e.data.get(m.dataId).values),p=a.map(m=>m.shape),[f,g]=bw(u,r.shape,c,o.shape,o.dtype,h,i.shape,d,p,l);return e.makeTensorInfo(f,o.dtype,g)}};function ww(n,t,e,s){if(n===t||n<t&&e<0||t<n&&e>1)return dn(0,s);const l=dn(Math.abs(Math.ceil((t-n)/e)),s);t<n&&1===e&&(e=-1),l[0]=n;for(let u=1;u<l.length;u++)l[u]=l[u-1]+e;return l}const _B={kernelName:td,backendName:"cpu",kernelFunc:function EB(n){const{backend:t,attrs:e}=n,{start:s,stop:r,dtype:o,step:i}=e,a=ww(s,r,i,o);return t.makeTensorInfo([a.length],o,a)}},DB=lt(Zi,n=>1/n),RB={kernelName:Zi,backendName:"cpu",kernelFunc:DB},FB={kernelName:nu,backendName:"cpu",kernelFunc:function $B(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:i,size:a}=s;Ie(r,"resizeBilinear");const l=Ne(r.shape),[u,c]=a,[h,d,p,f]=r.shape,g=e.data.get(r.dataId).values,m=new Float32Array(Q([h,u,c,f])),A=[o&&u>1?d-1:d,o&&c>1?p-1:p],y=[o&&u>1?u-1:u,o&&c>1?c-1:c];let x=0;const b=A[0]/y[0],I=A[1]/y[1];for(let S=0;S<h;S++)for(let k=0;k<u;k++){let E;E=i?b*(k+.5)-.5:b*k;const D=Math.max(0,Math.floor(E)),O=E-D,C=Math.min(d-1,Math.ceil(E)),T=S*l[0]+D*l[1],_=S*l[0]+C*l[1];for(let P=0;P<c;P++){let z;z=i?I*(P+.5)-.5:I*P;const V=Math.max(0,Math.floor(z)),H=z-V,K=Math.min(p-1,Math.ceil(z)),Z=T+V*l[2],ee=_+V*l[2],te=T+K*l[2],ae=_+K*l[2];for(let oe=0;oe<f;oe++){const pe=g[Z+oe],ue=g[ee+oe],Re=pe+(g[te+oe]-pe)*H;m[x++]=Re+(ue+(g[ae+oe]-ue)*H-Re)*O}}}return e.makeTensorInfo([h,u,c,f],"float32",m)}},LB={kernelName:rd,backendName:"cpu",kernelFunc:function OB(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:i}=s;Ie([o,r],"resizeBilinearGrad");const a=Ne(r.shape),[l,u,c,h]=r.shape,[,d,p]=o.shape,f=new Float32Array(l*u*c*h),g=[i&&d>1?u-1:u,i&&p>1?c-1:c],m=[i&&d>1?d-1:d,i&&p>1?p-1:p],A=g[0]/m[0],y=g[1]/m[1],x=e.data.get(o.dataId).values;let b=0;for(let I=0;I<l;I++){const S=I*a[0];for(let k=0;k<d;k++){const E=k*A,D=Math.floor(E),O=Math.min(Math.ceil(E),u-1),C=S+D*a[1],T=S+O*a[1],_=E-D,P=1-_;for(let z=0;z<p;z++){const V=z*y,H=Math.floor(V),K=Math.min(Math.ceil(V),c-1),Z=V-H,ee=1-Z,te=C+H*a[2],ae=C+K*a[2],oe=T+H*a[2],pe=T+K*a[2],ue=P*ee,Ae=P*Z,Te=_*ee,Re=_*Z;for(let _e=0;_e<h;_e++){const Ve=x[b++];f[te+_e]+=Ve*ue,f[ae+_e]+=Ve*Ae,f[oe+_e]+=Ve*Te,f[pe+_e]+=Ve*Re}}}}return e.makeTensorInfo([l,c,u,h],"float32",f)}},MB={kernelName:tu,backendName:"cpu",kernelFunc:function PB(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:i,size:a}=s;Ie(r,"resizeNearestNeighbor");const l=Ne(r.shape),[u,c]=a,[h,d,p,f]=r.shape,g=e.data.get(r.dataId).values,m=new Float32Array(h*u*c*f),A=[o&&u>1?d-1:d,o&&c>1?p-1:p],y=[o&&u>1?u-1:u,o&&c>1?c-1:c],x=A[0]/y[0],b=A[1]/y[1];let I=0;for(let S=0;S<h;S++){const k=S*l[0];for(let E=0;E<u;E++){const D=i?x*(E+.5):x*E;let O=Math.min(d-1,o?Math.round(D):Math.floor(D));i&&(O=Math.max(0,O));const C=k+O*l[1];for(let T=0;T<c;T++){const _=i?b*(T+.5):b*T;let P=Math.min(p-1,o?Math.round(_):Math.floor(_));i&&(P=Math.max(0,P));const z=C+P*l[2];for(let V=0;V<f;V++)m[I++]=g[z+V]}}}return e.makeTensorInfo([h,u,c,f],r.dtype,m)}},zB={kernelName:sd,backendName:"cpu",kernelFunc:function BB(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:i}=s;Ie([o,r],"resizeNearestNeighborGrad");const a=Ne(r.shape),l=Ne(o.shape),[u,c,h,d]=r.shape,[,p,f]=o.shape,g=new Float32Array(u*c*h*d),m=e.data.get(o.dataId).values,A=[i&&p>1?c-1:c,i&&f>1?h-1:h],y=[i&&p>1?p-1:p,i&&f>1?f-1:f],x=A[0]/y[0],b=A[1]/y[1],I=1/x,S=1/b,k=2*Math.ceil(I)+2,E=2*Math.ceil(S)+2;for(let D=0;D<u;D++){const O=D*a[0];for(let C=0;C<c;C++){const T=O+C*a[1],_=Math.floor(C*I),P=Math.floor(_-k/2);for(let z=0;z<h;z++){const V=T+z*a[2],H=Math.floor(z*S),K=Math.floor(H-E/2);for(let Z=0;Z<d;Z++){let ee=0;for(let te=0;te<k;te++){const ae=te+P;if(ae<0||ae>=p)continue;const oe=O+ae*l[1],pe=ae*x;if(C===Math.min(c-1,i?Math.round(pe):Math.floor(pe)))for(let Ae=0;Ae<E;Ae++){const Te=Ae+K;if(Te<0||Te>=f)continue;const Re=oe+Te*l[2],_e=Te*b;z===Math.min(h-1,i?Math.round(_e):Math.floor(_e))&&(ee+=m[Re+Z])}}g[V+Z]=ee}}}}return e.makeTensorInfo(r.shape,r.dtype,g)}},UB={kernelName:su,backendName:"cpu",kernelFunc:function VB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dims:o}=s;Ie(r,"reverse");const i=r.shape.length,a=Ge(o,r.shape);if(0===i)return Hs({inputs:{x:r},backend:e});const l=new Gt(r.shape,r.dtype),u=e.bufferSync(r);for(let c=0;c<l.size;c++){const h=l.indexToLoc(c),d=h.slice();a.forEach(p=>d[p]=r.shape[p]-1-d[p]),l.set(u.get(...d),...h)}return e.makeTensorInfo(l.shape,l.dtype,l.values)}},WB={kernelName:Id,backendName:"cpu",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{image:s}=n,{radians:r,fillValue:o,center:i}=t,a=e,l=on(s.dtype,Q(s.shape)),[u,c,h,d]=s.shape,[p,f]=lf(i,c,h),m=Math.sin(r),A=Math.cos(r),y=a.data.get(s.dataId).values;for(let b=0;b<u;b++){const I=b*h*c*d;for(let S=0;S<c;S++){const k=S*(h*d);for(let E=0;E<h;E++){const D=E*d;for(let O=0;O<d;O++){const C=[u,S,E,O],T=C[2],_=C[1];let P=(T-p)*A-(_-f)*m,z=(T-p)*m+(_-f)*A;P=Math.round(P+p),z=Math.round(z+f);let V=o;"number"!=typeof o&&(V=3===O?255:o[O]),P>=0&&P<h&&z>=0&&z<c&&(V=y[I+z*(h*d)+P*d+O]),l[I+k+D+O]=V}}}}return{dataId:a.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},GB=lt(ea,n=>{const t=Math.floor(n);return n-t<.5?Math.floor(n):n-t>.5?Math.ceil(n):t%2==0?t:t+1}),HB={kernelName:ea,backendName:"cpu",kernelFunc:GB},Iw=Gs(n=>1/Math.sqrt(n)),KB=$r(ta,Iw),qB={kernelName:ta,backendName:"cpu",kernelFunc:KB};function Ao(n,t,e,s,r,o,i,a,l,u){const c=[s/r,r],h=n.values,d=t.values;if(0===s)return Be(e,t.dtype);const p=l instanceof Gt?l:Be(c,t.dtype);"string"==typeof l||"number"==typeof l?p.values.fill(l):"boolean"==typeof l&&p.values.fill(+l);for(let f=0;f<o;f++){const g=[];let m=0;for(let A=0;A<i;A++){const y=h[f*i+A];g.push(y),m+=y*a[A]}if(m<0||m>=s/r)throw new Error(`Invalid indices: ${g} does not index into ${e}`);for(let A=0;A<r;A++)u?p.values[m*r+A]+=d[f*r+A]:p.values[m*r+A]=0===t.rank?d[0]:d[f*r+A]}return p}const QB={kernelName:od,backendName:"cpu",kernelFunc:function jB(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r,updates:o}=t,{shape:i}=s,{sliceRank:a,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=ro(0,r,i),g=Ao(e.bufferSync(r),e.bufferSync(o),i,h,u,l,a,c,0,!0);return e.makeTensorInfo(i,g.dtype,g.values)}};function XB(n,t){let e=0,s=n.length,r=0;for(;e<s;)r=Math.floor((e+s)/2),n[r]<t?e=r+1:s=r;return s}function ZB(n,t){let e=0,s=n.length,r=0;for(;e<s;)r=Math.floor((e+s)/2),n[r]<=t?e=r+1:s=r;return s}const ez={kernelName:ad,backendName:"cpu",kernelFunc:function JB(n){const{inputs:t,backend:e,attrs:s}=n,{sortedSequence:r,values:o}=t,{side:i}=s,u=function YB(n,t,e,s,r,o){const i=Ft("int32",e*r);for(let a=0;a<e;++a){const l=n.slice(a*s,(a+1)*s),u=a*r;for(let c=0;c<r;++c)i[u+c]="left"===o?XB(l,t[c+u]):ZB(l,t[c+u])}return i}(e.data.get(r.dataId).values,e.data.get(o.dataId).values,r.shape[0],r.shape[1],o.shape[1],i);return e.makeTensorInfo(o.shape,"int32",u)}},nz={kernelName:ru,backendName:"cpu",kernelFunc:function tz(n){const{inputs:t,backend:e}=n,{condition:s,t:r,e:o}=t;Ie([s,r,o],"select");const i=s.shape.length,a=e.data.get(s.dataId).values,l=e.data.get(r.dataId).values,u=e.data.get(o.dataId).values,c=Fn(r.dtype,o.dtype),h=dn(Q(r.shape),c);let d=0;const p=0===i||i>1||1===r.shape.length?1:Q(r.shape.slice(1));for(let f=0;f<a.length;f++)for(let g=0;g<p;g++)h[d++]=1===a[f]?l[f]:u[f];return e.makeTensorInfo(r.shape,c,h)}},sz=Ju,rz=ec,oz=lt(na,n=>n>=0?rz*n:sz*(Math.exp(n)-1)),iz={kernelName:na,backendName:"cpu",kernelFunc:oz},az=lt(oa,n=>n<0?-1:n>0?1:0),lz={kernelName:oa,backendName:"cpu",kernelFunc:az},uz=lt(sa,n=>Math.sin(n)),cz={kernelName:sa,backendName:"cpu",kernelFunc:uz},hz=lt(ra,n=>Math.sinh(n)),dz={kernelName:ra,backendName:"cpu",kernelFunc:hz},Cw=Math.log(1.1920928955078125e-7)+2,pz=lt(aa,n=>{const t=n>-Cw,e=n<Cw,s=Math.exp(n);let r;return r=e?s:t?n:Math.log(1+s),r}),fz={kernelName:aa,backendName:"cpu",kernelFunc:pz},gz={kernelName:au,backendName:"cpu",kernelFunc:function mz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,paddings:i}=s;Ie([r],"spaceToBatchND");const a=Q(o),l=[[0,0]];l.push(...i);for(let S=1+o.length;S<r.shape.length;++S)l.push([0,0]);const u=dw.kernelFunc({inputs:{x:r},backend:e,attrs:{paddings:l,constantValue:0}}),c=Oa(u.shape,o,a,!1),h=La(c.length,o.length,!1),d=Pa(u.shape,o,a,!1),g=At({inputs:{x:u},backend:e,attrs:{shape:c}}),y=Rn({inputs:{x:g},backend:e,attrs:{perm:h}}),I=At({inputs:{x:y},backend:e,attrs:{shape:d}});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(y),I}};function vw(n,t,e,s,r,o,i){const a=t[0],l=o[0],u=new Array(l),c=new Array(a),h=t[1];if(0===l){if(0!==a)throw new Error(ox(a));return[Ft(e,0),[0,h],Ft(r,0),u,c]}let d=!0,p=0;const f=new Array(l).fill(0);for(let m=0;m<a;++m){const A=n[m*h];if(A<0)throw new Error(ix(m,A));if(A>=l)throw new Error(ax(m,A,l));++f[A],d=d&&A>=p,p=A}let g=!0;for(let m=0;m<l;++m){const A=0===f[m];u[m]=A,g=g&&!A,f[m]=Math.max(f[m],1),m>0&&(f[m]+=f[m-1])}if(g&&d){const m=n,A=s;for(let y=0;y<a;++y)c[y]=y;return[m,[a,h],A,u,c]}{const m=f[l-1],A=Ft(e,m*h),y=Ft(r,m),x=new Array(l).fill(0);for(let b=0;b<a;++b){const I=n[b*h],k=(0===I?0:f[I-1])+x[I];x[I]++;for(let E=0;E<h;++E)A[k*h+E]=n[b*h+E];y[k]=s[b],c[b]=k}for(let b=0;b<l;++b)if(0===x[b]){const S=0===b?0:f[b-1];A[S*h+0]=b;for(let k=1;k<h;++k)A[S*h+k]=0;y[S]=i}return[A,[m,h],y,u,c]}}const yz={kernelName:ld,backendName:"cpu",kernelFunc:function Az(n){const{inputs:t,backend:e}=n,{indices:s,values:r,denseShape:o,defaultValue:i}=t;if(1!==o.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${o.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const a=e.data.get(s.dataId).values,l=e.data.get(r.dataId).values,u=e.data.get(o.dataId).values,c=e.data.get(i.dataId).values[0],[h,d,p,f,g]=vw(a,s.shape,s.dtype,l,r.dtype,u,c);return[e.makeTensorInfo(d,s.dtype,h),e.makeTensorInfo([d[0]],r.dtype,p),e.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(m=>Number(m)))),e.makeTensorInfo([g.length],s.dtype,new Int32Array(g))]}};function Sw(n,t,e,s,r){const o=Q(s),i=t[0],a=r.length,l=[];let u=1,c=-1;for(let m=0;m<a;++m){const A=r[m];if(-1===A){if(-1!==c)throw new Error(lx(c,m));c=m,l.push(1)}else{if(A<0)throw new Error(ux(m,A));u*=A,l.push(A)}}if(-1!==c){if(u<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const m=Math.trunc(o/u);if(u*m!==o)throw new Error(hx(s,l));l[c]=m}if(Q(l)!==o)throw new Error(dx(s,l));const d=s.length,p=[];if(d>0){p[d-1]=1;for(let m=d-2;m>=0;--m)p[m]=p[m+1]*s[m+1]}const f=[];if(a>0){f[a-1]=1;for(let m=a-2;m>=0;--m)f[m]=f[m+1]*l[m+1]}const g=Ft(e,i*a);for(let m=0;m<i;++m){let A=0;for(let y=0;y<d;++y)A+=n[m*d+y]*p[y];for(let y=0;y<a;++y)g[m*a+y]=Math.trunc(A/f[y]),A%=f[y]}return[g,[i,a],l]}const bz={kernelName:ud,backendName:"cpu",kernelFunc:function xz(n){const{inputs:t,backend:e}=n,{inputIndices:s,inputShape:r,newShape:o}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==o.shape.length)throw new Error(`Target shape should be a vector but received shape ${o.shape}`);const i=Array.from(e.data.get(r.dataId).values),a=e.data.get(s.dataId).values,l=Array.from(e.data.get(o.dataId).values),[u,c,h]=Sw(a,s.shape,s.dtype,i,l);return[e.makeTensorInfo(c,s.dtype,u),e.makeTensorInfo([h.length],o.dtype,new Int32Array(h))]}};function qm(n,t,e,s,r,o=!1,i=0){const a=s.length,l=[t[0],n.length/t[0]],u=l[1],h=a>0?r[a-1]+1:0;if(h<0)throw new Error("segment ids must be >= 0");const d=t.slice();d[0]=h;const f=Ft(e,d.reduce((x,b)=>x*b,1));if(0===a)return h>0&&f.fill(i),[f,d];if(h<=0)throw new Error("segment ids must be >= 0");let g=0,m=1,A=0,y=r[g];for(;;){let x=0;if(m<a){if(x=r[m],y===x){++m;continue}if(y>=x)throw new Error("segment ids are not increasing")}if(y<0||y>=h)throw new Error(fx(y,h));y>A&&f.fill(i,A*u,y*u);for(let b=g;b<m;++b){const I=s[b];if(I<0||I>=l[0])throw new Error(mx(b,s[b],l[0]));for(let S=0;S<u;S++)f[y*u+S]+=n[I*u+S]}if(o)for(let b=0;b<u;b++)f[y*u+b]/=m-g;if(g=m,++m,A=y+1,y=x,m>a)break}return A<h&&f.fill(i,A*u,h*u),[f,d]}const Iz={kernelName:cd,backendName:"cpu",kernelFunc:function wz(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${o.shape}`);if(r.shape[0]!==o.shape[0])throw new Error("segmentIds and indices should have same size.");const i=e.data.get(s.dataId).values,a=e.data.get(r.dataId).values,l=e.data.get(o.dataId).values,[u,c]=qm(i,s.shape,s.dtype,a,l,!0);return e.makeTensorInfo(c,s.dtype,u)}},vz={kernelName:hd,backendName:"cpu",kernelFunc:function Cz(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${o.shape}`);if(r.shape[0]!==o.shape[0])throw new Error("segmentIds and indices should have same size.");const i=e.data.get(s.dataId).values,a=e.data.get(r.dataId).values,l=e.data.get(o.dataId).values,[u,c]=qm(i,s.shape,s.dtype,a,l);return e.makeTensorInfo(c,s.dtype,u)}},Nz={kernelName:dd,backendName:"cpu",kernelFunc:function Sz(n){const{inputs:t,backend:e,attrs:s}=n,{sparseIndices:r,sparseValues:o,defaultValue:i}=t,{outputShape:a}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=ro(0,r,a),p=!1,f=e.bufferSync(r);let g;switch(o.dtype){case"bool":g=Ao(f,e.bufferSync(o),a,d,c,u,l,h,!!e.data.get(i.dataId).values[0],p);break;case"float32":case"int32":g=Ao(f,e.bufferSync(o),a,d,c,u,l,h,e.data.get(i.dataId).values[0],p);break;case"string":g=Ao(f,e.bufferSync(o),a,d,c,u,l,h,dr(e.data.get(i.dataId).values[0]),p);break;default:throw new Error(`Unsupported type ${o.dtype}`)}return e.makeTensorInfo(a,g.dtype,g.values)}},kz={kernelName:lu,backendName:"cpu",kernelFunc:function Tz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{numOrSizeSplits:o,axis:i}=s,a=Ge(i,r.shape)[0],l=Sf(r,o,a),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map(h=>{const d=[...c];d[a]=h;const p=go({inputs:{x:r},backend:e,attrs:{begin:u,size:d}});return u[a]+=h,p})}},Ez=Gs(n=>Math.sqrt(n)),_z=lt(la,n=>Math.sqrt(n)),Dz={kernelName:la,backendName:"cpu",kernelFunc:_z},Rz={kernelName:pd,backendName:"cpu",kernelFunc:({inputs:n,backend:t})=>{const{x:e}=n,s=t;Ie(e,"square");const r=s.data.get(e.dataId).values,o=new Float32Array(r.length);for(let a=0;a<r.length;++a){const l=r[a];o[a]=l*l}return{dataId:s.write(o,e.shape,e.dtype),shape:e.shape,dtype:e.dtype}}},$z=Mt((n,t)=>{const e=n-t;return e*e}),Fz=Yt(ua,$z),Oz={kernelName:ua,backendName:"cpu",kernelFunc:Fz},Nw=Gs((n,t)=>{const{pattern:e,replaceGlobal:s,rewrite:r}=t;return n.replace(new RegExp(e,s?"g":""),r)}),Lz=$r(cu,Nw),Pz={kernelName:cu,backendName:"cpu",kernelFunc:Lz},Mz=lt(fa,(n,t)=>{const e=t;return isNaN(n)?NaN:n>0?1:e.alpha}),Bz={kernelName:fa,backendName:"cpu",kernelFunc:Mz};function Tw(n,t,e,s){const r=Be(n,t.dtype);for(let o=0;o<r.size;o++){const i=r.indexToLoc(o),a=new Array(i.length);for(let l=0;l<a.length;l++)a[l]=i[l]*e[l]+s[l];r.set(t.get(...a),...i)}return r}const Vz={kernelName:fd,backendName:"cpu",kernelFunc:function zz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,end:i,strides:a,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s;Ie(r,"stridedSlice");const{finalShapeSparse:p,finalShape:f,isIdentity:g,sliceDim0:m,isSimpleSlice:A,begin:y,end:x,strides:b}=up(r.shape,o,i,a,l,u,c,h,d);let I;if(g)I=At({inputs:{x:r},backend:e,attrs:{shape:f}});else if(m||A){v(r.shape.length>=1,()=>`Input must have rank at least 1, got: ${r.shape.length}`);const S=ip(y,x,b),k=go({inputs:{x:r},backend:e,attrs:{begin:y,size:S}});I=At({inputs:{x:k},backend:e,attrs:{shape:f}}),e.disposeIntermediateTensorInfo(k)}else{const k=Tw(p,e.bufferSync(r),b,y);I=e.makeTensorInfo(f,k.dtype,k.values)}return I}};class Uz{constructor(t,e,s,r,o,i){this.separator=hr(t),this.nGramWidths=e,this.leftPad=hr(s),this.rightPad=hr(r),this.padWidth=o,this.preserveShort=i}getPadWidth(t){return Math.min(this.padWidth<0?t-1:this.padWidth,t-1)}getNumNGrams(t,e){const s=this.getPadWidth(e);return Math.max(0,t+2*s-e+1)}createNGrams(t,e,s,r,o,i){for(let a=0;a<o;++a){const l=this.getPadWidth(i),u=Math.max(0,l-a),c=Math.max(0,l-(o-(a+1))),h=i-(u+c),d=e+(u>0?0:a-l);let p=0;p+=u*this.leftPad.length;for(let y=0;y<h;++y)p+=t[d+y].length;p+=c*this.rightPad.length,p+=(u+c+h-1)*this.separator.length,s[r+a]=new Uint8Array(p);const g=s[r+a];let m=0;const A=y=>y.forEach(x=>g[m++]=x);for(let y=0;y<u;++y)A(this.leftPad),A(this.separator);for(let y=0;y<h-1;++y)A(t[d+y]),A(this.separator);if(h>0){A(t[d+h-1]);for(let y=0;y<c;++y)A(this.separator),A(this.rightPad)}else{for(let y=0;y<c-1;++y)A(this.rightPad),A(this.separator);A(this.rightPad)}}}compute(t,e){const s=t.length,r=e.length;if(r>0){let l=e[0];if(0!==l)throw new Error(`First split value must be 0, got ${l}`);for(let u=1;u<r;++u){let c=e[u]>=l;if(c=c&&e[u]<=s,!c)throw new Error(`Invalid split value ${e[u]}, must be in [${l}, ${s}]`);l=e[u]}if(l!==s)throw new Error(`Last split value must be data size. Expected ${s}, got ${l}`)}const o=r-1,i=Ft("int32",r);if(0===s||0===r){const l=new Array(s);for(let u=0;u<=o;++u)i[u]=0;return[l,i]}i[0]=0;for(let l=1;l<=o;++l){const u=e[l]-e[l-1];let c=0;this.nGramWidths.forEach(h=>{c+=this.getNumNGrams(u,h)}),this.preserveShort&&u>0&&0===c&&(c=1),i[l]=i[l-1]+c}const a=new Array(i[o]);for(let l=0;l<o;++l){const u=e[l];let c=i[l];if(this.nGramWidths.forEach(h=>{const p=this.getNumNGrams(e[l+1]-e[l],h);this.createNGrams(t,u,a,c,p,h),c+=p}),this.preserveShort&&c===i[l]){const h=e[l+1]-e[l];if(0===h)continue;this.createNGrams(t,u,a,c,1,h+2*this.padWidth)}}return[a,i]}}function kw(n,t,e,s,r,o,i,a){return new Uz(e,s,r,o,i,a).compute(n,t)}const Gz={kernelName:md,backendName:"cpu",kernelFunc:function Wz(n){const{inputs:t,backend:e,attrs:s}=n,{separator:r,nGramWidths:o,leftPad:i,rightPad:a,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=e.data.get(c.dataId).values,p=e.data.get(h.dataId).values,[f,g]=kw(d,p,r,o,i,a,l,u);return[e.makeTensorInfo([f.length],"string",f),e.makeTensorInfo(h.shape,"int32",g)]}};function Hz(n,t,e,s){if(!n.length)return;if(0===t.length){for(let o=0;o<n.length;++o)s.push(n.subarray(o,o+1));return}if(1===t.length){const o=t[0];let i=n.indexOf(o);for(;-1!==i;){const a=n.subarray(0,i);(!e||0!==a.length)&&s.push(a),i=(n=n.subarray(i+1)).indexOf(o)}return void((!e||0!==n.length)&&s.push(n))}let r=0;for(let o=0;o<n.length+1;o++)if(o===n.length||-1!==t.indexOf(n[o])){const i=n.subarray(r,o);(!e||0!==i.length)&&s.push(i),r=o+1}}function Ew(n,t,e){const s=n.length,r=[];let o=0,i=0;const a=new Array(s);for(let d=0;d<s;++d){const p=r.length;Hz(n[d],t,e,r);const f=r.length-p;a[d]=f,o+=f,i=Math.max(i,f)}const l=Ft("int32",2*o),u=new Array(o),c=[s,i];let h=0;for(let d=0;d<s;++d)for(let p=0;p<a[d];++p)l[2*h]=d,l[2*h+1]=p,u[h]=r[h],++h;return[l,u,c]}const qz={kernelName:gd,backendName:"cpu",kernelFunc:function Kz(n){const{inputs:t,backend:e,attrs:s}=n,{skipEmpty:r}=s,{input:o,delimiter:i}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(1!==o.shape.length)throw new Error(`Input must be a vector, got shape: ${o.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const a=e.data.get(o.dataId).values,l=e.data.get(i.dataId).values[0],[u,c,h]=Ew(a,l,r),d=c.length;return[e.makeTensorInfo([d,2],"int32",u),e.makeTensorInfo([d],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(h))]}};function _w(n,t){const e=Ft("int32",n.length);for(let s=0;s<n.length;++s)e[s]=CC(n[s]).modulo(t).getLowBitsUnsigned();return e}const Qz={kernelName:Ad,backendName:"cpu",kernelFunc:function jz(n){const{inputs:t,backend:e,attrs:s}=n,{numBuckets:r}=s,{input:o}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const a=_w(e.data.get(o.dataId).values,r);return e.makeTensorInfo(o.shape,"int32",a)}},Xz=lt(ha,n=>Math.tan(n)),Zz={kernelName:ha,backendName:"cpu",kernelFunc:Xz},Yz=lt(da,n=>Math.tanh(n));function Dw(n,t){const e=new Array(n.rank);for(let r=0;r<e.length;r++)e[r]=n.shape[r]*t[r];const s=Be(e,n.dtype);for(let r=0;r<s.values.length;++r){const o=s.indexToLoc(r),i=new Array(n.rank);for(let l=0;l<i.length;l++)i[l]=o[l]%n.shape[l];const a=n.locToIndex(i);s.values[r]=n.values[a]}return s}const Ja=(n,t)=>{const e=t.value-n.value;return 0===e?n.index-t.index:e};function Rw(n,t,e=0,s=n.length-1){for(;s>e;){if(s-e>600){const a=s-e+1,l=t-e+1,u=Math.log(a),c=.5*Math.exp(2*u/3),h=.5*Math.sqrt(u*c*(a-c)/a)*Math.sign(l-a/2);Rw(n,t,Math.max(e,Math.floor(t-l*c/a+h)),Math.min(s,Math.floor(t+(a-l)*c/a+h)))}const r=n[t];let o=e,i=s;for(ar(n,e,t),Ja(n[s],r)>0&&ar(n,e,s);o<i;){for(ar(n,o,i),o++,i--;Ja(n[o],r)<0;)o+=1;for(;Ja(n[i],r)>0;)i-=1}0===Ja(n[e],r)?ar(n,e,i):(i+=1,ar(n,i,s)),i<=t&&(e=i+1),t<=i&&(s=i-1)}}function $w(n,t,e,s,r){const o=t[t.length-1],[i,a]=[n.length/o,o],l=on(e,i*s),u=on("int32",i*s);for(let h=0;h<i;h++){const d=h*a,p=n.subarray(d,d+a);let f=new Array(p.length);p.forEach((y,x)=>f[x]={value:y,index:x}),s<f.length&&(Rw(f,s),f=f.slice(0,s)),r&&f.sort(Ja);const g=h*s,m=l.subarray(g,g+s),A=u.subarray(g,g+s);for(let y=0;y<s;y++)m[y]=f[y].value,A[y]=f[y].index}const c=t.slice();return c[c.length-1]=s,[Be(c,e,l),Be(c,"int32",u)]}function Fw(n,t,e){switch(e){case"reflect":return function lV(n,t){let e=n;if(e<0)if(t<=1)e=0;else{const s=2*t;e<s&&(e=s*Math.trunc(-e/s)+e),e=e<-t?e+s:-e-1}else if(e>t-1)if(t<=1)e=0;else{const s=2*t;e-=s*Math.trunc(e/s),e>=t&&(e=s-e-1)}return Wr(0,e,t-1)}(n,t);case"wrap":return function uV(n,t){let e=n;return e<0?t<=1?e=0:e+=t*(Math.trunc(-e/(t-1))+1):e>t-1&&(t<=1?e=0:e-=t*Math.trunc(e/(t-1))),Wr(0,e,t-1)}(n,t);case"nearest":return function hV(n,t){return Wr(0,n,t-1)}(n,t);default:return function cV(n,t){return n}(n)}}function el(n,t,e,s,r,o,i,a,l,u,c){return 0<=a&&a<t&&0<=l&&l<e?n[i*s+a*r+l*o+u]:c}function dV(n,t,e,s,r,o,i,a,l,u,c){return el(n,t,e,s,r,o,i,Math.round(a),Math.round(l),u,c)}function pV(n,t,e,s,r,o,i,a,l,u,c){const h=Math.floor(a),d=Math.floor(l),p=h+1,f=d+1;return(p-a)*((f-l)*el(n,t,e,s,r,o,i,h,d,u,c)+(l-d)*el(n,t,e,s,r,o,i,h,f,u,c))+(a-h)*((f-l)*el(n,t,e,s,r,o,i,p,d,u,c)+(l-d)*el(n,t,e,s,r,o,i,p,f,u,c))}function Ow(n,t,e,s){const r=Ge(t,e)[0],o=[1,e[0],1];for(let f=0;f<r;f++)o[0]*=e[f];o[1]=e[r];for(let f=r+1;f<e.length;f++)o[2]*=e[f];const i=new Map,a=new Int32Array(e[r]),l=new Gt(o,s,n),u=[],c=1===o[0]&&1===o[2];for(let f=0;f<e[r];f++){let g;if(c)g=n[f].toString();else{const A=[];for(let y=0;y<o[0];y++)for(let x=0;x<o[2];x++)A.push(l.get(y,f,x));g=A.join(",")}const m=i.get(g);if(null!=m)a[f]=m;else{const A=i.size;i.set(g,A),a[f]=A,u.push(f)}}const h=o.slice();h[1]=i.size;const d=new Gt(h,s);u.forEach((f,g)=>{for(let m=0;m<o[0];m++)for(let A=0;A<o[2];A++)d.set(l.get(m,f,A),m,g,A)});const p=e.slice();return p[r]=h[1],{outputValues:d.values,outputShape:p,indices:a}}const bV=[dO,pO,mO,AO,lO,xO,IO,vO,NO,kO,_O,RO,FO,PO,BO,UO,GO,KO,jO,cO,XO,JO,tL,sL,oL,iO,aL,uL,rO,cL,dL,pL,mL,AL,xL,wL,CL,SL,TL,EL,DL,$L,OL,PL,ML,zL,UL,GL,HL,KL,qL,QL,eP,QF,nP,sP,hP,dP,pP,mP,CP,vP,NP,kP,DP,$P,OP,PP,BP,VP,WP,XF,HP,hL,qP,QP,ZP,ZF,JP,tM,sM,oM,aM,cM,dM,mM,AM,xM,bM,IM,vM,NM,kM,_M,RM,FM,LM,MM,zM,WM,KM,ZL,jM,ZM,eB,sB,oB,aB,uB,cB,dw,fB,JF,gB,vB,NB,kB,_B,oO,Wm,RB,eO,tO,uO,FB,LB,MB,zB,UB,WB,HB,qB,QB,ez,nz,iz,sO,lz,cz,dz,ZO,GM,fz,gz,yz,bz,Iz,vz,Nz,kz,Dz,Rz,Oz,Pz,Bz,Vz,Gz,qz,Qz,yP,YL,Zz,{kernelName:da,backendName:"cpu",kernelFunc:Yz},{kernelName:id,backendName:"cpu",kernelFunc:function eV(n){const{inputs:t,backend:e}=n,{tensor:s,indices:r,updates:o}=t,{sliceRank:i,numUpdates:a,sliceSize:l,strides:u,outputSize:c}=ro(0,r,s.shape),d=e.bufferSync(r),p=e.bufferSync(o),f=e.bufferSync(s),g=Ao(d,p,s.shape,c,l,a,i,u,f,!1);return e.makeTensorInfo(s.shape,g.dtype,g.values)}},{kernelName:pa,backendName:"cpu",kernelFunc:function nV(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reps:o}=s;Ie(r,"tile");const i=Dw(e.bufferSync(r),o);return e.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:yd,backendName:"cpu",kernelFunc:function rV(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{k:o,sorted:i}=s;Ie(r,"topk");const a=e.data.get(r.dataId).values,[l,u]=$w(a,r.shape,r.dtype,o,i);return[e.makeTensorInfo(l.shape,l.dtype,l.values),e.makeTensorInfo(u.shape,u.dtype,u.values)]}},{kernelName:xd,backendName:"cpu",kernelFunc:function iV(n){const{inputs:t,attrs:e,backend:s}=n,{image:r,transforms:o}=t,{interpolation:i,fillMode:a,fillValue:l,outputShape:u}=e,[c,h,d,p]=r.shape,[f,g]=null!=u?u:[h,d],m=[c,f,g,p],A=Ne(r.shape),y=A[0],x=A[1],b=A[2],I=Ne(m),S=I[0],k=I[1],E=I[2],D=on(r.dtype,Q(m));D.fill(l);const O=s.data.get(r.dataId).values,C=s.data.get(o.dataId).values;for(let _=0;_<c;++_){const P=1===o.shape[0]?C:C.subarray(8*_,8*_+8);for(let z=0;z<f;++z)for(let V=0;V<g;++V)for(let H=0;H<p;++H){let K;const Z=P[6]*V+P[7]*z+1;if(0===Z)continue;const te=(P[3]*V+P[4]*z+P[5])/Z,ae=Fw((P[0]*V+P[1]*z+P[2])/Z,d,a),oe=Fw(te,h,a);switch(i){case"nearest":K=dV(O,h,d,y,x,b,_,oe,ae,H,l);break;case"bilinear":K=pV(O,h,d,y,x,b,_,oe,ae,H,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}D[_*S+z*k+V*E+H]=K}return s.makeTensorInfo(m,r.dtype,D)}return{dataId:s.write(D,m,r.dtype),shape:r.shape,dtype:r.dtype}}},bO,{kernelName:bd,backendName:"cpu",kernelFunc:function fV(n){const{inputs:t,attrs:e,backend:s}=n,{axis:r}=e,{x:o}=t;Ie(o,"unique");const i=s.data.get(o.dataId).values,{outputValues:a,outputShape:l,indices:u}=Ow(i,r,o.shape,o.dtype);return[s.makeTensorInfo(l,o.dtype,a),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:hu,backendName:"cpu",kernelFunc:function gV(n){const{inputs:t,backend:e,attrs:s}=n,{value:r}=t;let{axis:o}=s;o<0&&(o+=r.shape.length);const i=r.shape.length,a=r.shape[o],l=new Array(i-1);let u=0;for(let p=0;p<i;p++)p!==o&&(l[u++]=r.shape[p]);const c=new Array(i).fill(0),h=r.shape.slice();h[o]=1;const d=new Array(a);for(let p=0;p<d.length;p++){c[o]=p;const f=go({inputs:{x:r},backend:e,attrs:{begin:c,size:h}});d[p]=At({inputs:{x:f},backend:e,attrs:{shape:l}}),e.disposeIntermediateTensorInfo(f)}return d}},{kernelName:du,backendName:"cpu",kernelFunc:function yV(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,segmentIds:o}=t,{numSegments:i}=s;Ie(r,"unsortedSegmentSum");const u=[],c=[],h=r.shape.length-o.shape.length;let d=o;for(let f=0;f<h;++f){const g=Oc({inputs:{input:d},backend:e,attrs:{dim:f+1}});d=g,c.push(g)}for(let f=0;f<i;++f){const g=cr(f,"int32"),m=e.makeTensorInfo([],"int32",g),A=U0({inputs:{a:m,b:d},backend:e}),y=Fr({inputs:{x:A},backend:e,attrs:{dtype:"float32"}}),x=Fc({inputs:{a:y,b:r},backend:e}),b=Ya({inputs:{x},backend:e,attrs:{axis:0,keepDims:!1}});u.push(b),c.push(m),c.push(A),c.push(y),c.push(x),c.push(b)}const p=hw({inputs:u,backend:e,attrs:{axis:0}});return c.forEach(f=>e.disposeIntermediateTensorInfo(f)),p}},lB];for(const n of bV)vd(n);const Or={},Mc={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Ts(n,t){if(!(n in Or)||null!=t){const s=function CV(n,t){if(1!==n&&2!==n)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=null==t?function IV(n){if(!W().getBool("IS_SAFARI")&&typeof OffscreenCanvas<"u"&&2===n)return new OffscreenCanvas(300,150);if(typeof document<"u")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(n):t;return e.addEventListener("webglcontextlost",s=>{s.preventDefault(),delete Or[n]},!1),W().getBool("SOFTWARE_WEBGL_ENABLED")&&(Mc.failIfMajorPerformanceCaveat=!1),1===n?e.getContext("webgl",Mc)||e.getContext("experimental-webgl",Mc):e.getContext("webgl2",Mc)}(n,t);if(null===s)return console.log("Could not get context for WebGL version",n),null;Or[n]=s}const e=Or[n];return null==e||e.isContextLost()?(delete Or[n],Ts(n)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Or[n])}var Bc=function(n){return n[n.DENSE=0]="DENSE",n[n.SHARED_BATCH=1]="SHARED_BATCH",n}(Bc||{}),fs=function(n){return n[n.RENDER=0]="RENDER",n[n.UPLOAD=1]="UPLOAD",n[n.PIXELS=2]="PIXELS",n[n.DOWNLOAD=3]="DOWNLOAD",n}(fs||{}),gn=function(n){return n[n.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",n[n.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",n[n.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",n[n.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",n[n.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16",n}(gn||{});function tl(n,t){return[t,n]}function zc(n){const t=Q(n);return lh(Math.ceil(t/4))}function ai(n,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(n/2))]}function jm(n,t){const e=n;let s,r,o,i,a,l,u,c,h,d;return 2===W().getNumber("WEBGL_VERSION")?(s=e.R32F,r=e.R16F,o=e.RGBA16F,i=e.RGBA32F,a=e.RED,u=4,c=1,h=e.HALF_FLOAT,d=e.FLOAT,l=e.RGBA8):(s=n.RGBA,r=n.RGBA,o=n.RGBA,i=e.RGBA,a=n.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,d=n.FLOAT,l=n.RGBA),{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:i,textureFormatFloat:a,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:d}}function de(n,t){const e=t();return W().getBool("DEBUG")&&function NV(n){const t=n.getError();if(t!==n.NO_ERROR)throw new Error("WebGL Error: "+function _V(n,t){switch(t){case n.NO_ERROR:return"NO_ERROR";case n.INVALID_ENUM:return"INVALID_ENUM";case n.INVALID_VALUE:return"INVALID_VALUE";case n.INVALID_OPERATION:return"INVALID_OPERATION";case n.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case n.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case n.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(n,t))}(n),e}function EV(n){return!!(W().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===n||5.96e-8<Math.abs(n)&&Math.abs(n)<65504)}function Vc(n,t){return rr(n,()=>n.getExtension(t),'Extension "'+t+'" not supported on this browser.')}const $V=/ERROR: [0-9]+:([0-9]+):/g;function Lw(n,t){const e=$V.exec(t);if(null==e)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(n);const s=+e[1],r=n.split("\n"),o=r.length.toString().length+2,i=r.map((h,d)=>To((d+1).toString(),o)+h);let a=0;for(let h=0;h<i.length;h++)a=Math.max(i[h].length,a);const l=i.slice(0,s-1),u=i.slice(s-1,s),c=i.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${To(u[0],a)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function Qm(n,t){if(de(n,()=>n.validateProgram(t)),!1===n.getProgramParameter(t,n.VALIDATE_STATUS))throw console.log(n.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function Pw(n,t,e,s,r,o,i){const a=n.getAttribLocation(t,e);return-1!==a&&(de(n,()=>n.bindBuffer(n.ARRAY_BUFFER,s)),de(n,()=>n.vertexAttribPointer(a,r,n.FLOAT,!1,o,i)),de(n,()=>n.enableVertexAttribArray(a)),!0)}function GV(n,t,e,s){de(n,()=>function VV(n,t,e){(function Bw(n,t){const e=n.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+n.TEXTURE0;if(s<n.TEXTURE0||s>e)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${e}].`)})(n,e),de(n,()=>n.activeTexture(n.TEXTURE0+e)),de(n,()=>n.bindTexture(n.TEXTURE_2D,t))}(n,t,s)),de(n,()=>n.uniform1i(e,s))}function Xm(n,t,e){de(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,e)),de(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,t,0))}function Mw(n,t){de(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,t)),de(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,null,0))}function Uc(n){const t=n.checkFramebufferStatus(n.FRAMEBUFFER);if(t!==n.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function HV(n,t){switch(t){case n.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case n.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(n,t))}function rr(n,t,e){const s=de(n,()=>t());if(null==s)throw new Error(e);return s}function li(n,t=2){return Q(n.slice(0,n.length-t))}function ui(n){if(0===n.length)throw Error("Cannot get rows and columns of an empty shape array.");return[n.length>1?n[n.length-2]:1,n[n.length-1]]}function Wc(n){let t=[1,1,1];return 0===n.length||1===n.length&&1===n[0]||(t=[li(n),...ui(n)]),t}function Gc(n){return n%2==0}function Hc(n,t){if(Qe(n=n.slice(-2),t=t.slice(-2))||!n.length||!t.length||0===n[0]||0===n[1]||0===t[0]||0===t[1])return!0;if(n.length!==t.length){const e=n[n.length-1],s=t[t.length-1];if(e===s||Gc(e)&&Gc(s)&&(1===n[0]||1===t[0]))return!0}return n[1]===t[1]&&Gc(n[0])&&Gc(t[0])}let Kc,qc;function ms(n,t){return null!=n.getExtension(t)}function zw(n){try{if(null!=Ts(n))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function Zm(n){const t=jm(n),e=n.createTexture();n.bindTexture(n.TEXTURE_2D,e),n.texImage2D(n.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const o=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,o),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,e,0);const i=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(e),n.deleteFramebuffer(o),i}function nl(n,t){Array.isArray(n)||(n=[n]),n.forEach(e=>{null!=e&&v("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}const Ce=W();function vn(){let n,t,e,s,r,o,i,a,l,u;return 2===W().getNumber("WEBGL_VERSION")?(n="#version 300 es",t="in",e="out",s="in",r="texture",o="outputColor",i="out vec4 outputColor;",a=W().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(n="",t="attribute",e="varying",s="varying",r="texture2D",o="gl_FragColor",i="",a="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:n,attribute:t,varyingVs:e,varyingFs:s,texture2D:r,output:o,defineOutput:i,defineSpecialNaN:a,defineSpecialInf:l,defineRound:u}}function yo(n,t,e="index"){const s=Ne(t);return s.map((r,o)=>`int ${n[o]} = ${e} / ${r}; ${o===s.length-1?`int ${n[o+1]} = ${e} - ${n[o]} * ${r}`:`index -= ${n[o]} * ${r}`};`).join("")}function jc(n,t,e="index"){const s=Ne(t);return s.map((r,o)=>`int ${n[o]} = ${e} / outShapeStrides[${o}]; ${o===s.length-1?`int ${n[o+1]} = ${e} - ${n[o]} * outShapeStrides[${o}]`:`index -= ${n[o]} * outShapeStrides[${o}]`};`).join("")}function Ym(n){const t=Ne(n).map(e=>e.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}Ce.registerFlag("HAS_WEBGL",()=>Ce.getNumber("WEBGL_VERSION")>0),Ce.registerFlag("WEBGL_VERSION",()=>zw(2)?2:zw(1)?1:0),Ce.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),Ce.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===Ce.get("WEBGL_VERSION")),Ce.registerFlag("WEBGL_CPU_FORWARD",()=>!0),Ce.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),Ce.registerFlag("WEBGL_PACK",()=>Ce.getBool("HAS_WEBGL")),Ce.registerFlag("WEBGL_PACK_NORMALIZATION",()=>Ce.getBool("WEBGL_PACK")),Ce.registerFlag("WEBGL_PACK_CLIP",()=>Ce.getBool("WEBGL_PACK")),Ce.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>Ce.getBool("WEBGL_PACK")),Ce.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>Ce.getBool("WEBGL_PACK")),Ce.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>Ce.getBool("WEBGL_PACK")),Ce.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>Ce.getBool("WEBGL_PACK")),Ce.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>Ce.getBool("WEBGL_PACK")),Ce.registerFlag("WEBGL_PACK_REDUCE",()=>Ce.getBool("WEBGL_PACK")),Ce.registerFlag("WEBGL_LAZILY_UNPACK",()=>Ce.getBool("WEBGL_PACK")),Ce.registerFlag("WEBGL_CONV_IM2COL",()=>Ce.getBool("WEBGL_PACK")),Ce.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function qV(n){if(null==Kc){const t=Ts(n);Kc=t.getParameter(t.MAX_TEXTURE_SIZE)}return Kc}(Ce.getNumber("WEBGL_VERSION"))),Ce.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function jV(n){if(null==qc){const t=Ts(n);qc=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,qc)}(Ce.getNumber("WEBGL_VERSION"))),Ce.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const n=Ce.getNumber("WEBGL_VERSION");return 0===n?0:function QV(n){if(0===n)return 0;let t;const e=Ts(n);return t=ms(e,"EXT_disjoint_timer_query_webgl2")&&2===n?2:ms(e,"EXT_disjoint_timer_query")?1:0,t}(n)}),Ce.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>Ce.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Vg()),Ce.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function XV(n){if(0===n)return!1;const t=Ts(n);if(1===n){if(!ms(t,"OES_texture_float"))return!1}else if(!ms(t,"EXT_color_buffer_float"))return!1;return Zm(t)}(Ce.getNumber("WEBGL_VERSION"))),Ce.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!Ce.getBool("WEBGL_FORCE_F16_TEXTURES")&&Ce.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),Ce.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>function ZV(n){if(0===n)return!1;const t=Ts(n);if(1!==n){if(ms(t,"EXT_color_buffer_float"))return Zm(t);const s="EXT_color_buffer_half_float";if(ms(t,s)){const r=t.getExtension(s);return function YV(n,t){const e=jm(n,t),s=n.createTexture();n.bindTexture(n.TEXTURE_2D,s),n.texImage2D(n.TEXTURE_2D,0,e.internalFormatHalfFloat,1,1,0,e.textureFormatFloat,e.textureTypeHalfFloat,null);const i=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,i),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,s,0);const a=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(s),n.deleteFramebuffer(i),a}(t,r)}return!1}return!(!ms(t,"OES_texture_float")||!ms(t,"WEBGL_color_buffer_float"))&&Zm(t)}(Ce.getNumber("WEBGL_VERSION"))),Ce.registerFlag("WEBGL_FENCE_API_ENABLED",()=>function JV(n){return 2===n&&null!=Ts(n).fenceSync}(Ce.getNumber("WEBGL_VERSION"))),Ce.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>Ce.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),Ce.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,n=>{if("number"!=typeof n)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${n}.`);if(n<0&&-1!==n)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${n}.`)}),Ce.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>Vg()?1:-1,n=>{if("number"!=typeof n)throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${n}.`);if(n<0&&-1!==n)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${n}.`)}),Ce.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),Ce.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),Ce.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),Ce.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128),Ce.registerFlag("WEBGL_EXP_CONV",()=>!1),Ce.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>Ce.getBool("IS_TEST")),Ce.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0),Ce.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1),Ce.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1),Ce.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);const Vw="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:Uw}=Ue;function n3(n,t,e){const s=[];if(n.forEach(p=>{const f=Q(p.shapeInfo.logicalShape);if(p.shapeInfo.isUniform?s.push(`uniform float ${p.name}${f>1?`[${f}]`:""};`):(s.push(`uniform sampler2D ${p.name};`),s.push(`uniform int offset${p.name};`)),e.enableShapeUniforms){const{uniformShape:g}=eg(e.packedInputs,p.shapeInfo.logicalShape,p.shapeInfo.texShape);switch(g.length){case 1:s.push(`uniform int ${p.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${p.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${p.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${p.name}Shape;`)}s.push(`uniform ivec2 ${p.name}TexShape;`)}}),e.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}e.customUniforms&&e.customUniforms.forEach(p=>{s.push(`uniform ${p.type} ${p.name}${p.arrayIndex?`[${p.arrayIndex}]`:""};`)});const r=s.join("\n"),o=n.map(p=>function s3(n,t,e=!1,s){let r="";r+=e?Ww(n,s):ci(n,s);return n.shapeInfo.logicalShape.length<=t.logicalShape.length&&(r+=e?function L3(n,t){const e=n.name,s=e.charAt(0).toUpperCase()+e.slice(1),r="get"+s+"AtOutCoords",o=n.shapeInfo.logicalShape.length,i=t.logicalShape.length,a=Uw(n.shapeInfo.logicalShape,t.logicalShape),l=ct(i),u=i-o;let c;const h=["x","y","z","w","u","v"];c=0===o?"":i<2&&a.length>=1?"coords = 0;":a.map(y=>`coords.${h[y+u]} = 0;`).join("\n");let d="";d=i<2&&o>0?"coords":n.shapeInfo.logicalShape.map((y,x)=>`coords.${h[x+u]}`).join(", ");let p="return outputValue;";const g=1===Q(n.shapeInfo.logicalShape),A=1===Q(t.logicalShape);if(1!==o||g||A){if(g&&!A)p=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(a.length){const y=o-2,x=o-1;a.indexOf(y)>-1&&a.indexOf(x)>-1?p="return vec4(outputValue.x);":a.indexOf(y)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":a.indexOf(x)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${d});\n      ${p}\n    }\n  `}(n,t):function P3(n,t){const e=n.name,s=e.charAt(0).toUpperCase()+e.slice(1),r="get"+s+"AtOutCoords",a=n.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!n.shapeInfo.isUniform&&a===l&&null==n.shapeInfo.flatOffset&&Qe(n.shapeInfo.texShape,t.texShape))return`\n      float ${r}() {\n        return sampleTexture(${e}, resultUV);\n      }\n    `;const u=ct(l),c=Uw(n.shapeInfo.logicalShape,t.logicalShape),h=l-a;let d;const p=["x","y","z","w","u","v"];d=0===a?"":l<2&&c.length>=1?"coords = 0;":c.map(g=>`coords.${p[g+h]} = 0;`).join("\n");let f="";return f=l<2&&a>0?"coords":n.shapeInfo.logicalShape.map((g,m)=>`coords.${p[m+h]}`).join(", "),`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${d}\n      return get${s}(${f});\n    }\n  `}(n,t)),r}(p,t,e.packedInputs,e.enableShapeUniforms)).join("\n"),i=t.texShape,a=vn(),l=function i3(n){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${n.texture2D}(textureSampler, uv).r;\n    }\n  `}(a);let u,c,h=function u3(n){return`${n.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${n.varyingFs} vec2 resultUV;\n    ${n.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${n.defineSpecialNaN}\n    ${n.defineSpecialInf}\n    ${n.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${c3}\n    ${h3}\n    ${d3}\n  `}(a);return t.isPacked?(u=function r3(n,t,e){switch(n.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function f3(n,t,e){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===s[0]?e?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `:1===s[1]?e?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `:e?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,e);case 2:return function I3(n,t,e){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(Qe(n,t))return e?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const r=Math.ceil(n[1]/2);return e?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(n,t,e);case 3:return function g3(n,t,e){if(e)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(n[2]/2),o=r*Math.ceil(n[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(n,t,e);default:return function y3(n,t,e){if(e)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(n[n.length-1]/2),o=r*Math.ceil(n[n.length-2]/2);let i=o,a="",l="b, r, c";for(let u=2;u<n.length-1;u++)i*=n[n.length-u-1],a=`\n      int b${u} = index / ${i};\n      index -= b${u} * ${i};\n    `+a,l=`b${u}, `+l;return`\n    ivec${n.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${a}\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${n.length}(${l});\n    }\n  `}(n,t,e)}}(t.logicalShape,i,e.enableShapeUniforms),c=function l3(n){return`\n    void setOutput(vec4 val) {\n      ${n.output} = val;\n    }\n  `}(a)):(u=function o3(n,t,e){switch(n.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function m3(n,t,e){return 1===t[0]?e?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?e?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:e?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,e);case 2:return function C3(n,t,e){return Qe(n,t)?e?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===n[1]?e?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===n[0]?e?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:e?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${n[1]};\n      int c = index - r * ${n[1]};\n      return ivec2(r, c);\n    }\n  `}(n,t,e);case 3:return function A3(n,t,e){if(e)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${jc(["r","c","d"],n)}\n    return ivec3(r, c, d);\n  }\n`;const s=yo(["r","c","d"],n);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(n,t,e);case 4:return function x3(n,t,e){if(e)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${jc(["r","c","d","d2"],n)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const s=yo(["r","c","d","d2"],n);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(n,t,e);case 5:return function b3(n,t){const e=yo(["r","c","d","d2","d3"],n);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${e}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(n,t);case 6:return function w3(n,t){const e=yo(["r","c","d","d2","d3","d4"],n);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${e}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(n,t);default:throw new Error(`${n.length}-D output sampling is not yet supported`)}}(t.logicalShape,i,e.enableShapeUniforms),c=function a3(n){return`\n    void setOutput(float val) {\n      ${n.output} = vec4(val, 0, 0, 0);\n    }\n  `}(a)),e.packedInputs&&(h+=p3),[h,l,c,r,u,o,e.userCode].join("\n")}function ci(n,t=!1){const e=n.shapeInfo.logicalShape;switch(e.length){case 0:return function S3(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1);if(n.shapeInfo.isUniform)return`float ${s}() {return ${e};}`;const[r,o]=n.shapeInfo.texShape;if(1===r&&1===o)return`\n      float ${s}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const i=xo(e);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `;const[a,l]=n.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${a}, ${l}, ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `}(n,t);case 1:return function T3(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1);if(n.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${hi(n)}\n      }\n    `;const r=n.shapeInfo.texShape,o=r[0],i=r[1];if(1===i&&1===o)return`\n      float ${s}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const a=xo(e);return 1===i?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / float(${e}TexShape[0]));\n        return sampleTexture(${e}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / ${o}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `:1===o?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${a}) + 0.5) / float(${e}TexShape[1]), 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${a}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `:t?`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], index + ${a});\n      return sampleTexture(${e}, uv);\n    }\n  `:`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${o}, ${i}, index + ${a});\n      return sampleTexture(${e}, uv);\n    }\n  `}(n,t);case 2:return function E3(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=n.shapeInfo.texShape;if(null!=o&&Qe(e,o))return t?`\n      float ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${o[1]}.0, ${o[0]}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const{newShape:i,keptDims:a}=lr(e);if(i.length<e.length){const p=["row","col"];return`\n      ${ci(di(n,i),t)}\n      float ${r}(int row, int col) {\n        return ${r}(${pi(p,a)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${hi(n)}\n      }\n    `;const u=o[0],c=o[1],h=xo(s);return 1===c?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `:1===u?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `:t?`\n      float ${r}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(n,t);case 3:return function D3(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=e[1]*e[2],i=e[2],{newShape:a,keptDims:l}=lr(e);if(a.length<e.length){const m=["row","col","depth"];return`\n        ${ci(di(n,a),t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${pi(m,l)});\n        }\n      `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${o}, ${i}, 1)));\n        ${hi(n)}\n      }\n    `;const c=n.shapeInfo.texShape,h=c[0],d=c[1],p=n.shapeInfo.flatOffset;if(d===o&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${d}.0, ${h}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(d===i&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const f=xo(s);return t?`\n    float ${r}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `:`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${o} + col * ${i} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${d}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(n,t);case 4:return function $3(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=e[3],i=e[2]*o,a=e[1]*i,{newShape:l,keptDims:u}=lr(e);if(l.length<e.length){const x=["row","col","depth","depth2"];return`\n      ${ci(di(n,l),t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${pi(x,u)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${a}, ${i}, ${o}, 1)));\n        ${hi(n)}\n      }\n    `;const c=n.shapeInfo.flatOffset,h=n.shapeInfo.texShape,d=h[0],p=h[1],f=`int stride2 = ${s}Shape[3];`,g=`int stride1 = ${s}Shape[2] * stride2;`,m=`int stride0 = ${s}Shape[1] * stride1;`;if(p===a&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${g}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${o}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(p===o&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const A=xo(s);return t?`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${g}\n      ${m}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${A});\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${a} + col * ${i} +\n          depth * ${o} + depth2;\n      vec2 uv = uvFromFlat(${d}, ${p}, index + ${A});\n      return sampleTexture(${s}, uv);\n    }\n  `}(n,t);case 5:return function F3(n){const t=n.shapeInfo.logicalShape,e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t[4],o=t[3]*r,i=t[2]*o,a=t[1]*i,{newShape:l,keptDims:u}=lr(t);if(l.length<t.length){const m=["row","col","depth","depth2","depth3"];return`\n      ${ci(di(n,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${pi(m,u)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${a}, ${i}, ${o}, ${r})) +\n          depth3;\n        ${hi(n)}\n      }\n    `;const c=n.shapeInfo.flatOffset,h=n.shapeInfo.texShape,d=h[0],p=h[1];if(p===a&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${o}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(p===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${a} + col * ${i} + depth * ${o} +\n          depth2 * ${r} + depth3 + ${xo(e)};\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\n      return sampleTexture(${e}, uv);\n    }\n  `}(n);case 6:return function O3(n){const t=n.shapeInfo.logicalShape,e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),{newShape:r,keptDims:o}=lr(t);if(r.length<t.length){const A=["row","col","depth","depth2","depth3","depth4"];return`\n      ${ci(di(n,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${pi(A,o)});\n      }\n    `}const i=t[5],a=t[4]*i,l=t[3]*a,u=t[2]*l,c=t[1]*u;if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${a})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${hi(n)}\n      }\n    `;const h=n.shapeInfo.flatOffset,d=n.shapeInfo.texShape,p=d[0],f=d[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${a}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${a} + depth3 * ${i} + depth4 + ${xo(e)};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${e}, uv);\n    }\n  `}(n);default:throw new Error(`${e.length}-D input sampling is not yet supported`)}}function Ww(n,t){switch(n.shapeInfo.logicalShape.length){case 0:return function v3(n){const t=n.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${vn().texture2D}(${t}, halfCR);\n    }\n  `}(n);case 1:return function N3(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=n.shapeInfo.texShape,o=vn();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${o.texture2D}(${e}, uv);\n    }\n  `;const i=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${i[0]}, ${i[1]}, index);\n      return ${o.texture2D}(${e}, uv);\n    }\n  `}(n,t);case 2:return function k3(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=n.shapeInfo.texShape,i=o[0],a=o[1],l=vn();if(null!=o&&Qe(e,o))return t?`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}.0, ${i}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${r}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(e[1]/2)}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(n,t);case 3:return function _3(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=n.shapeInfo.texShape,i=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];if(1===e[0]){const p=[1,2],g=["b","row","col"];return`\n        ${Ww(di(n,e.slice(1)),t)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${pi(g,p)});\n        }\n      `}const a=vn();if(t)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${a.texture2D}(${s}, uv);\n    }\n  `;const l=i[0],u=i[1],c=Math.ceil(e[2]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${c*Math.ceil(e[1]/2)}, ${c}, b, row, col);\n      return ${a.texture2D}(${s}, uv);\n    }\n  `}(n,t);default:return function R3(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=vn();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${e}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${e}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${e}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${e}, uv);\n    }\n  `;const o=n.shapeInfo.logicalShape,i=o.length,a=n.shapeInfo.texShape,l=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],u=l[0],c=l[1],h=Math.ceil(o[i-1]/2);let d=h*Math.ceil(o[i-2]/2),p="int b, int row, int col",f=`b * ${d} + (row / 2) * ${h} + (col / 2)`;for(let g=2;g<i-1;g++)p=`int b${g}, `+p,d*=o[i-g-1],f=`b${g} * ${d} + `+f;return`\n    vec4 ${s}(${p}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${r.texture2D}(${e}, uv);\n    }\n  `}(n,t)}}const c3="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",h3="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",d3="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",p3="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function xo(n){return`offset${n}`}function hi(n){const t=n.name,e=Q(n.shapeInfo.logicalShape);return e<2?`return ${t};`:`\n    for (int i = 0; i < ${e}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function ct(n){if(n<=1)return"int";if(2===n)return"ivec2";if(3===n)return"ivec3";if(4===n)return"ivec4";if(5===n)return"ivec5";if(6===n)return"ivec6";throw Error(`GPU for rank ${n} is not yet supported`)}function eg(n,t,e){const{newShape:s,keptDims:r}=lr(t),o=t.length,i=n&&3===o&&1===t[0],a=i?t.slice(1):s,l=!n&&o>1&&!Qe(t,e)&&s.length<o||i;return{useSqueezeShape:l,uniformShape:l?a:t,keptDims:r}}function di(n,t){const e=JSON.parse(JSON.stringify(n));return e.shapeInfo.logicalShape=t,e}function pi(n,t){return t.map(e=>n[e]).join(", ")}function Hw(n,t,e){const s=[],r=[];let o,i,a,l=null,u=null;u=n.getUniformLocation(e,"NAN",!1),1===W().getNumber("WEBGL_VERSION")&&(l=n.getUniformLocation(e,"INFINITY",!1));const c=!1;for(const h of t.variableNames){const d={name:h,uniform:n.getUniformLocation(e,h,c),offset:n.getUniformLocation(e,`offset${h}`,c)};t.enableShapeUniforms&&(d.shape=n.getUniformLocation(e,`${h}Shape`,c),d.texShape=n.getUniformLocation(e,`${h}TexShape`,c)),s.push(d)}if(t.enableShapeUniforms&&(o=n.getUniformLocation(e,"outShape",c),a=n.getUniformLocation(e,"outShapeStrides",c),i=n.getUniformLocation(e,"outTexShape",c)),t.customUniforms)for(const h of t.customUniforms)r.push(n.getUniformLocation(e,h.name,c));return{variablesLocations:s,customUniformLocations:r,infLoc:l,nanLoc:u,outShapeLocation:o,outShapeStridesLocation:a,outTexShapeLocation:i}}function Kw(n,t){if(n.length!==t.length)throw Error(`Binary was compiled with ${n.length} inputs, but was executed with ${t.length} inputs`);n.forEach((e,s)=>{const r=e.logicalShape,o=t[s],i=o.shape;if(!Qe(r,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${i} must match`);if(e.isUniform&&o.isUniform)return;const a=e.texShape,l=o.isUniform?null:o.texData.texShape;if(!Qe(a,l))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${a} and ${l} must match`)})}function An(n){return W().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&n<=4}class V3{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Bc.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const e=vn();this.outputShape=t,this.enableShapeUniforms=An(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?jc(["r","c","d"],t):yo(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${e.output} = result;\n      }\n    `}}class U3{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Bc.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const e=vn();this.outputShape=t,this.enableShapeUniforms=An(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?jc(["r","c","d"],t):yo(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${e.output} = result;\n      }\n    `}}class W3{constructor(t){this.variableNames=["A"],this.outTexUsage=fs.DOWNLOAD;const e=vn();this.outputShape=t,this.userCode=`\n      ${Vw}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class G3{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=fs.DOWNLOAD;const e=vn();this.outputShape=t,this.userCode=`\n      ${Vw}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}const H3={R:0,G:1,B:2,A:3};class qw{constructor(t,e=!1,s="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const r=vn();this.outputShape=t,this.enableShapeUniforms=An(this.outputShape.length);let o="result";e&&(o="floor(result * 255. + 0.5)");let i="";for(let a=0;a<s.length;a++)i+=`\n          if(offset == ${a}) {\n            result = values[${H3[s[a]]}];\n          }`;this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Ym(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${s.length});\n\n        flatIndex = idiv(flatIndex, ${s.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${r.texture2D}(A, uv);\n          ${i}\n        }\n        ${r.output} = vec4(${o}, 0., 0., 0.);\n      }\n    `}}class K3{constructor(t,e=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const s=vn();this.outputShape=t,this.enableShapeUniforms=An(this.outputShape.length);let r="",o="result";e&&(o="floor(result * 255. + 0.5)");for(let i=0;i<=1;i++)for(let a=0;a<=1;a++){const l=2*i+a;r+=`\n          localCoords = coords;\n          if(localCoords[2] + ${a} < ${this.enableShapeUniforms?"outShape[2]":`${t[2]}`}) {\n          localCoords[2] += ${a};\n          if (localCoords[1] + ${i} < ${this.enableShapeUniforms?"outShape[1]":`${t[1]}`}) {\n            localCoords[1] += ${i};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${s.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${l}] = values[0];\n            } else if (offset == 1) {\n              result[${l}] = values[1];\n            } else if (offset == 2) {\n              result[${l}] = values[2];\n            } else {\n              result[${l}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Ym(t)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${s.output} = ${o};\n        }\n    `}}function sl(n,t,e,s,r,o){!function BV(n,t){const e=W().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(n<=0||t<=0)throw new Error(`Requested texture size [${n}x${t}] is invalid.`);if(n>e||t>e)throw new Error(`Requested texture size [${n}x${t}] greater than WebGL maximum on this browser / GPU [${e}x${e}].`)}(t,e);const i=function MV(n){return rr(n,()=>n.createTexture(),"Unable to create WebGLTexture.")}(n),a=n.TEXTURE_2D;return de(n,()=>n.bindTexture(a,i)),de(n,()=>n.texParameteri(a,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE)),de(n,()=>n.texParameteri(a,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE)),de(n,()=>n.texParameteri(a,n.TEXTURE_MIN_FILTER,n.NEAREST)),de(n,()=>n.texParameteri(a,n.TEXTURE_MAG_FILTER,n.NEAREST)),1===W().getNumber("WEBGL_VERSION")?de(n,()=>n.texImage2D(a,0,s,t,e,0,r,o,null)):de(n,()=>n.texStorage2D(a,1,s,t,e)),de(n,()=>n.bindTexture(n.TEXTURE_2D,null)),{texture:i,texShape:[e,t]}}function jw(n){return n.internalFormatFloat}function Qw(n){return n.internalFormatHalfFloat}function Xw(n){return n.downloadTextureFormat}function Zw(n){return n.internalFormatPackedFloat}function Yw(n){return n.internalFormatPackedHalfFloat}class tg{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const e=W().getNumber("WEBGL_VERSION");if(null!=t?(this.gl=t,function wV(n,t){Or[n]=t}(e,t)):this.gl=Ts(e),t=this.gl,2===W().getNumber("WEBGL_VERSION")){const o=t;this.createVertexArray=()=>de(o,()=>o.createVertexArray()),this.bindVertexArray=i=>de(o,()=>o.bindVertexArray(i)),this.deleteVertexArray=i=>de(o,()=>o.deleteVertexArray(i)),this.getVertexArray=()=>de(o,()=>o.getParameter(o.VERTEX_ARRAY_BINDING))}else if(null!=t){const o=t.getExtension("OES_vertex_array_object");if(null==o)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>de(t,()=>o.createVertexArrayOES()),this.bindVertexArray=i=>de(t,()=>o.bindVertexArrayOES(i)),this.deleteVertexArray=i=>de(t,()=>o.deleteVertexArrayOES(i)),this.getVertexArray=()=>de(t,()=>t.getParameter(o.VERTEX_ARRAY_BINDING_OES))}let s="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===W().getNumber("WEBGL_VERSION")){const i="OES_texture_half_float";if(this.textureFloatExtension=Vc(this.gl,"OES_texture_float"),ms(this.gl,i))this.textureHalfFloatExtension=Vc(this.gl,i);else if(W().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(s),ms(this.gl,r))this.colorBufferHalfFloatExtension=Vc(this.gl,r);else if(W().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(s="EXT_color_buffer_float",ms(this.gl,s))this.colorBufferFloatExtension=this.gl.getExtension(s);else{if(!ms(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=function j3(n){return function LV(n,t){const e=rr(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return de(n,()=>n.bindBuffer(n.ARRAY_BUFFER,e)),de(n,()=>n.bufferData(n.ARRAY_BUFFER,t,n.STATIC_DRAW)),e}(n,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function Q3(n){return function PV(n,t){const e=rr(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return de(n,()=>n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,e)),de(n,()=>n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW)),e}(n,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function zV(n){return rr(n,()=>n.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=jm(this.gl,this.textureHalfFloatExtension)}get debug(){return W().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;de(t,()=>t.finish()),de(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),de(t,()=>t.deleteFramebuffer(this.framebuffer)),de(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),de(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),de(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function X3(n,t,e,s){const[r,o]=tl(t,e);return sl(n,r,o,jw(s),s.textureFormatFloat,n.FLOAT)}(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function Z3(n,t,e,s){const[r,o]=tl(t,e);return sl(n,r,o,Qw(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function Y3(n,t,e,s){const[r,o]=tl(t,e);return sl(n,r,o,Xw(s),n.RGBA,n.UNSIGNED_BYTE)}(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function sU(n,t,e){de(n,()=>n.bindTexture(n.TEXTURE_2D,t)),e.data instanceof Uint8Array?2===W().getNumber("WEBGL_VERSION")?de(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,e.width,e.height,n.RGBA,n.UNSIGNED_BYTE,e.data)):de(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,e.width,e.height,0,n.RGBA,n.UNSIGNED_BYTE,e.data)):2===W().getNumber("WEBGL_VERSION")?de(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,n.RGBA,n.UNSIGNED_BYTE,e)):de(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,n.RGBA,n.UNSIGNED_BYTE,e)),de(n,()=>n.bindTexture(n.TEXTURE_2D,null))}(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,s,r){this.throwIfDisposed(),function nU(n,t,e,s,r,o){let i,a,l;de(n,()=>n.bindTexture(n.TEXTURE_2D,t)),r instanceof Uint8Array?(i=new Uint8Array(e*s*4),a=n.UNSIGNED_BYTE,l=n.RGBA):(i=new Float32Array(e*s*4),a=n.FLOAT,l=o.internalFormatPackedFloat),i.set(r),2===W().getNumber("WEBGL_VERSION")?de(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,e,s,n.RGBA,a,i)):de(n,()=>n.texImage2D(n.TEXTURE_2D,0,l,e,s,0,n.RGBA,a,i)),de(n,()=>n.bindTexture(n.TEXTURE_2D,null))}(this.gl,t,e,s,r,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function eU(n,t,e,s){const[r,o]=ai(t,e);return sl(n,r,o,Yw(s),n.RGBA,s.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function J3(n,t,e,s){const[r,o]=ai(t,e);return sl(n,r,o,Zw(s),n.RGBA,n.FLOAT)}(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(Mw(this.gl,this.framebuffer),this.outputTexture=null),de(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,s){return this.downloadMatrixDriver(t,()=>function iU(n,t,e,s){const[r,o]=tl(t,e),a=new Uint8Array(function vV(n,t){return n*t}(t*e,4));return de(n,()=>n.readPixels(0,0,r,o,s.downloadTextureFormat,n.UNSIGNED_BYTE,a)),new Float32Array(a.buffer)}(this.gl,e,s,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,s,r,o,i){return function aU(n,t,e,s,r,o,i,a){const l=n,u=new Float32Array(function SV(n,t){const[e,s]=ai(n,t);return e*s*4}(o,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}(this.gl,t,0,0,0,o,i)}downloadFloat32MatrixFromBuffer(t,e){return function oU(n,t,e){const s=n,r=new Float32Array(e);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,t,e)}createBufferFromTexture(t,e,s){this.bindTextureToFrameBuffer(t);const r=function rU(n,t,e,s){const r=n.createBuffer();de(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,r));const a=16*t*e;return de(n,()=>n.bufferData(n.PIXEL_PACK_BUFFER,a,n.STREAM_READ)),de(n,()=>n.readPixels(0,0,e,t,n.RGBA,n.FLOAT,0)),de(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,null)),r}(this.gl,e,s);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,s;if(W().getBool("WEBGL_FENCE_API_ENABLED")){const r=t,o=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),s=()=>{const i=r.clientWaitSync(o,0,0);return i===r.ALREADY_SIGNALED||i===r.CONDITION_SATISFIED},e=o}else W().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),s=()=>this.isQueryAvailable(e,W().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):s=()=>!0;return{query:e,isFencePassed:s}}downloadMatrixFromPackedTexture(t,e,s){return this.downloadMatrixDriver(t,()=>function lU(n,t,e){const s=new Float32Array(t*e*4);return de(n,()=>n.readPixels(0,0,e,t,n.RGBA,n.FLOAT,s)),s}(this.gl,e,s))}createProgram(t){this.throwIfDisposed();const e=this.gl;null==this.vertexShader&&(this.vertexShader=function q3(n){const t=vn();return function DV(n,t){const e=rr(n,()=>n.createShader(n.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(de(n,()=>n.shaderSource(e,t)),de(n,()=>n.compileShader(e)),!1===n.getShaderParameter(e,n.COMPILE_STATUS))throw console.log(n.getShaderInfoLog(e)),new Error("Failed to compile vertex shader.");return e}(n,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(e));const s=function FV(n){return rr(n,()=>n.createProgram(),"Unable to create WebGLProgram.")}(e);de(e,()=>e.attachShader(s,this.vertexShader)),de(e,()=>e.attachShader(s,t)),function OV(n,t){if(de(n,()=>n.linkProgram(t)),!W().get("ENGINE_COMPILE_ONLY")&&!1===n.getProgramParameter(t,n.LINK_STATUS))throw console.log(n.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(e,s);const r=Object.assign(s,{vao:this.createVertexArray()});return this.debug&&Qm(e,r),r}buildVao(t){this.setProgram(t),this.bindVertexArray(t.vao);const e=this.gl;de(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indexBuffer)),function tU(n,t,e){de(n,()=>n.bindBuffer(n.ARRAY_BUFFER,e)),Pw(n,t,"clipSpacePos",e,3,20,0)&&Pw(n,t,"uv",e,2,20,12)}(e,t,this.vertexBuffer)}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&(de(this.gl,()=>this.gl.deleteProgram(t)),this.deleteVertexArray(t.vao))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&Qm(this.gl,this.program),de(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,s=!0){return this.throwIfDisposed(),s?function UV(n,t,e){return rr(n,()=>n.getUniformLocation(t,e),'uniform "'+e+'" not present in program.')}(this.gl,t,e):function WV(n,t,e){return n.getUniformLocation(t,e)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),de(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,s){this.throwIfDisposed(),this.throwIfNoProgram(),GV(this.gl,t,e,s)}setOutputMatrixTexture(t,e,s){this.setOutputMatrixTextureDriver(t,s,e)}setOutputPackedMatrixTexture(t,e,s){this.throwIfDisposed();const[r,o]=ai(e,s);this.setOutputMatrixTextureDriver(t,r,o)}setOutputMatrixWriteRegion(t,e,s,r){this.setOutputMatrixWriteRegionDriver(s,t,r,e)}setOutputPackedMatrixWriteRegion(t,e,s,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&Qm(this.gl,this.program),Uc(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;if(this.debug){const e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}de(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),de(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Vc(this.gl,2===W().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===W().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const s=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=s.createQuery();return s.beginQuery(r.TIME_ELAPSED_EXT,o),o}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===W().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,s=this.getQueryTimerExtensionWebGL2();return void e.endQuery(s.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}waitForQueryAndGetTime(t){var e=this;return(0,q.Z)(function*(){return yield fg(()=>e.disposed||e.isQueryAvailable(t,W().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),e.getQueryTime(t,W().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))})()}getQueryTime(t,e){if(0===e)return null;if(2===e){const s=this.gl;return s.getQueryParameter(t,s.QUERY_RESULT)/1e6}{const s=this.getQueryTimerExtensionWebGL1();return s.getQueryObjectEXT(t,s.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const s=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=s.getQueryParameter(t,s.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint}{const s=this.getQueryTimerExtensionWebGL1(),r=s.getQueryObjectEXT(t,s.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(s.GPU_DISJOINT_EXT)),r&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){const t=function uU(n){let t=0;for(;t<n.length&&n[t]();++t);return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let e=0;e<=t;++e){const{resolveFn:s}=this.itemsToPoll[e];s()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){if(this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1)return;let s;"setTimeoutCustom"in W().platform&&(s=W().platform.setTimeoutCustom.bind(W().platform)),fg(()=>(this.pollItems(),0===this.itemsToPoll.length),()=>0,null,s)}bindTextureToFrameBuffer(t){this.throwIfDisposed(),Xm(this.gl,t,this.framebuffer),this.debug&&Uc(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(Xm(this.gl,this.outputTexture,this.framebuffer),this.debug&&Uc(this.gl)):Mw(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const s=e();return this.unbindTextureToFrameBuffer(),s}setOutputMatrixTextureDriver(t,e,s){this.throwIfDisposed();const r=this.gl;Xm(r,t,this.framebuffer),this.debug&&Uc(r),this.outputTexture=t,de(r,()=>r.viewport(0,0,e,s)),de(r,()=>r.scissor(0,0,e,s))}setOutputMatrixWriteRegionDriver(t,e,s,r){this.throwIfDisposed(),de(this.gl,()=>this.gl.scissor(t,e,s,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:cU,bincountImpl:Jw,bincountReduceImpl:hU,bitwiseAndImpl:dU,castImpl:pU,ceilImpl:fU,concatImpl:mU,equalImpl:gU,expImpl:AU,expm1Impl:yU,floorImpl:xU,gatherNdImpl:bU,gatherV2Impl:wU,greaterImpl:IU,greaterEqualImpl:CU,lessImpl:vU,lessEqualImpl:SU,linSpaceImpl:NU,logImpl:TU,maxImpl:kU,maximumImpl:EU,minimumImpl:_U,multiplyImpl:DU,negImpl:RU,notEqualImpl:$U,prodImpl:FU,raggedGatherImpl:OU,raggedRangeImpl:LU,raggedTensorToTensorImpl:PU,rangeImpl:MU,rsqrtImpl:BU,scatterImpl:zU,sigmoidImpl:VU,simpleAbsImpl:eI,sliceImpl:UU,sparseFillEmptyRowsImpl:WU,sparseReshapeImpl:GU,sparseSegmentReductionImpl:tI,sqrtImpl:HU,staticRegexReplaceImpl:KU,stridedSliceImpl:qU,stringNGramsImpl:jU,stringSplitImpl:QU,stringToHashBucketFastImpl:XU,subImpl:ZU,tileImpl:YU,topKImpl:JU,transposeImpl:ng,uniqueImpl:eW}=R;function nI(n,t){return["x","y","z","w","u","v"].slice(0,t).map(e=>`${n}.${e}`)}function Sn(n,t){return 1===t?[n]:nI(n,t)}class nW{constructor(t){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.enableShapeUniforms=An(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=Sn("rc",this.rank),s=ct(this.rank),r=this.getOutOfBoundsCondition(e),o=this.getSetup(e),i=this.getOutput(e);this.userCode=`\n        void main() {\n          ${s} rc = getOutputCoords();\n\n          if(${r}) {\n            setOutput(vec4(0));\n          } else {\n            ${o}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}getSourceCoordsArr(t){const e=[];for(let s=0;s<=1;s++)for(let r=0;r<=1;r++){let o=`${0===s?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let i=2;i<this.rank;i++)o=`${t[t.length-1-i]},`+o;e.push(o)}return e}getOutOfBoundsCondition(t){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let e="";for(let s=this.rank-2;s<this.rank;s++)e+=`${t[s]} >= ${this.enableShapeUniforms?`outShape[${s}]`:this.outputShape[s]}`,s<this.rank-1&&(e+="||");return e}getSetup(t){if(1===this.rank)return"";const e=t.slice(-2);return`\n      int r = ${e[0]};\n      int c = ${e[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1]};\n      bool rEdge = rp1 >= ${this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2]};\n    `}getOutput(t){const e=this.getSourceCoordsArr(t);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${e[0]}),\n            cEdge ? 0. : getA(${e[1]}),\n            rEdge ? 0. : getA(${e[2]}),\n            rEdge || cEdge ? 0. : getA(${e[3]})`}}class sI{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=t,this.enableShapeUniforms=An(this.outputShape.length);let s="";for(let r=0;r<4;r++){let o="thisRC = rc;";r%2==1&&(o+="thisRC.z += 1;"),r>1&&(o+="thisRC.y += 1;"),s+=`\n        ${o}\n        ${r>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${r}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${r>0?"}":""}\n      `}this.userCode=`\n      ${function sW(n,t){return`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${t?function t3(n,t,e="index"){const r=function e3(n,t){const e=n.length,s=n.map(o=>`${t}[${o}]`),r=new Array(e-1);r[e-2]=s[e-1];for(let o=e-3;o>=0;--o)r[o]=`(${r[o+1]} * ${s[o+1]})`;return r}(n.map((o,i)=>i),t);return r.map((o,i)=>`int ${n[i]} = ${e} / ${r[i]}; ${i===r.length-1?`int ${n[i+1]} = ${e} - ${n[i]} * ${r[i]}`:`index -= ${n[i]} * ${r[i]}`};`).join("")}(["r","c","d"],"inputShape"):yo(["r","c","d"],n)}\n      return ivec3(r, c, d);\n    }\n  `}(e,this.enableShapeUniforms)}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Ym(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":t[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":t[2]};\n\n        ${s}\n\n        setOutput(result);\n      }\n    `}}class rW{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(t,e,s){const r=oI(e,s),o=iI(t,r,s);o in this.freeTextures||(this.freeTextures[o]=[]),o in this.usedTextures||(this.usedTextures[o]=[]);const i=rI(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s);if(this.freeTextures[o].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=i,this.log();const l=this.freeTextures[o].pop();return this.usedTextures[o].push(l),l}let a;return r===gn.PACKED_2X2_FLOAT32?a=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):r===gn.PACKED_2X2_FLOAT16?a=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):r===gn.UNPACKED_FLOAT32?a=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):r===gn.UNPACKED_FLOAT16?a=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):r===gn.PACKED_4X1_UNSIGNED_BYTE&&(a=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[o].push(a),this.numUsedTextures++,this._numBytesAllocated+=i,this.log(),a}releaseTexture(t,e,s,r){if(null==this.freeTextures)return;const o=oI(s,r),i=iI(e,o,r);i in this.freeTextures||(this.freeTextures[i]=[]);const a=rI(e,o,this.gpgpu.gl,this.gpgpu.textureConfig,r),l=W().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==l&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(t.texture),this._numBytesAllocated-=a):(this.freeTextures[i].push(t),this.numFreeTextures++,this._numBytesFree+=a),this.numUsedTextures--;const u=this.usedTextures[i],c=u&&u.indexOf(t);if(null==c||c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u[c]=u[u.length-1],u.pop(),this.log()}log(){if(!this.logEnabled)return;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${this.numFreeTextures+this.numUsedTextures})`);const e=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(const t in this.usedTextures)this.usedTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function rI(n,t,e,s,r){const o=function iW(n,t){switch(n){case gn.PACKED_2X2_FLOAT32:return Zw(t);case gn.PACKED_2X2_FLOAT16:return Yw(t);case gn.UNPACKED_FLOAT32:return jw(t);case gn.UNPACKED_FLOAT16:return Qw(t);case gn.PACKED_4X1_UNSIGNED_BYTE:return Xw(t);default:throw new Error(`Unknown physical texture type ${n}`)}}(t,s);let i;if(r){const[l,u]=ai(n[0],n[1]);i=l*u}else{const[l,u]=tl(n[0],n[1]);i=l*u}const a=function oW(n,t){if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===n.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(e,o);return i*a}function oI(n,t){if(n===fs.UPLOAD)return gn.PACKED_2X2_FLOAT32;if(n===fs.RENDER||null==n)return function aW(n){return W().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?n?gn.PACKED_2X2_FLOAT32:gn.UNPACKED_FLOAT32:n?gn.PACKED_2X2_FLOAT16:gn.UNPACKED_FLOAT16}(t);if(n===fs.DOWNLOAD||n===fs.PIXELS)return gn.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${n}`)}function iI(n,t,e){return`${n[0]}_${n[1]}_${t}_${e}`}class Ks{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.enableShapeUniforms=An(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const Jn="if (isnan(x)) return x;",lW="return x;",aI="return abs(x);",uW="return (x >= 0.0) ? x : (exp(x) - 1.0);",cW=Jn+"\n  return (x < 0.0) ? 0.0 : x;\n",hW=Jn+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",Lr="return x;",dW="return 1.0 / (1.0 + exp(-1.0 * x));",pW="return x;",fW="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",mW="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",gW="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",AW="return 1.0 / (1.0 + exp(-1.0 * x));";class Pr{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.enableShapeUniforms=An(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class yW{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t,this.enableShapeUniforms=An(this.outputShape.length);const e=t.length,s=Sn("rc",e),r=ct(e),o=function tW(n,t){if(1===n)return"rc";let e="";for(let s=0;s<n;s++)e+=t[s],s<n-1&&(e+=",");return e}(e,s),i=s.slice(-2),a=e<=1?"rc":`vec2(${i.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${o});\n\n        setOutput(getChannel(packedInput, ${a}));\n      }\n    `}}const xW=Wp,Xc={},CW=W().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");let NW=(()=>{class n extends yn{nextDataId(){return n.nextDataId++}constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!W().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let s;if(null!=e){if(e instanceof tg)s=e;else{const r=Ts(W().getNumber("WEBGL_VERSION"),e);s=new tg(r)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const r=Ts(W().getNumber("WEBGL_VERSION"));s=new tg(r),this.binaryCache=function IW(n){return n in Xc||(Xc[n]={}),Xc[n]}(W().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=s,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new rW(this.gpgpu),this.numMBBeforeWarning=function SW(){return null==W().global.screen?1024:W().global.screen.height*W().global.screen.width*window.devicePixelRatio*600/1024/1024}(),this.texData=new _t(this,Ds())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,s,r,o,i,a){const l=this.makeTensorInfo(s,r),u=this.texData.get(l.dataId);u.isPacked=!1,u.texture={texture:e,texShape:[o,i]},u.texShape=[o,i];const c=Wc(s),h=new qw(c,!1,a),d=this.runWebGLProgram(h,[l],r,[[o,i]]);return d.shape=s,u.texture=null,this.disposeIntermediateTensorInfo(l),d.dataId}write(e,s,r){if((W().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||W().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===r&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const o={id:this.nextDataId()};return this.texData.set(o,{shape:s,dtype:r,values:e,usage:fs.UPLOAD,refCount:1}),o}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,s,r,o,i){if(W().getBool("DEBUG")&&this.checkNumericalProblems(s),"complex64"===o)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:r,dtype:o,values:s,usage:fs.UPLOAD,refCount:i})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const s=this.texData.get(e),{values:r,dtype:o,complexTensorInfos:i,slice:a,shape:l,isPacked:u}=s;if(null!=a){let p;p=u?new Pr(l,Lr):new Ks(l,Lr);const f=this.runWebGLProgram(p,[{dataId:e,shape:l,dtype:o}],o),g=this.readSync(f.dataId);return this.disposeIntermediateTensorInfo(f),g}if(null!=r)return this.convertAndCacheOnCPU(e);if("string"===o)return r;const c=null!=this.activeTimers;let h,d;return c&&(h=Tn()),d="complex64"===o?Ys(this.readSync(i.real.dataId),this.readSync(i.imag.dataId)):this.getValuesFromTexture(e),c&&(this.downloadWaitMs+=Tn()-h),this.convertAndCacheOnCPU(e,d)}read(e){var s=this;return(0,q.Z)(function*(){if(s.pendingRead.has(e)){const m=s.pendingRead.get(e);return new Promise(A=>m.push(A))}const r=s.texData.get(e),{values:o,shape:i,slice:a,dtype:l,complexTensorInfos:u,isPacked:c}=r;if(null!=a){let m;m=c?new Pr(i,Lr):new Ks(i,Lr);const A=s.runWebGLProgram(m,[{dataId:e,shape:i,dtype:l}],l),y=s.read(A.dataId);return s.disposeIntermediateTensorInfo(A),y}if(null!=o)return s.convertAndCacheOnCPU(e);if(W().getBool("DEBUG")&&!W().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===W().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let d,p,h=null;if("complex64"!==l&&W().get("WEBGL_BUFFER_SUPPORTED")){d=s.decode(e);const m=s.texData.get(d.dataId);h=s.gpgpu.createBufferFromTexture(m.texture.texture,...zc(i))}if(s.pendingRead.set(e,[]),"complex64"!==l&&(yield s.gpgpu.createAndWaitForFence()),"complex64"===l){const m=yield Promise.all([s.read(u.real.dataId),s.read(u.imag.dataId)]);p=Ys(m[0],m[1])}else if(null==h)p=s.getValuesFromTexture(e);else{const m=Q(i);p=s.gpgpu.downloadFloat32MatrixFromBuffer(h,m)}if(null!=d&&s.disposeIntermediateTensorInfo(d),null!=h){const m=s.gpgpu.gl;de(m,()=>m.deleteBuffer(h))}const f=s.convertAndCacheOnCPU(e,p),g=s.pendingRead.get(e);return s.pendingRead.delete(e),g.forEach(m=>m(f)),s.pendingDisposal.has(e)&&(s.pendingDisposal.delete(e),s.disposeData(e)&&Ds().removeDataId(e,s),s.pendingDeletes--),f})()}readToGPU(e,s={}){const r=this.texData.get(e),{values:o,shape:i,slice:a,dtype:l,isPacked:u,texture:c}=r;if("complex64"===l)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=a){let f;f=u?new Pr(i,Lr):new Ks(i,Lr);const g=this.runWebGLProgram(f,[{dataId:e,shape:i,dtype:l}],l),m=this.readToGPU(g,s);return this.disposeIntermediateTensorInfo(g),m}if(null==c)throw null!=o?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const h=this.decode(e,s.customTexShape),d=Ds().makeTensorFromTensorInfo(h),p=this.texData.get(h.dataId);return Object.assign({tensorRef:d},p.texture)}bufferSync(e){const s=this.readSync(e.dataId);if("string"===e.dtype)try{const r=s.map(o=>dr(o));return Be(e.shape,e.dtype,r)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return Be(e.shape,e.dtype,s)}checkNumericalProblems(e){if(null!=e)for(let s=0;s<e.length;s++){const r=e[s];if(!EV(r))throw W().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${r} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${r} cannot be represented on this device.`)}}getValuesFromTexture(e){const{shape:s,dtype:r,isPacked:o}=this.texData.get(e),i=Q(s);if(W().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const p=this.decode(e),f=this.texData.get(p.dataId),g=this.gpgpu.downloadMatrixFromPackedTexture(f.texture.texture,...zc(s)).subarray(0,i);return this.disposeIntermediateTensorInfo(p),g}const a=W().getBool("WEBGL_PACK")&&!0===o,l=a?Wc(s):s,u=a?new G3(l):new W3(l),c=this.runWebGLProgram(u,[{shape:l,dtype:r,dataId:e}],"float32"),h=this.texData.get(c.dataId),d=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(h.texture.texture,h.texShape[0],h.texShape[1]).subarray(0,i);return this.disposeIntermediateTensorInfo(c),d}timerAvailable(){return W().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){var s=this;const r=this.activeTimers,o=[];let i=!1;null==this.programTimersStack?(this.programTimersStack=o,i=!0):this.activeTimers.push(o),this.activeTimers=o,e();const a=jr(this.activeTimers.map(c=>c.query)).filter(c=>null!=c),l=jr(this.activeTimers.map(c=>c.name)).filter(c=>null!=c);this.activeTimers=r,i&&(this.programTimersStack=null);const u={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(0,q.Z)(function*(){if(W().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const c=yield Promise.all(a);u.kernelMs=function tC(n){let t=0;for(let e=0;e<n.length;e++)t+=n[e];return t}(c),u.getExtraProfileInfo=()=>c.map((h,d)=>({name:l[d],ms:h})).map(h=>`${h.name}: ${h.ms}`).join(", ")}else u.kernelMs={error:"WebGL query timers are not supported in this environment."};return s.uploadWaitMs=0,s.downloadWaitMs=0,u})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return W().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Tn(),endMs:null}}endTimer(e){return W().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=Tn(),e)}getQueryTime(e){var s=this;return(0,q.Z)(function*(){return W().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?s.gpgpu.waitForQueryAndGetTime(e):e.endMs-e.startMs})()}disposeData(e,s=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(s?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!s&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:r}=this.texData.get(e);return null!=r&&(this.disposeData(r.real.dataId,s),this.disposeData(r.imag.dataId,s)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:s,dtype:r,texShape:o,usage:i,isPacked:a,slice:l}=this.texData.get(e),u=l&&l.origDataId||e,c=this.dataRefCount.get(u);c>1?this.dataRefCount.set(u,c-1):(this.dataRefCount.delete(u),null!=s&&(this.numBytesInGPU-=this.computeBytes(o,r),this.textureManager.releaseTexture(s,o,i,a)));const h=this.texData.get(e);h.texture=null,h.texShape=null,h.isPacked=!1,h.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,s=CW){return W().getBool("WEBGL_CPU_FORWARD")&&e.every(r=>null==this.texData.get(r.dataId).texture&&Q(r.shape)<s)}getGPGPUContext(){return this.gpgpu}where(e){Wn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const s=e.dataSync();return xW(e.shape,s)}packedUnaryOp(e,s,r){const o=new Pr(e.shape,s),i=this.compileAndRun(o,[e],r);return Ds().makeTensorFromTensorInfo(i)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const o=eI(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,o)}if(W().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,aI,e.dtype);const s=new Ks(e.shape,aI),r=this.compileAndRun(s,[e]);return Ds().makeTensorFromTensorInfo(r)}makeTensorInfo(e,s,r){let o;if("string"===s&&null!=r&&r.length>0&&xi(r[0])){const i=r.map(a=>hr(a));o=this.write(i,e,s)}else o=this.write(r,e,s);return this.texData.get(o).usage=null,{dataId:o,shape:e,dtype:s}}makeOutput(e,s,r){return Ds().makeTensorFromTensorInfo(this.makeTensorInfo(e,s,r),this)}unpackTensor(e){const s=new yW(e.shape);return this.runWebGLProgram(s,[e],e.dtype)}packTensor(e){const s=new nW(e.shape);return this.runWebGLProgram(s,[e],e.dtype,null,!0)}packedReshape(e,s){const r=[li(e.shape),...ui(e.shape)],o={dtype:e.dtype,shape:r,dataId:e.dataId},i=[li(s),...ui(s)],a=new sI(i,r),c=this.runWebGLProgram(a,[o],e.dtype,[r],!0);return{dataId:c.dataId,shape:s,dtype:c.dtype}}decode(e,s){const r=this.texData.get(e),{isPacked:o,shape:i,dtype:a}=r;null!=s&&v(Q(i)<=s[0]*s[1]*4,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.");const l=Wc(i);let u;u=o?new U3(l):new V3(l);const h=[null!=s?s:zc(l)];return{dtype:a,shape:i,dataId:this.runWebGLProgram(u,[{shape:l,dtype:a,dataId:e}],a,h,!0,s).dataId}}runWebGLProgram(e,s,r,o,i=!1,a){const l=this.makeTensorInfo(e.outputShape,r),u=this.texData.get(l.dataId);if(e.packedOutput&&(u.isPacked=!0),e.outPackingScheme===Bc.DENSE){const y=null!=a?a:zc(e.outputShape);u.texShape=y.map(x=>2*x)}if(null!=e.outTexUsage&&(u.usage=e.outTexUsage),0===Q(l.shape))return u.values=on(l.dtype,0),l;const c=[],h=s.map(y=>{if("complex64"===y.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let x=this.texData.get(y.dataId);if(null==x.texture){if(!e.packedInputs&&Q(y.shape)<=W().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:y.shape,texData:null,isUniform:!0,uniformValues:x.values};e.packedInputs&&(x.isPacked=!0,x.shape=y.shape)}if(this.uploadToGPU(y.dataId),!!x.isPacked!=!!e.packedInputs)y=x.isPacked?this.unpackTensor(y):this.packTensor(y),c.push(y),x=this.texData.get(y.dataId);else if(x.isPacked&&!Hc(x.shape,y.shape)){const b=y,I=y.shape;y.shape=x.shape,y=this.packedReshape(y,I),c.push(y),x=this.texData.get(y.dataId),b.shape=I}return{shape:y.shape,texData:x,isUniform:!1}});this.uploadToGPU(l.dataId);const d={shape:l.shape,texData:u,isUniform:!1},p=function z3(n,t,e){let s="";t.concat(e).forEach(i=>{const a=null!=i.texData&&null!=i.texData.slice&&i.texData.slice.flatOffset>0;if(n.enableShapeUniforms&&!i.isUniform){const l=i.texData.texShape,{useSqueezeShape:u,uniformShape:c,keptDims:h}=eg(n.packedInputs,i.shape,l);let d="",p="",f="";if(1===c.length&&n.packedInputs){const I=[Math.ceil(l[0]/2),Math.ceil(l[1]/2)];d=`${I[0]>1}_${I[1]>1}`}else if(2!==c.length||n.packedInputs){if(c.length>2&&!n.packedInputs){const I=Ne(c);f=`${I[0]===l[1]}_${I[I.length-1]===l[1]}`}}else p=`${c[0]>1}_${c[1]>1}`;const g=i.shape.length,m=2===c.length&&Qe(i.shape,l),A=1===Q(i.shape),y=zo(i.shape,e.shape),x=!n.packedInputs&&g===e.shape.length&&Qe(l,e.texData.texShape);s+=`${g}_${x}_${u?h:""}_${c.length}_${A}_${y}_${m}_${d}_${p}_${f}_${n.packedInputs||c.length>2?"":`${l[0]>1}_${l[1]>1}`}_${a}`}else s+=`${i.shape}_${i.isUniform?"uniform":i.texData.texShape}_${a}`});let o=n.constructor.name;return o+="_"+s+"_"+n.userCode+`${W().getNumber("WEBGL_VERSION")}`,o}(e,h,d),f=this.getAndSaveBinary(p,()=>function M3(n,t,e,s){const r=e.map((c,h)=>{const d={logicalShape:c.shape,texShape:c.isUniform?null:c.texData.texShape,isUniform:c.isUniform,isPacked:!c.isUniform&&c.texData.isPacked,flatOffset:null};return null!=c.texData&&null!=c.texData.slice&&c.texData.slice.flatOffset>0&&(d.flatOffset=c.texData.slice.flatOffset),{name:t.variableNames[h],shapeInfo:d}}),o=r.map(c=>c.shapeInfo),i={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},a=n3(r,i,t),l=function RV(n,t){const e=rr(n,()=>n.createShader(n.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(de(n,()=>n.shaderSource(e,t)),de(n,()=>n.compileShader(e)),W().get("ENGINE_COMPILE_ONLY"))return e;if(!1===n.getShaderParameter(e,n.COMPILE_STATUS))throw Lw(t,n.getShaderInfoLog(e)),new Error("Failed to compile fragment shader.");return e}(n.gl,a),u=n.createProgram(l);return W().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:a,webGLProgram:u,inShapeInfos:o,outShapeInfo:i,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(n.buildVao(u),Object.assign({program:t,fragmentShader:l,source:a,webGLProgram:u,inShapeInfos:o,outShapeInfo:i},Hw(n,t,u)))}(this.gpgpu,e,h,d)),g=null!=this.activeTimers;let m;g&&(m=this.startTimer()),W().get("ENGINE_COMPILE_ONLY")||function B3(n,t,e,s,r){t.program.enableShapeUniforms||(Kw(t.inShapeInfos,e),Kw([t.outShapeInfo],[s]));const o=s.texData.texture,i=s.texData.texShape;s.texData.isPacked?n.setOutputPackedMatrixTexture(o.texture,i[0],i[1]):n.setOutputMatrixTexture(o.texture,i[0],i[1]),n.setProgram(t.webGLProgram),n.bindVertexArray(t.webGLProgram.vao),1===W().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&n.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&n.gl.uniform1f(t.nanLoc,NaN);for(let l=0;l<e.length;++l){const u=e[l],{uniform:c,offset:h,shape:d,texShape:p}=t.variablesLocations[l];if(d){const{uniformShape:f}=eg(t.program.packedInputs,u.shape,u.texData.texShape);switch(f.length){case 1:n.gl.uniform1iv(d,new Int32Array(f));break;case 2:n.gl.uniform2iv(d,new Int32Array(f));break;case 3:n.gl.uniform3iv(d,new Int32Array(f));break;case 4:n.gl.uniform4iv(d,new Int32Array(f))}}if(p&&n.gl.uniform2i(p,u.texData.texShape[0],u.texData.texShape[1]),null!=c){if(u.isUniform){if(Q(u.shape)<2)n.gl.uniform1f(c,u.uniformValues[0]);else{let f=u.uniformValues;f instanceof Float32Array||(f=new Float32Array(f)),n.gl.uniform1fv(c,f)}continue}null!=u.texData.slice&&null!=h&&n.gl.uniform1i(h,u.texData.slice.flatOffset),n.setInputMatrixTexture(u.texData.texture.texture,c,l)}}const a=t.outShapeLocation;if(a)switch(s.shape.length){case 1:n.gl.uniform1iv(a,new Int32Array(s.shape));break;case 2:n.gl.uniform2iv(a,new Int32Array(s.shape));break;case 3:n.gl.uniform3iv(a,new Int32Array(s.shape));break;case 4:n.gl.uniform4iv(a,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const l=Ne(s.shape);switch(s.shape.length){case 2:n.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(l));break;case 3:n.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(l));break;case 4:n.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(l))}}if(t.outTexShapeLocation&&n.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&r)for(let l=0;l<t.program.customUniforms.length;++l){const u=t.program.customUniforms[l],c=t.customUniformLocations[l],h=r[l];if("float"===u.type)n.gl.uniform1fv(c,h);else if("vec2"===u.type)n.gl.uniform2fv(c,h);else if("vec3"===u.type)n.gl.uniform3fv(c,h);else if("vec4"===u.type)n.gl.uniform4fv(c,h);else if("int"===u.type)n.gl.uniform1iv(c,h);else if("ivec2"===u.type)n.gl.uniform2iv(c,h);else if("ivec3"===u.type)n.gl.uniform3iv(c,h);else{if("ivec4"!==u.type)throw Error(`uniform type ${u.type} is not supported yet.`);n.gl.uniform4iv(c,h)}}n.executeProgram()}(this.gpgpu,f,h,d,o),c.forEach(y=>this.disposeIntermediateTensorInfo(y)),g&&(m=this.endTimer(m),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(m)}));const A=W().getNumber("WEBGL_FLUSH_THRESHOLD");if(A>0){const y=Tn();y-this.lastGlFlushTime>A&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=y)}if(!W().getBool("WEBGL_LAZILY_UNPACK")&&u.isPacked&&!1===i){const y=this.unpackTensor(l);return this.disposeIntermediateTensorInfo(l),y}return l}compileAndRun(e,s,r,o,i=!1){return this.runWebGLProgram(e,s,r=r||s[0].dtype,o,i)}getAndSaveBinary(e,s){return e in this.binaryCache||(this.binaryCache[e]=s()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(W().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(s=>{this.gpgpu.deleteProgram(this.binaryCache[s].webGLProgram),delete this.binaryCache[s]}),this.textureManager.dispose(),null!=this.canvas&&typeof HTMLCanvasElement<"u"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=U(()=>{if(!W().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=W().getBool("DEBUG");W().set("DEBUG",!1);const s=this.abs(ke(1e-8)).dataSync()[0];if(W().set("DEBUG",e),s>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const s=this.texData.get(e),{shape:r,dtype:o,values:i,texture:a,usage:l,isPacked:u}=s;if(null!=a)return;const c=null!=this.activeTimers;let h;c&&(h=Tn());let d=s.texShape;if(null==d&&(d=function KV(n,t=!1){let e=W().getNumber("WEBGL_MAX_TEXTURE_SIZE"),s=W().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");s===1/0&&W().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(s=e/2),t&&(e*=2,s*=2,1===(n=n.map((a,l)=>l>=n.length-2?ah(n[l]):n[l])).length&&(n=[2,n[0]])),2!==n.length&&(n=lr(n).newShape);let r=Q(n),o=null;n.length<=1&&r<=e?o=[1,r]:2===n.length&&n[0]<=e&&n[1]<=e?o=n:3===n.length&&n[0]*n[1]<=e&&n[2]<=e?o=[n[0]*n[1],n[2]]:3===n.length&&n[0]<=e&&n[1]*n[2]<=e?o=[n[0],n[1]*n[2]]:4===n.length&&n[0]*n[1]*n[2]<=e&&n[3]<=e?o=[n[0]*n[1]*n[2],n[3]]:4===n.length&&n[0]<=e&&n[1]*n[2]*n[3]<=e&&(o=[n[0],n[1]*n[2]*n[3]]);const i=null!=o&&Math.max(...o)>s&&Math.min(...o)<=(t?2:1)&&Math.min(...o)>0;if(null==o||i)if(t){const a=li(n);let l=2,u=2;n.length&&([l,u]=ui(n)),r=a*(l/2)*(u/2),o=lh(r).map(c=>2*c)}else o=lh(r);return o}(r,u),s.texShape=d),null!=i){const p=Wc(r);let f,g=d[1],m=d[0];const A=i instanceof Uint8Array||i instanceof Uint8ClampedArray;(u||!A)&&([g,m]=ai(d[0],d[1])),f=u?new K3(p,A):new qw(p,A);const y=A?[m,g]:d,x=this.makeTensorInfo(y,o),b=this.texData.get(x.dataId);b.usage=A?fs.PIXELS:fs.UPLOAD,b.texShape=y,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(x.dataId),g,m,i);const k=this.runWebGLProgram(f,[x],o,[[m,g]],!0),E=this.texData.get(k.dataId);s.texShape=E.texShape,s.isPacked=E.isPacked,s.usage=E.usage,W().get("ENGINE_COMPILE_ONLY")?this.disposeData(k.dataId):(s.texture=E.texture,s.values=null,this.texData.delete(k.dataId)),this.disposeIntermediateTensorInfo(x),c&&(this.uploadWaitMs+=Tn()-h)}else{const p=this.acquireTexture(d,l,o,u);s.texture=p}}convertAndCacheOnCPU(e,s){const r=this.texData.get(e),{dtype:o}=r;return null!=s&&(r.values=function TW(n,t){if("float32"===t||"complex64"===t)return n;if("int32"===t||"bool"===t){const e="int32"===t?new Int32Array(n.length):new Uint8Array(n.length);for(let s=0;s<e.length;++s)e[s]=Math.round(n[s]);return e}throw new Error(`Unknown dtype ${t}`)}(s,o)),r.values}acquireTexture(e,s,r,o){if(this.numBytesInGPU+=this.computeBytes(e,r),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const i=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${i} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,s,o)}computeBytes(e,s){return e[0]*e[1]*cl(s)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}checkCompileCompletionAsync(){var e=this;return(0,q.Z)(function*(){const s=[];if(e.gpgpu.parallelCompilationExtension){for(const[,r]of Object.entries(e.binaryCache))s.push(e.checkCompletionAsync_(r));return Promise.all(s)}for(const[,r]of Object.entries(e.binaryCache)){const o=new Promise(i=>{try{e.checkCompletion_(r),i(!0)}catch(a){throw a}});s.push(o)}return Promise.all(s)})()}checkCompletionAsync_(e){var s=this;return(0,q.Z)(function*(){return s.gpgpu.gl.getProgramParameter(e.webGLProgram,s.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?s.checkCompletion_(e):(yield Ky(),s.checkCompletionAsync_(e))})()}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS))throw console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS)?(Lw(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.")):new Error("Failed to link vertex and fragment shaders.");return!0}getUniformLocations(){for(const e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);const{variablesLocations:s,customUniformLocations:r,infLoc:o,nanLoc:i,outShapeLocation:a,outShapeStridesLocation:l,outTexShapeLocation:u}=Hw(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=s,e.customUniformLocations=r,e.infLoc=o,e.nanLoc=i,e.outShapeLocation=a,e.outShapeStridesLocation=l,e.outTexShapeLocation=u}}createTensorFromGPUData(e,s,r){e.channels=e.channels||"RGBA";const{texture:o,height:i,width:a,channels:l}=e,u=Ds().backend;if(!u.gpgpu.gl.isTexture(o))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const c=u.writeTexture(o,s,r,i,a,l);return Ds().makeTensorFromDataId(c,s,r,u)}}return n.nextDataId=0,n})();Ug()&&uA("webgl",()=>new NW,2);const sg="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class bo{constructor(t,e,s){this.variableNames=["A","B"],this.outputShape=Le(e,s),this.enableShapeUniforms=An(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const wo="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class fi{constructor(t,e,s,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Le(e,s);const o=this.outputShape.length;this.enableShapeUniforms=An(o);let i="";if(r)if(0===o||1===Q(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(i=`\n          ${ct(o)} coords = getOutputCoords();\n        `,1===o)i+=this.enableShapeUniforms?"\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const l=Sn("coords",o);i+=this.enableShapeUniforms?`\n            bool nextRowOutOfBounds =\n              (${l[o-2]} + 1) >= outShape[${o} - 2];\n            bool nextColOutOfBounds =\n              (${l[o-1]} + 1) >= outShape[${o} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:`\n            bool nextRowOutOfBounds =\n              (${l[o-2]} + 1) >= ${this.outputShape[o-2]};\n            bool nextColOutOfBounds =\n              (${l[o-1]} + 1) >= ${this.outputShape[o-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${i}\n\n        setOutput(result);\n      }\n    `}}function zn(n){const{inputs:t,backend:e}=n,{x:s}=t;return e.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const _W={kernelName:zi,backendName:"webgl",kernelFunc:zn};function Mr(n){const{inputs:t,backend:e}=n,{real:s,imag:r}=t,o=e.makeTensorInfo(s.shape,"complex64"),i=e.texData.get(o.dataId),a=zn({inputs:{x:s},backend:e}),l=zn({inputs:{x:r},backend:e});return i.complexTensorInfos={real:a,imag:l},o}const DW={kernelName:wh,backendName:"webgl",kernelFunc:Mr},lI="return (a < 0.) ? b * a : a;",uI="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",$W={kernelName:$l,backendName:"webgl",kernelFunc:function RW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{alpha:o}=s,i=e.makeTensorInfo([],"float32",cr(o,"float32")),a=W().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fi(uI,r.shape,i.shape):new bo(lI,r.shape,i.shape),l=e.runWebGLProgram(a,[r,i],"float32");return e.disposeIntermediateTensorInfo(i),l}},cI="return (a < 0.) ? b * a : a;",hI="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",OW={kernelName:Yl,backendName:"webgl",kernelFunc:function FW(n){const{inputs:t,backend:e}=n,{x:s,alpha:r}=t,o=W().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fi(hI,s.shape,r.shape):new bo(cI,s.shape,r.shape);return e.runWebGLProgram(o,[s,r],"float32")}},mi="if (isnan(x)) return x;";function et({opSnippet:n,packedOpSnippet:t,cpuKernelImpl:e,dtype:s}){return({inputs:r,backend:o})=>{const{x:i}=r,a=o,l=s||i.dtype;if(a.shouldExecuteOnCPU([i])&&null!=e){const h=a.texData.get(i.dataId),d=e(h.values,l);return a.makeTensorInfo(i.shape,l,d)}let c;return c=W().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new Pr(i.shape,t):new Ks(i.shape,n),a.runWebGLProgram(c,[i],l)}}function cn({opSnippet:n,packedOpSnippet:t,checkOutOfBounds:e=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:o}){return({inputs:i,backend:a})=>{const{a:l,b:u}=i,c=a;if(s&&"complex64"===l.dtype){const f=c.texData.get(l.dataId),g=c.texData.get(u.dataId),[m,A]=[[f.complexTensorInfos.real,g.complexTensorInfos.real],[f.complexTensorInfos.imag,g.complexTensorInfos.imag]].map(x=>{const[b,I]=x,S={dataId:b.dataId,dtype:b.dtype,shape:l.shape},k={dataId:I.dataId,dtype:I.dtype,shape:u.shape},E=new bo(n,l.shape,u.shape);return c.runWebGLProgram(E,[S,k],Fn(b.dtype,I.dtype))}),y=Mr({inputs:{real:m,imag:A},backend:c});return c.disposeIntermediateTensorInfo(m),c.disposeIntermediateTensorInfo(A),y}const h=o||Fn(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=r){const f=c.texData.get(l.dataId).values,g=c.texData.get(u.dataId).values,m="string"===l.dtype?Js(f):f,A="string"===l.dtype?Js(g):g,[y,x]=r(l.shape,u.shape,m,A,h),b=c.makeTensorInfo(x,h);return c.texData.get(b.dataId).values=y,b}let p;return p=W().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new fi(t,l.shape,u.shape,e):new bo(n,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}function rl(n,t=!1){if("linear"===n)return t?pW:lW;if("relu"===n)return t?mW:cW;if("elu"===n)return t?fW:uW;if("relu6"===n)return t?gW:hW;if("prelu"===n)return t?hI:cI;if("leakyrelu"===n)return t?uI:lI;if("sigmoid"===n)return t?AW:dW;throw new Error(`Activation ${n} has not been implemented for the WebGL backend.`)}class dI{constructor(t,e,s,r=!1,o=!1,i=!1,a=null,l=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=s,this.enableShapeUniforms=An(this.outputShape.length);const h=Math.ceil((r?t[1]:t[2])/2),d=r?"i * 2, rc.y":"rc.y, i * 2",p=o?"rc.z, i * 2":"i * 2, rc.z",f=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],g=o?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",A="";a&&(m=l?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${a}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${a}\n        }`:`vec4 activation(vec4 x) {\n          ${a}\n        }`,A="result = activation(result);");const y=i?"result += getBiasAtOutCoords();":"";i&&this.variableNames.push("bias"),l&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let x="rc.x",b="rc.x";t[0]<e[0]?x=`imod(rc.x, ${t[0]})`:e[0]<t[0]&&(b=`imod(rc.x, ${e[0]})`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${h}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${x};\n        int batchB = ${b};\n        for (int i = 0; i < ${h}; i++) {\n          vec4 a = getMatrixA(batchA, ${d});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${f[0]} * ${g[0]});\n          result += (${f[1]} * ${g[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${A}\n\n        setOutput(result);\n      }\n    `}}const pI={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class fI{constructor(t,e,s){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Le(e,s),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const mI="return a * b;";function rg(n){const{inputs:t,backend:e}=n,{a:s,b:r}=t,o=Fn(s.dtype,r.dtype);if("complex64"===s.dtype){const a=e.texData.get(s.dataId),l=e.texData.get(r.dataId),u=new fI(pI.REAL,s.shape,r.shape),c=new fI(pI.IMAG,s.shape,r.shape),h=[{dataId:a.complexTensorInfos.real.dataId,dtype:a.complexTensorInfos.real.dtype,shape:s.shape},{dataId:a.complexTensorInfos.imag.dataId,dtype:a.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:l.complexTensorInfos.real.dataId,dtype:l.complexTensorInfos.real.dtype,shape:r.shape},{dataId:l.complexTensorInfos.imag.dataId,dtype:l.complexTensorInfos.imag.dtype,shape:r.shape}],d=e.runWebGLProgram(u,h,"float32"),p=e.runWebGLProgram(c,h,"float32"),f=Mr({inputs:{real:d,imag:p},backend:e});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),f}if(e.shouldExecuteOnCPU([s,r])){const a=e.texData.get(s.dataId),l=e.texData.get(r.dataId),[u,c]=DU(s.shape,r.shape,a.values,l.values,o),h=e.makeTensorInfo(c,o);return e.texData.get(h.dataId).values=u,h}let i;return i=W().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fi(mI,s.shape,r.shape):new bo(mI,s.shape,r.shape),e.runWebGLProgram(i,[s,r],o)}const LW={kernelName:Qi,backendName:"webgl",kernelFunc:rg};function ce(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{shape:o}=s,i=e,a=Q(r.shape),l=mg(o,a),u=Q(l);v(a===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`);const c=i.texData.get(r.dataId);return!c.isPacked||Hc(r.shape,l)||null!==c.texture&&Hc(c.shape,l)?(i.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function PW(n,t,e){const s=[li(n.shape),...ui(n.shape)],r={dtype:n.dtype,shape:s,dataId:n.dataId},o=[li(t),...ui(t)],i=new sI(o,s),u=e.runWebGLProgram(i,[r],n.dtype,[s],!0);return{dataId:u.dataId,shape:t,dtype:u.dtype}}(r,l,i)}const MW={kernelName:eu,backendName:"webgl",kernelFunc:ce};class gI{constructor(t,e){this.variableNames=["x"];const{windowSize:s,batchSize:r,inSize:o,outSize:i}=t;this.outputShape=[r,i];const a=4*Math.floor(s/4),l=s%4;let u="sumValue += dot(values, ones);";if(null!=e){const h=1/e;u=`sumValue += dot(values * ${No(h)?h.toPrecision(2):h}, ones);`}let c="";o%s>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${a}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${a};\n        if (${1===l}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class BW{constructor(t,e){this.variableNames=["x"];const{windowSize:s,batchSize:r,inSize:o,outSize:i}=t;this.outputShape=[r,i];let a="0.0",l="";"prod"===e?a="1.0":"min"===e?(a="1.0 / 1e-20",l="min"):"max"===e&&(a="-1.0 / 1e-20",l="max");let u=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?u="sumValue":"prod"===e?u="prodValue":"all"===e?u="allValue":"any"===e&&(u="anyValue");const c=4*Math.floor(s/4),h=s%4;let d=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${l}(values, minMaxValue);\n        if (${"min"===e} || ${"max"===e}) {\n          minMaxValue = ${l}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===e?(a="1.0",d="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===e&&(a="0.0",d="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let f="";o%s>0&&(f=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${a};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${f}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        vec4 minMaxValue = vec4(${a});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${d}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${2===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${3===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${d}\n        }\n        setOutput(${u});\n      }\n    `}}function Io(n,t,e,s){const r=function zW(n){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const e=t.length?t[t.length-1].outSize:n[1],s=Yu(e);t.push({inSize:e,windowSize:s,outSize:Math.ceil(e/s)})}return t}(n.shape);let o=n;for(let i=0;i<r.length;i++){const{inSize:a,windowSize:l,outSize:u}=r[i];let c,h;c="mean"===e?0===i?new gI({windowSize:l,inSize:a,batchSize:n.shape[0],outSize:u},a):new gI({windowSize:l,inSize:a,batchSize:n.shape[0],outSize:u}):new BW({windowSize:l,inSize:a,batchSize:n.shape[0],outSize:u},e),h=o,o=s.runWebGLProgram(c,[o],t),h.dataId!==n.dataId&&s.disposeIntermediateTensorInfo(h)}return o}class VW{constructor(t,e){this.variableNames=["A"];const s=new Array(t.length);for(let i=0;i<s.length;i++)s[i]=t[e[i]];this.outputShape=s,this.rank=s.length;const r=ct(this.rank),o=function UW(n){const t=n.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let r=0;r<n.length;r++)s[n[r]]=e[r];return s.join()}(e);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${o}));\n    }\n    `}}class WW{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const s=new Array(t.length);for(let c=0;c<s.length;c++)s[c]=t[e[c]];if(this.outputShape=s,this.rank=s.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=ct(this.rank),o=nI("rc",this.rank),i=new Array(this.rank);for(let c=0;c<e.length;c++)i[e[c]]=o[c];const a=`vec2(${i.slice(-2).join()})`,l=`++${o[this.rank-1]} < ${s[this.rank-1]}`,u=`getChannel(getA(${i.join()}), ${a})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${l}) {\n        result[1] = ${u};\n      }\n      --${o[this.rank-1]};\n      if(++${o[this.rank-2]} < ${s[this.rank-2]}) {\n        result[2] = ${u};\n        if(${l}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function Zc(n,t,e){const s=W().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new WW(n.shape,t):new VW(n.shape,t);return e.runWebGLProgram(s,[n],n.dtype)}function Yc(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:i}=s;return function GW(n,t,e,s){const o=n.shape.length,i=Ge(t,n.shape);let a=i;const l=Tt(a,o),u=null!=l;let c=n;u&&(c=Zc(n,l,s),a=Lt(a.length,o)),ln("sum",a,o);const[h,d]=nn(c.shape,a);let p=h;e&&(p=Ot(h,i));const f=Q(d),A=ce({inputs:{x:c},attrs:{shape:[Q(n.shape)/f,f]},backend:s}),x=Io(A,kd(n.dtype),"sum",s),b=ce({inputs:{x},attrs:{shape:p},backend:s});return s.disposeIntermediateTensorInfo(A),s.disposeIntermediateTensorInfo(x),u&&s.disposeIntermediateTensorInfo(c),b}(r,o,i,e)}const HW={kernelName:iu,backendName:"webgl",kernelFunc:Yc};function Nn(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{perm:o}=s,i=e,l=new Array(r.shape.length);for(let c=0;c<l.length;c++)l[c]=r.shape[o[c]];let u;if(i.shouldExecuteOnCPU([r])){const h=i.texData.get(r.dataId).values,d=ng(h,r.shape,r.dtype,o,l);u=i.makeTensorInfo(l,r.dtype),i.texData.get(u.dataId).values=d}else u=Zc(r,o,i);return u}const KW={kernelName:Do,backendName:"webgl",kernelFunc:Nn},AI=1e3;function Jc({a:n,b:t,transposeA:e,transposeB:s,backend:r,bias:o=null,preluActivationWeights:i=null,leakyreluAlpha:a=0,activation:l=null}){const u=n.shape.length,c=t.shape.length,h=e?n.shape[u-2]:n.shape[u-1],d=s?t.shape[c-1]:t.shape[c-2],p=e?n.shape[u-1]:n.shape[u-2],f=s?t.shape[c-2]:t.shape[c-1],g=n.shape.slice(0,-2),m=t.shape.slice(0,-2),A=Q(g),y=Q(m),b=Le(n.shape.slice(0,-2),t.shape.slice(0,-2)).concat([p,f]);v(h===d,()=>`Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${n.shape} and ${t.shape} and transposeA=${e} and transposeB=${s} must match.`);const I=e?[A,h,p]:[A,p,h],S=s?[y,f,d]:[y,d,f],k=ce({inputs:{x:n},backend:r,attrs:{shape:I}}),E=ce({inputs:{x:t},backend:r,attrs:{shape:S}}),D=[k,E],O=Math.max(A,y),C=e?k.shape[1]:k.shape[2],T=null!=o,_=null!=i,P="leakyrelu"===l,z=null!=l?rl(l,!0):null;let H;if((1===p||1===f)&&C>AI&&!1===(T||_||P||null!=z)){let Z=k,ee=E;e&&(Z=Nn({inputs:{x:k},backend:r,attrs:{perm:[0,2,1]}}),D.push(Z)),s&&(ee=Nn({inputs:{x:E},backend:r,attrs:{perm:[0,2,1]}}),D.push(ee));const ae=1===f;let oe=Z;1!==f&&(oe=ce({inputs:{x:Z},backend:r,attrs:{shape:[O,C,1]}}),D.push(oe));const pe=1===f?2:1;let ue=ee;ae&&(ue=ce({inputs:{x:ee},backend:r,attrs:{shape:[O,1,C]}}),D.push(ue));const Ae=rg({inputs:{a:oe,b:ue},backend:r});H=Yc({inputs:{x:Ae},backend:r,attrs:{axis:pe,keepDims:!0}}),D.push(Ae)}else{const Z=Fn(n.dtype,t.dtype),ee=new dI(I,S,[O,p,f],e,s,T,z,_,P),te=[k,E];if(null!=o&&te.push(o),_&&te.push(i),P){const ae=r.makeTensorInfo([],"float32",cr(a,"float32"));te.push(ae),D.push(ae)}H=r.runWebGLProgram(ee,te,Z)}const K=ce({inputs:{x:H},backend:r,attrs:{shape:b}});D.push(H);for(const Z of D)r.disposeIntermediateTensorInfo(Z);return K}const jW={kernelName:fu,backendName:"webgl",kernelFunc:function qW(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o,bias:i,preluActivationWeights:a}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return Jc({a:r,b:o,transposeA:l,transposeB:u,backend:e,bias:i,preluActivationWeights:a,leakyreluAlpha:h,activation:c})}},yI="return abs(x);",XW={kernelName:hl,backendName:"webgl",kernelFunc:function QW(n){const{inputs:t,backend:e}=n,{x:s}=t;if(e.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const o=e.texData.get(s.dataId),i=eI(o.values);return e.makeTensorInfo(s.shape,s.dtype,i)}let r;return r=W().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Pr(s.shape,yI):new Ks(s.shape,yI),e.runWebGLProgram(r,[s],s.dtype)}},YW=et({opSnippet:Jn+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),JW={kernelName:bi,backendName:"webgl",kernelFunc:YW},tG=et({opSnippet:Jn+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),nG={kernelName:wi,backendName:"webgl",kernelFunc:tG},xI="return a + b;",sG=cn({opSnippet:xI,packedOpSnippet:xI,supportsComplex:!0,cpuKernelImpl:cU}),rG={kernelName:_o,backendName:"webgl",kernelFunc:sG};class oG{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((o,i)=>`T${i}`);const s=[];this.variableNames.forEach(o=>{s.push(`float v${o} = get${o}AtOutCoords();`)});const r=this.variableNames.map(o=>`v${o}`).join(" + ");this.userCode=`\n      void main() {\n        ${s.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class iG{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((o,i)=>`T${i}`);const s=[];this.variableNames.forEach(o=>{s.push(`vec4 v${o} = get${o}AtOutCoords();`)});const r=this.variableNames.map(o=>`v${o}`).join(" + ");this.userCode=`\n      void main() {\n        ${s.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const aG={kernelName:dl,backendName:"webgl",kernelFunc:function eh(n){const{inputs:t,backend:e}=n,s=t;if(1===s.length)return zn({inputs:{x:s[0]},backend:e});if(s.length>W().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const l=Math.floor(s.length/2),u=eh({inputs:s.slice(0,l),backend:e}),c=eh({inputs:s.slice(l),backend:e});return eh({inputs:[u,c],backend:e})}const r=s.map(l=>l.dtype).reduce((l,u)=>Fn(l,u)),o=s.map(l=>l.shape),a=W().getBool("WEBGL_PACK")?new iG(s[0].shape,o):new oG(s[0].shape,o);return e.runWebGLProgram(a,s,r)}},uG={kernelName:"All",backendName:"webgl",kernelFunc:function lG(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:i}=s,a=r.shape.length,l=Ge(o,r.shape);let u=l;const c=Tt(u,a);let h=r;null!=c&&(h=Nn({inputs:{x:r},backend:e,attrs:{perm:c}}),u=Lt(u.length,a)),ln("all",u,a);const[d,p]=nn(h.shape,u),g=ce({inputs:{x:h},backend:e,attrs:{shape:[-1,Q(p)]}}),m=Io(g,g.dtype,"all",e);let A;return A=ce(i?{inputs:{x:m},backend:e,attrs:{shape:Ot(d,l)}}:{inputs:{x:m},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),null!=c&&e.disposeIntermediateTensorInfo(h),A}},hG={kernelName:"Any",backendName:"webgl",kernelFunc:function cG(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:i}=s,a=r.shape.length,l=Ge(o,r.shape);let u=l;const c=Tt(u,a);let h=r;null!=c&&(h=Nn({inputs:{x:r},backend:e,attrs:{perm:c}}),u=Lt(u.length,a)),ln("any",u,a);const[d,p]=nn(h.shape,u),g=ce({inputs:{x:h},backend:e,attrs:{shape:[-1,Q(p)]}}),m=Io(g,g.dtype,"any",e);let A;return A=ce(i?{inputs:{x:m},backend:e,attrs:{shape:Ot(d,l)}}:{inputs:{x:m},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),null!=c&&e.disposeIntermediateTensorInfo(h),A}};class dG{constructor(t,e,s){this.variableNames=["A"];const{windowSize:r,batchSize:o,outSize:i}=t;s||this.variableNames.push("bestIndicesA"),this.outputShape=[o,i],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${s?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));"};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${"max"===e?">":"<"} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class pG{constructor(t,e,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,v(t.length>2,()=>`Packed arg${s.charAt(0).toUpperCase()+s.slice(1)} supports only inputs with rank above 2.`);const i=Math.ceil(t[t.length-1]/e);this.outputShape=t.slice(0,-1),i>1&&this.outputShape.push(i),r||this.variableNames.push("bestIndicesA");const a=this.outputShape,l=a.length,u=ct(l),c=Sn("coords",l);let h,d;if(1===i){d=l+1;const E=ct(d);h=`\n        ${E} sourceLocR = ${E}(${c.join()}, 0);\n        ++${c[l-1]};\n        ${E} sourceLocG = ${E}(${c.join()}, 0);\n        ++${c[l-2]};\n        ${E} sourceLocA = ${E}(${c.join()}, 0);\n        --${c[l-1]};\n        ${E} sourceLocB = ${E}(${c.join()}, 0);\n        --${c[l-2]};`}else d=l,h=`\n        ${u} sourceLocR = coords;\n        ++${c[l-1]};\n        ${u} sourceLocG = coords;\n        ++${c[l-2]};\n        ${u} sourceLocA = coords;\n        --${c[l-1]};\n        ${u} sourceLocB = coords;\n        --${c[l-2]};`;const p=["x","y","z","w","u","v"].slice(0,d),f="."+p[d-1],g=p.map(E=>"int "+E),m=Sn("sourceLocR",d-1).concat("inIdx.r"),A=Sn("sourceLocG",d-1).concat("inIdx.g"),y=Sn("sourceLocB",d-1).concat("inIdx.b"),x=Sn("sourceLocA",d-1).concat("inIdx.a"),b="max"===s?"greaterThan":"lessThan",I=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${A.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${x.join()})));`,S=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${A.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${x.join()}) : 0.)`,k=r?"":`\n      float getBestIndicesAChannel(${g.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${g.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${k}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${c[l-1]} < ${a[l-1]-1};\n        bool hasNextRow = ${c[l-2]} < ${a[l-2]-1};\n        ${h}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${S};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${I}\n          vec4 candidate = ${S};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${b}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function bI(n,t,e,s=null){let r=t.shape[0],o=t.shape[1];null!=s&&(r=s.shape[0],o=s.shape[1]);const i=Yu(o),a={windowSize:i,inSize:o,batchSize:r,outSize:Math.ceil(o/i)},l=new dG(a,e,null==s),u=[t];null!=s&&u.push(s);const c=n.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=bI(n,t,e,c);return n.disposeIntermediateTensorInfo(c),h}function wI(n,t,e,s=null){const r=null!=s?s.shape:t.shape,i=Yu(r[r.length-1]),a=new pG(r,i,e,null==s),u=n.runWebGLProgram(a,null==s?[t]:[t,s],"int32");if(u.shape.length===t.shape.length){const c=wI(n,t,e,u);return n.disposeIntermediateTensorInfo(u),c}return u}function II(n,t,e,s){const r=[e];if(ln("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!W().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const o=[],i=n.texData.get(t.dataId);let l=t;null!==i&&i.isPacked&&(l=n.unpackTensor(t),o.push(l));const[u,c]=nn(l.shape,r),h=Q(c),d=ce({inputs:{x:l},backend:n,attrs:{shape:[-1,h]}});o.push(d);const p=bI(n,d,s);o.push(p);const f=ce({inputs:{x:p},backend:n,attrs:{shape:u}});return o.forEach(g=>n.disposeIntermediateTensorInfo(g)),f}return wI(n,t,s)}const mG={kernelName:pl,backendName:"webgl",kernelFunc:function fG(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;let i=Ge(o,r.shape);const a=Tt(i,r.shape.length);let l=r;const u=[];null!=a&&(l=Nn({inputs:{x:r},backend:e,attrs:{perm:a}}),u.push(l),i=Lt(i.length,l.shape.length)),ln("argMax",[i[0]],l.shape.length);const c=II(e,l,i[0],"max");return u.forEach(h=>e.disposeIntermediateTensorInfo(h)),c}},AG={kernelName:fl,backendName:"webgl",kernelFunc:function gG(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;let i=Ge(o,r.shape);const a=Tt(i,r.shape.length);let l=r;const u=[];null!=a&&(l=Nn({inputs:{x:r},backend:e,attrs:{perm:a}}),u.push(l),i=Lt(i.length,l.shape.length)),ln("argMin",[i[0]],l.shape.length);const c=II(e,l,i[0],"min");return u.forEach(h=>e.disposeIntermediateTensorInfo(h)),c}},xG=et({opSnippet:Jn+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),bG={kernelName:Ii,backendName:"webgl",kernelFunc:xG},IG=et({opSnippet:Jn+"return log(x + sqrt(x * x + 1.0));"}),CG={kernelName:Ci,backendName:"webgl",kernelFunc:IG},SG=et({opSnippet:Jn+"\n  return atan(x);\n"}),NG={kernelName:vi,backendName:"webgl",kernelFunc:SG},EG=cn({opSnippet:sg+"\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+wo+"\n  return result;\n"}),_G={kernelName:Ni,backendName:"webgl",kernelFunc:EG},RG=et({opSnippet:Jn+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),$G={kernelName:Si,backendName:"webgl",kernelFunc:RG};class ol{constructor(t,e,s,r=!1,o=!1){if(this.variableNames=["x"],"avg"===e&&s)throw new Error("Cannot compute positions for average pool.");const i=t.filterWidth,a=t.strideHeight,l=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,h=t.effectiveFilterHeight,d=t.effectiveFilterWidth,p=t.padInfo.top,f=t.padInfo.left;this.outputShape=t.outShape;const g="avg"===e;let y="0.0";if(g||(y="-1.0 / 1e-20"),s)return void(this.userCode=`\n        const ivec2 strides = ivec2(${a}, ${l});\n        const ivec2 pads = ivec2(${p}, ${f});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${h};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d};\n                wC += ${c}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?o?`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`:`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`:`wR * ${d} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let b=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(b="avgValue / max(count, 1.0)");const I=4*Math.floor(i/4),S=i%4,k=`\n      if (${g}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${a}, ${l});\n      const ivec2 pads = ivec2(${p}, ${f});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${h};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${I}; wC += 4) {\n            int xC = xCCorner + wC * ${c};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              getValue(batch, xR, xC + 3 * ${c}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${I};\n          if (${1===S}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===S}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===S}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class og{constructor(t,e,s,r=!1,o=!1){if(this.variableNames=["x"],"avg"===e&&s)throw new Error("Cannot compute positions for average pool.");const i=t.filterWidth,a=t.strideDepth,l=t.strideHeight,u=t.strideWidth,c=t.dilationDepth,h=t.dilationHeight,d=t.dilationWidth,p=t.effectiveFilterDepth,f=t.effectiveFilterHeight,g=t.effectiveFilterWidth,m=t.padInfo.front,A=t.padInfo.top,y=t.padInfo.left;this.outputShape=t.outShape;const x="avg"===e;let b="0.0";if(x||(b="-1.0 / 1e-20"),s)return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${a}, ${l}, ${u});\n        const ivec3 pads = ivec3(${m}, ${A}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${c}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${f};\n                wR += ${h}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${g};\n                  wC += ${d}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?o?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${f} * ${g} +\n                      wR * ${g} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let S=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(S="avgValue / max(count, 1.0)");const k=4*Math.floor(i/4),E=i%4,D=`\n      if (${x}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${a}, ${l}, ${u});\n      const ivec3 pads = ivec3(${m}, ${A}, ${y});\n      const float initializationValue = ${b};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${b});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${c}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${f};\n            wR += ${h}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${d};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${d}, ch)\n              );\n\n              ${D}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===E}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${D}\n            } else if (${2===E}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${D}\n            } else if (${3===E}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                initializationValue\n              );\n\n              ${D}\n            }\n          }\n        }\n        setOutput(${S});\n      }\n    `}}const OG={kernelName:ml,backendName:"webgl",kernelFunc:function FG(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;nl(r,"avgPool");const{filterSize:o,strides:i,pad:a,dimRoundingMode:l}=s;v(an(i,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const c=os(r.shape,o,i,1,a,l);if(1===c.filterWidth&&1===c.filterHeight&&Qe(c.inShape,c.outShape))return zn({inputs:{x:r},backend:e});const h=new ol(c,"avg",!1);return e.runWebGLProgram(h,[r],"float32")}},PG={kernelName:gl,backendName:"webgl",kernelFunc:function LG(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:i,pad:a,dimRoundingMode:l,dataFormat:u}=s,h=Qs(r.shape,o,i,[1,1,1],a,l,u),d=new og(h,"avg",!1);return e.runWebGLProgram(d,[r],"float32")}};class MG{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const l=t.effectiveFilterHeight,u=t.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${l-1-t.padInfo.top}, ${u-1-t.padInfo.left});\n      const float avgMultiplier = float(${1/(t.filterHeight*t.filterWidth)});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${l};\n            wR += ${t.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${t.dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class BG{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const h=t.effectiveFilterDepth,d=t.effectiveFilterHeight,p=t.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${h-1-t.padInfo.front}, ${d-1-t.padInfo.top}, ${p-1-t.padInfo.left});\n      const float avgMultiplier = float(${1/(t.filterDepth*t.filterHeight*t.filterWidth)});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${h};\n            wD += ${t.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${t.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${d};\n              wR += ${t.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${t.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const VG={kernelName:yh,backendName:"webgl",kernelFunc:function zG(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,i=o,{filterSize:a,strides:l,pad:u,dimRoundingMode:c}=s,d=Qs(i.shape,a,l,[1,1,1],u,c),p=new BG(d);return e.runWebGLProgram(p,[r],i.dtype)}},WG={kernelName:Ah,backendName:"webgl",kernelFunc:function UG(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,i=o;nl([r,o],"avgPoolGrad");const{filterSize:a,strides:l,pad:u}=s,c=os(i.shape,a,l,1,u),h=new MG(c);return e.runWebGLProgram(h,[r],i.dtype)}},HG={kernelName:Al,backendName:"webgl",kernelFunc:function GG(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o}=t,{transposeA:i,transposeB:a}=s;return Jc({a:r,b:o,transposeA:i,transposeB:a,backend:e})}};class KG{constructor(t,e,s,r,o,i){this.outputShape=[],this.variableNames=["x","mean","variance"],Le(t,e),Le(t,s);let a="0.0";null!=r&&(Le(t,r),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let l="1.0";null!=o&&(Le(t,o),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${a};\n        float scale = ${l};\n        float inv = scale * inversesqrt(variance + float(${i}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class qG{constructor(t,e,s,r,o,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Le(t,e),Le(t,s);let a="vec4(0.0)";null!=r&&(Le(t,r),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let l="vec4(1.0)";null!=o&&(Le(t,o),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${a};\n        vec4 scale = ${l};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${i}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const jG={kernelName:_l,backendName:"webgl",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,mean:r,variance:o,offset:i,scale:a}=n;v(r.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),v(null==i||r.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),v(null==a||r.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=e;null==l&&(l=.001);const u=[s,r,o];let c=null;null!=i&&(c=i.shape,u.push(i));let h=null;null!=a&&(h=a.shape,u.push(a));const d=W().getBool("WEBGL_PACK_NORMALIZATION")?new qG(s.shape,r.shape,o.shape,c,h,l):new KG(s.shape,r.shape,o.shape,c,h,l);return t.runWebGLProgram(d,u,u[0].dtype)}};class QG{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=ct(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const s=function XG(n){if(1===n)return"sourceLoc";if(n<=6)return ig.slice(0,n).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${n} is not yet supported`)}(this.rank);let r;r=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map((i,a)=>`sourceLoc.${ig[a]} = start[${a}] + coords.${ig[a]};`).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${r}\n        setOutput(getSource(${s}));\n      }\n    `}}const ig=["x","y","z","w","u","v"];class ZG{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const e=ct(this.rank),s=Sn("coords",this.rank),r=Sn("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,i=`getChannel(getSource(${r.join()}), ${o})`,a=`\n      result.x = ${i};\n      if (++${s[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${i};\n        --${r[this.rank-1]};\n      }\n    `,l=1===this.rank?"":`\n      --${s[this.rank-1]};\n      if (++${s[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${i};\n        if (++${s[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${i};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map((c,h)=>`start[${h}]`).join()});`:t.map((c,h)=>`${r[h]} = ${s[h]} + start[${h}];`).join("\n");this.userCode=`\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${a}\n        ${l}\n        setOutput(result);\n      }\n    `}}function gi(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,size:i}=s,[a,l]=Tu(r,o,i);if(op(r,a,l),0===Q(l))return e.makeTensorInfo(l,r.dtype,[]);if(e.shouldExecuteOnCPU([r])||"string"===r.dtype){const h=e.texData.get(r.dataId),d=UU(h.values,a,l,r.shape,r.dtype);return e.makeTensorInfo(l,r.dtype,d)}const{isPacked:u}=e.texData.get(r.dataId),c=ap(r.shape,a,l);if(u||!c){const h=W().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ZG(l):new QG(l);return e.runWebGLProgram(h,[r],r.dtype,[a])}return e.uploadToGPU(r.dataId),function YG(n,t,e,s){const r=s.texData.get(n.dataId),o=s.makeTensorInfo(e,n.dtype),i=s.texData.get(o.dataId);Object.assign(i,r),i.refCount=1,i.shape=e,i.dtype=n.dtype;let a=lp(t,Ne(n.shape));r.slice&&(a+=r.slice.flatOffset),i.slice={flatOffset:a,origDataId:r.slice&&r.slice.origDataId||n.dataId};const l=s.dataRefCount.get(i.slice.origDataId)||1;return s.dataRefCount.set(i.slice.origDataId,l+1),o}(r,a,l,e)}const JG={kernelName:ou,backendName:"webgl",kernelFunc:gi},e4={kernelName:yl,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,crops:i}=s;v(r.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const a=o.reduce((y,x)=>y*x),l=Oa(r.shape,o,a),u=La(l.length,o.length),c=Pa(r.shape,o,a),h=uf(i,o.length),d=cf(c,i,o.length),p=[],f=ce({inputs:{x:r},backend:e,attrs:{shape:l}}),g=Nn({inputs:{x:f},backend:e,attrs:{perm:u}}),m=ce({inputs:{x:g},backend:e,attrs:{shape:c}}),A=gi({inputs:{x:m},backend:e,attrs:{begin:h,size:d}});return p.push(f),p.push(g),p.push(m),p.forEach(y=>e.disposeIntermediateTensorInfo(y)),A}},n4={kernelName:xh,backendName:"webgl",kernelFunc:function t4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:i}=s,a=e.readSync(r.dataId),l=e.readSync(o.dataId),u=Jw(a,l,o.dtype,o.shape,i);return e.makeTensorInfo([i],o.dtype,u)}},i4={kernelName:xl,backendName:"webgl",kernelFunc:function o4(n){const{inputs:t,backend:e}=n,{a:s,b:r}=t,o=W().getBool("WEBGL_PACK_BINARY_OPERATIONS"),i=W().getNumber("WEBGL_VERSION");if(e.shouldExecuteOnCPU([s,r])||1===i){const l=e.texData.get(s.dataId).values,u=e.texData.get(r.dataId).values,[c,h]=dU(s.shape,r.shape,l,u,s.dtype),d=e.makeTensorInfo(h,s.dtype);return e.texData.get(d.dataId).values=c,d}let a;return a=o?new fi("\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n",s.shape,r.shape,!1):new bo("\n  return float(int(a.r) & int(b.r));\n",s.shape,r.shape),e.runWebGLProgram(a,[s,r],s.dtype)}},l4={kernelName:bh,backendName:"webgl",kernelFunc:function a4(n){const{inputs:t,backend:e}=n,{s0:s,s1:r}=t,o=e.readSync(s.dataId),i=e.readSync(r.dataId),a=Le(Array.from(o),Array.from(i));return e.makeTensorInfo([a.length],"int32",Int32Array.from(a))}},CI=cn({opSnippet:"return float(a != b);",cpuKernelImpl:$U,dtype:"bool"}),u4={kernelName:ql,backendName:"webgl",kernelFunc:CI};function il(n){const{inputs:t,backend:e}=n,{input:s}=t;return zn({inputs:{x:e.texData.get(s.dataId).complexTensorInfos.real},backend:e})}const c4={kernelName:nd,backendName:"webgl",kernelFunc:il},p4={kernelName:Ti,backendName:"webgl",kernelFunc:function ag(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dtype:o}=s;if("complex64"===o){if("complex64"===r.dtype)return zn({inputs:{x:r},backend:e});const i=qt(r.shape),a=ag({inputs:{x:r},backend:e,attrs:{dtype:"float32"}}),l=Mr({inputs:{real:a,imag:i},backend:e});return i.dispose(),e.disposeIntermediateTensorInfo(a),l}if("complex64"===r.dtype){const i=il({inputs:{input:r},backend:e}),a=ag({inputs:{x:i},backend:e,attrs:{dtype:o}});return e.disposeIntermediateTensorInfo(i),a}if(!gg(r.dtype,o)){const i=zn({inputs:{x:r},backend:e});return{dataId:i.dataId,shape:i.shape,dtype:o}}if(e.shouldExecuteOnCPU([r])){const i=e.texData.get(r.dataId).values,[a,l,u]=pU(i,r.shape,r.dtype,o);return e.makeTensorInfo(a,l,u)}if("int32"===o)return function d4(n,t){const e=new Ks(n.shape,"return float(int(x));"),s=t.runWebGLProgram(e,[n],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(r,e);if("bool"===o){const i=e.makeTensorInfo([],"bool",on("bool",1)),l=CI({inputs:{a:r,b:i},backend:e});return e.disposeIntermediateTensorInfo(i),l}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${o}`)}},vI="return ceil(x);",f4=et({opSnippet:vI,packedOpSnippet:vI,cpuKernelImpl:fU}),m4={kernelName:ki,backendName:"webgl",kernelFunc:f4};class g4{constructor(t){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class A4{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const x4={kernelName:Ei,backendName:"webgl",kernelFunc:function y4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{clipValueMin:o,clipValueMax:i}=s;let a;return a=W().getBool("WEBGL_PACK_CLIP")?new A4(r.shape):new g4(r.shape),e.runWebGLProgram(a,[r],r.dtype,[[o],[i]])}};class b4{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function SI(n,t){return{dataId:t.dataId,dtype:t.dtype,shape:n.shape}}const I4={kernelName:bl,backendName:"webgl",kernelFunc:function w4(n){const{inputs:t,backend:e}=n,{x:s}=t,r=e.texData.get(s.dataId),o=new b4(s.shape),i=[SI(s,r.complexTensorInfos.real),SI(s,r.complexTensorInfos.imag)];return e.runWebGLProgram(o,i,i[0].dtype)}};class C4{constructor(t){this.outputShape=[],this.outputShape=Ls(t,1),this.variableNames=t.map((i,a)=>`T${a}`);const e=new Array(t.length-1);e[0]=t[0][1];for(let i=1;i<e.length;i++)e[i]=e[i-1]+t[i][1];const s=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let i=1;i<e.length;i++)s.push(`else if (yC < ${e[i]}) setOutput(getT${i}(yR, yC-${e[i-1]}));`);s.push(`else setOutput(getT${e.length}(yR, yC-${e[e.length-1]}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${s.join("\n        ")}\n      }\n    `}}class v4{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Ls(t,e);const s=this.outputShape,r=s.length,o=ct(r),i=Sn("coords",r),a=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((g,m)=>`T${m}`);const l=new Array(t.length-1);l[0]=t[0][e];for(let g=1;g<l.length;g++)l[g]=l[g-1]+t[g][e];const u=a[e],c=a.slice(-2),h=a.join();let d=`if (${u} < ${l[0]}) {\n        return getChannel(\n            getT0(${h}), vec2(${c.join()}));\n        }`;for(let g=1;g<l.length;g++){const m=l[g-1];d+=`\n        if (${u} < ${l[g]}  && ${u} >= ${l[g-1]}) {\n          return getChannel(\n            getT${g}(${th(a,u,m)}),\n            vec2(${th(c,u,m)}));\n        }`}const f=l[l.length-1];d+=`\n        return getChannel(\n          getT${l.length}(${th(a,u,f)}),\n          vec2(${th(c,u,f)}));`,this.userCode=`\n      float getValue(${a.map(g=>"int "+g)}) {\n        ${d}\n      }\n\n      void main() {\n        ${o} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${i}), 0., 0., 0.);\n\n        ${i[r-1]} = ${i[r-1]} + 1;\n        if (${i[r-1]} < ${s[r-1]}) {\n          result.g = getValue(${i});\n        }\n\n        ${i[r-2]} = ${i[r-2]} + 1;\n        if (${i[r-2]} < ${s[r-2]}) {\n          result.a = getValue(${i});\n        }\n\n        ${i[r-1]} = ${i[r-1]} - 1;\n        if (${i[r-2]} < ${s[r-2]} &&\n            ${i[r-1]} < ${s[r-1]}) {\n          result.b = getValue(${i});\n        }\n        setOutput(result);\n      }\n    `}}function th(n,t,e){const s=n.indexOf(t);return n.map((o,i)=>i===s?`${o} - ${e}`:o).join()}function nh(n){const{inputs:t,backend:e}=n,{input:s}=t;return zn({inputs:{x:e.texData.get(s.dataId).complexTensorInfos.imag},backend:e})}const S4={kernelName:Uh,backendName:"webgl",kernelFunc:nh};function al(n,t,e){const s=n[0].dtype;if("complex64"===s){const p=n.map(y=>il({inputs:{input:y},backend:e})),f=n.map(y=>nh({inputs:{input:y},backend:e})),g=al(p,t,e),m=al(f,t,e),A=Mr({inputs:{real:g,imag:m},backend:e});return p.forEach(y=>e.disposeIntermediateTensorInfo(y)),f.forEach(y=>e.disposeIntermediateTensorInfo(y)),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),A}let r=e.shouldExecuteOnCPU(n);if("string"===s&&(r=!0),r){const p=n.map(b=>{const S=[-1,Q(b.shape.slice(t))];return ce({inputs:{x:b},backend:e,attrs:{shape:S}})}),f=p.map(b=>({vals:e.readSync(b.dataId),shape:b.shape})),g=Ls(p.map(b=>b.shape),1),A=mU(f,g,s,1===p[0].shape[0]),y=Ls(n.map(b=>b.shape),t),x=e.makeTensorInfo(y,s,A);return p.forEach(b=>e.disposeIntermediateTensorInfo(b)),x}const o=n.filter(p=>Q(p.shape)>0),i=W().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&o[0].shape.length>1;if(1===o.length){const p=i?new Ks(n[0].shape,Lr):new Pr(n[0].shape,Lr);return e.runWebGLProgram(p,n,s)}const a=W().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(o.length>a){const p=[];for(let g=0;g<o.length;g+=a){const m=o.slice(g,g+a);p.push(al(m,t,e))}const f=al(p,t,e);for(const g of p)e.disposeIntermediateTensorInfo(g);return f}if(i){const p=new v4(o.map(f=>f.shape),t);return e.runWebGLProgram(p,o,s)}const{tensors2D:l,outShape:u}=function N4(n,t,e){const s=Ls(n.map(o=>o.shape),t);return{tensors2D:n.map(o=>ce({inputs:{x:o},attrs:{shape:[-1,Q(o.shape.slice(t))]},backend:e})),outShape:s}}(o,t,e),c=new C4(l.map(p=>p.shape)),h=e.runWebGLProgram(c,l,s);l.forEach(p=>e.disposeIntermediateTensorInfo(p));const d=ce({inputs:{x:h},attrs:{shape:u},backend:e});return e.disposeIntermediateTensorInfo(h),d}function NI(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s,o=Ge(r,t[0].shape)[0];of(t.map(u=>u.shape),o);const a=Ls(t.map(u=>u.shape),o);if(0===Q(a))return e.makeTensorInfo(a,t[0].dtype,[]);const l=t.filter(u=>Q(u.shape)>0);return 1===l.length?zn({inputs:{x:l[0]},backend:e}):al(l,o,e)}const T4={kernelName:wl,backendName:"webgl",kernelFunc:NI};class TI{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const i=t.padInfo.top,a=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,d=t.filterHeight,p=t.filterWidth,f=4*Math.floor(t.inChannels/4),g=t.inChannels%4,m="channelsLast"===t.dataFormat,A=m?1:2,y=m?2:3,x=m?3:1;let b="",I="";s&&(b=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`\n          float activation(float x) {\n            ${s}\n          }\n        `,I="result = activation(result);");const S=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${i}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${x}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${A}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${f}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===g}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${f}) *\n                    getW(wR, wC, ${f}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${f}, xR, xC) *\n                    getW(wR, wC, ${f}, d2);\n              }\n\n            } else if (${2===g}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${f}, d2),\n                getW(wR, wC, ${f} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${f}),\n                  getX(batch, xR, xC, ${f} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${f}, xR, xC),\n                  getX(batch, ${f} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===g}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${f}, d2),\n                getW(wR, wC, ${f} + 1, d2),\n                getW(wR, wC, ${f} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${f}),\n                  getX(batch, xR, xC, ${f} + 1),\n                  getX(batch, xR, xC, ${f} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${f}, xR, xC),\n                  getX(batch, ${f} + 1, xR, xC),\n                  getX(batch, ${f} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${S}\n        ${I}\n        setOutput(result);\n      }\n    `}}class k4{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,s=t.padInfo.top,r=t.padInfo.left,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,l=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,h=t.filterDepth,d=t.filterHeight,p=t.filterWidth,f=4*Math.floor(t.inChannels/4),g=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${o}, ${i}, ${a});\n      const ivec3 pads = ivec3(${e}, ${s}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${h}; wF++) {\n          int xF = xFCorner + wF * ${l};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${c};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${f}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===g}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${f}) *\n                  getW(wF, wR, wC, ${f}, d2);\n              } else if (${2===g}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===g}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1),\n                  getX(batch, xF, xR, xC, ${f} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2),\n                  getW(wF, wR, wC, ${f} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class kI{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=An(this.outputShape.length);const i=t.padInfo.left,a=t.strideWidth,l=t.dilationWidth,u=t.filterHeight,c=t.filterWidth,h=c;let d="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let m=0;m<c;m++)d+=`\n           vec4 xTexelC${2*m};\n           int xTexelC${2*m}Ready;\n           vec4 xTexelC${2*m+1};\n           int xTexelC${2*m+1}Ready;\n           vec4 xC${m};`;d+=`\n     for (int r = 0; r < ${u}; r++) {\n      for (int d1 = 0; d1 < ${t.inChannels}; d1 += 2) {\n       `;for(let m=0;m<c;m++)d+=`\n           xTexelC${2*m} = vec4(0.0);\n           xTexelC${2*m}Ready = 0;\n           xTexelC${2*m+1} = vec4(0.0);\n           xTexelC${2*m+1}Ready = 0;\n           xC${m} = vec4(0.0);`;d+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let m=0;m<(h+1)/2;m++){const A=2*m;if(d+=`\n           xC = xCCorner + ${A*l};\n           `,1===a){if(A<c&&(i%2==1?(d+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${A}Ready == 0) {\n                   xTexelC${A} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${A}.zw = vec2(0.0);\n                   }\n                   xTexelC${A}Ready = 1;\n                 }\n               `,d+=1===l&&A>0?`\n                 xC${A} = vec4(xTexelC${A-2}.zw, xTexelC${A}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${A} = vec4(previous.zw, xTexelC${A}.xy);\n                   } else {\n                     xC${A} = vec4(0.0, 0.0, xTexelC${A}.xy);\n                   }\n                   `):d+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${A}Ready == 0) {\n                   xTexelC${A} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${A}.zw = vec2(0.0);\n                   }\n                   xTexelC${A}Ready = 1;\n                 }\n\n                 xC${A} = xTexelC${A};\n                 `,A+1<c)){const y=i%2==0?ah(l):l;l%2==0&&i%2==1||l%2!=0&&i%2!=1?(d+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${y};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${A+1}Ready == 0) {\n                     xTexelC${A+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${A+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${A+1}Ready = 1;\n                   }\n                   `,d+=l>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${A+1} = vec4(previous.zw, xTexelC${A+1}.xy);\n                     } else {\n                      xC${A+1} = vec4(0.0, 0.0, xTexelC${A+1}.xy);\n                     }\n                     `:`\n                     xC${A+1} = vec4(xTexelC${A}.zw, xTexelC${A+1}.xy);\n                     `):d+=1===y?`\n                     xC${A+1} = xTexelC${A};\n                     `:`\n                     xCOffset = xC + ${y};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${A+1}Ready == 0) {\n                       xTexelC${A+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${A+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${A+1}Ready = 1;\n                     }\n\n                     xC${A+1} = xTexelC${A+1};\n                     `}}else A<c&&(i%2==1?(d+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${A}Ready == 0) {\n                   xTexelC${A} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${A}.zw = vec2(0.0);\n                   }\n                   xTexelC${A}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${A+1}Ready == 0) {\n                   xTexelC${A+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${A+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${A+1}Ready = 1;\n                 }\n\n                 xC${A} = vec4(xTexelC${A}.zw, xTexelC${A+1}.zw);\n               `,A+1<c&&(d+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${A+1} = vec4(xTexelC${A+1}.xy, final.xy);\n                 `)):(d+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${A}Ready == 0) {\n                   xTexelC${A} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${A}.zw = vec2(0.0);\n                   }\n                   xTexelC${A}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${A+1}Ready == 0) {\n                   xTexelC${A+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${A+1}.zw = vec2(0.);\n                   }\n                   xTexelC${A+1}Ready = 1;\n                 }\n\n                 xC${A} = vec4(\n                   xTexelC${A}.xy, xTexelC${A+1}.xy);\n               `,A+1<c&&(d+=`\n                   xC${A+1} = vec4(xTexelC${A}.zw, xTexelC${A+1}.zw);\n                 `)));A<c&&(d+=`\n             wTexel = getW(r, ${A}, d1, d2);\n             dotProd += xC${A}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${t.inChannels}) {\n               dotProd += xC${A}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,A+1<c&&(d+=`\n               wTexel = getW(r, ${A+1}, d1, d2);\n               dotProd += xC${A+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${t.inChannels}) {\n                 dotProd += xC${A+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}d+="\n     }\n   ",d+="\n     }\n   ",d+="\n     }\n   ";let p="",f="";s&&(p=r?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${s}\n         }`:o?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${s}\n         }`:`vec4 activation(vec4 x) {\n           ${s}\n         }`,f="result = activation(result);");const g=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${p}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${d}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${g}\n         ${f}\n         setOutput(result);\n       }\n     `}}class E4{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=t,this.enableShapeUniforms=An(this.outputShape.length);const{dataFormat:s}=e,r=vn(),o="channelsLast"===s,i=o?1:2,a=o?2:3,l=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${t[2]} && pos < ${t[1]}) {`;let u="";for(let c=0;c<=1;c++)for(let h=0;h<=1;h++)u+=`\n          blockIndex = rc.z + ${h};\n          pos = rc.y + ${c};\n\n          ${l}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${i}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${a}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${o}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*c+h}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*c+h}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${u}\n\n        ${r.output} = result;\n      }\n    `}}function sh(n,t){const e=n.length;return e>=3?t?[...n.slice(0,-3),n[e-3]*n[e-2],n[e-1]]:[...n.slice(0,-3),n[e-3],n[e-2]*n[e-1]]:!t&&1===e&&n[0]>1?[n[0],1]:null}function EI({x:n,filter:t,convInfo:e,backend:s,bias:r=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:a=null}){const l=n.shape,u=s.texData.get(n.dataId),c=e.inChannels,h=l[0]*l[1]*l[2],d=e.outChannels,p="channelsLast"===e.dataFormat;let m;const A=[];if(null!=o){const b=sh(o.shape,p);null!=b&&(o=ce({inputs:{x:o},backend:s,attrs:{shape:b}}),A.push(o))}if(null!=r){const b=sh(r.shape,p);null!=b&&(r=ce({inputs:{x:r},backend:s,attrs:{shape:b}}),A.push(r))}if((1!==h&&1!==d||!(c>AI))&&u.isPacked&&p&&null!=u.texture&&l[2]%2!=0&&Qe(u.shape.slice(-3),l.slice(-3))){const I={dataId:n.dataId,shape:[1,l[0]*l[1]*(l[2]+1),e.inChannels],dtype:n.dtype},S=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,v(Hc(u.shape,I.shape),()=>`packed reshape ${u.shape} to ${I.shape} isn't free`);const k=ce({inputs:{x:t},backend:s,attrs:{shape:[1,e.inChannels,e.outChannels]}});A.push(k);const E=Jc({a:I,b:k,backend:s,transposeA:!1,transposeB:!1,bias:r,activation:a,preluActivationWeights:o,leakyreluAlpha:i}),D=s.texData.get(E.dataId);v(D.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=S,D.shape=e.outShape,m=zn({inputs:{x:E},backend:s}),m.shape=e.outShape,A.push(E)}else{const b=e.outHeight*e.outWidth,I=ce({inputs:{x:n},backend:s,attrs:{shape:p?[e.batchSize,b,e.inChannels]:[e.batchSize,e.inChannels,b]}}),S=ce({inputs:{x:t},backend:s,attrs:{shape:[1,e.inChannels,e.outChannels]}}),k=Jc({a:p?I:S,b:p?S:I,transposeA:!p,transposeB:!1,backend:s,bias:r,activation:a,preluActivationWeights:o,leakyreluAlpha:i});m=ce({inputs:{x:k},backend:s,attrs:{shape:e.outShape}}),A.push(I),A.push(S),A.push(k)}for(const b of A)s.disposeIntermediateTensorInfo(b);return m}function _I({x:n,filter:t,convInfo:e,backend:s,bias:r=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:a=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:d,dataFormat:p}=e,f="channelsLast"===p,g=l*u*c,m=d*h,A=[e.batchSize,g,m],b=[];if(null!=o){const K=sh(o.shape,f);null!=K&&(o=ce({inputs:{x:o},backend:s,attrs:{shape:K}}),b.push(o))}if(null!=r){const K=sh(r.shape,f);null!=K&&(r=ce({inputs:{x:r},backend:s,attrs:{shape:K}}),b.push(r))}const I=ce({inputs:{x:t},backend:s,attrs:{shape:[1,g,Q(t.shape)/g]}});b.push(I);const S=new E4(A,e),E=s.runWebGLProgram(S,[n],"float32",[n.shape,[e.padInfo.top,e.padInfo.left],[e.strideHeight,e.strideWidth],[e.dilationHeight,e.dilationWidth],[e.inChannels],[e.filterWidth*e.inChannels],[e.outWidth]]),D=ce({inputs:{x:E},backend:s,attrs:{shape:A}});b.push(E),b.push(D);const O=null!=r,C=null!=o,T="leakyrelu"===a,_=a?rl(a,!0):null,P=new dI(f?D.shape:I.shape,f?I.shape:D.shape,f?[e.batchSize,m,e.outChannels]:[e.batchSize,e.outChannels,m],!0,!1,O,_,C,T),z=f?[D,I]:[I,D];if(r&&z.push(r),C&&z.push(o),T){const K=s.makeTensorInfo([],"float32",cr(i,"float32"));z.push(K),b.push(K)}const V=s.runWebGLProgram(P,z,"float32"),H=ce({inputs:{x:V},backend:s,attrs:{shape:e.outShape}});b.push(V);for(const K of b)s.disposeIntermediateTensorInfo(K);return H}const D4={kernelName:Il,backendName:"webgl",kernelFunc:function _4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:i,pad:a,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=Xs(l),d=tn(r.shape,o.shape,i,u,a,c,!1,h);let p;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if(d.strideWidth<=2&&"channelsLast"===h&&W().getBool("WEBGL_EXP_CONV")){const g=new kI(d);p=e.runWebGLProgram(g,[r,o],"float32",[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]])}else if(W().getBool("WEBGL_CONV_IM2COL"))p=_I({x:r,filter:o,convInfo:d,backend:e});else{const g=new TI(d);p=e.runWebGLProgram(g,[r,o],"float32")}else p=EI({x:r,filter:o,convInfo:d,backend:e});const f=ce({inputs:{x:p},backend:e,attrs:{shape:d.outShape}});return e.disposeIntermediateTensorInfo(p),f}};class R4{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              ${"channelsLast"===t.dataFormat?"float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);":"float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);"}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class $4{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,s=t.filterWidth,i="channelsLast"===t.dataFormat;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${i?3:1}];\n\n        ivec2 dyCorner = ivec2(coords[${i?1:2}], coords[${i?2:3}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${s} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${i}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class F4{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${t.strideDepth} - ${t.padInfo.front};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class O4{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,s=t.filterHeight,r=t.filterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${e-1-t.padInfo.front}, ${s-1-t.padInfo.top}, ${r-1-t.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${t.strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${s}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${s} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const P4={kernelName:Ih,backendName:"webgl",kernelFunc:function L4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:i,pad:a,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=Xs(l),d=tn(r.shape,c,i,1,a,u,!1,h),p=new R4(d);return e.runWebGLProgram(p,[r,o],"float32")}};class M4{constructor(t){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=t.inShape,this.enableShapeUniforms=An(this.outputShape.length);const e=t.filterHeight,s=t.filterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            int wCPerm = ${s} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${t.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${t.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `}}const z4={kernelName:Cl,backendName:"webgl",kernelFunc:function B4(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{inputShape:i,strides:a,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=Xs(u),d=tn(i,o.shape,a,1,l,c,!1,h);if(W().getBool("WEBGL_PACK")&&"channelsLast"===h){const p=[[d.strideHeight,d.strideWidth]],f=new M4(d);return e.runWebGLProgram(f,[r,o],"float32",p)}{const p=new $4(d);return e.runWebGLProgram(p,[r,o],"float32")}}},U4={kernelName:vl,backendName:"webgl",kernelFunc:function V4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:i,pad:a,dilations:l}=s,u=xr(r.shape,o.shape,i,l,a),c=new k4(u);return e.runWebGLProgram(c,[r,o],"float32")}},G4={kernelName:Ch,backendName:"webgl",kernelFunc:function W4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:i,pad:a,filterShape:l}=s,u=xr(r.shape,l,i,1,a),c=new F4(u);return e.runWebGLProgram(c,[r,o],"float32")}},K4={kernelName:vh,backendName:"webgl",kernelFunc:function H4(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{pad:i,strides:a,inputShape:l}=s,u=xr(l,o.shape,a,1,i),c=new O4(u);return e.runWebGLProgram(c,[r,o],"float32")}},Q4=et({opSnippet:mi+"\n  return cos(x);\n",packedOpSnippet:`\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${wo}\n  return result;\n`}),X4={kernelName:_i,backendName:"webgl",kernelFunc:Q4},Z4=et({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),Y4={kernelName:Di,backendName:"webgl",kernelFunc:Z4};class J4{constructor(t,e,s,r,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[i,a,l,u]=t,[c]=e,[h,d]=s;this.outputShape=[c,h,d,u];const p="bilinear"===r?1:0,[f,g]=[a-1+".0",l-1+".0"],[m,A,y]=h>1?[""+(a-1)/(h-1),"(y2-y1) * height_ratio",`y1*${f} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${f}`],[x,b,I]=d>1?[""+(l-1)/(d-1),"(x2-x1) * width_ratio",`x1*${g} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${g}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${x});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${i}) {\n          return;\n        }\n\n        float height_scale = ${A};\n        float width_scale = ${b};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${f} ) {\n          setOutput(float(${o}));\n          return;\n        }\n        float in_x = ${I};\n        if( in_x < 0.0 || in_x > ${g} ) {\n          setOutput(float(${o}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const eH={kernelName:Nh,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{image:r,boxes:o,boxInd:i}=t,{cropSize:a,method:l,extrapolationValue:u}=s,c=new J4(r.shape,o.shape,a,l,u);return e.runWebGLProgram(c,[r,o,i],"float32")}};var rh=function(n){return n.Prod="*",n.Sum="+",n}(rh||{});class DI{constructor(t,e,s,r){this.op=t,this.outputShape=e,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const o=this.outputShape.length,a=s?this.op===rh.Prod?"1.0":"0.0":`getX(${RI(o,"coords",this.op)})`,l=this.outputShape[this.outputShape.length-1];let u="",c="";s?(u=r?"end != "+(l-1):"end != 0",c=r?"end + 1":"end - 1"):(u=r?`end + pow2 < ${l}`:"end >= pow2",c=r?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${ct(o)} coords = getOutputCoords();\n        int end = ${$I(o,"coords",this.op)};\n        float val = ${a};\n        int pow2 = int(pow(2.0, index));\n        if (${u}) {\n          int idx = ${c};\n          ${$I(o,"coords",this.op)} = idx;\n          val ${this.op}= getX(${RI(o,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function RI(n,t,e){if(1===n)return`${t}`;if(2===n)return`${t}.x, ${t}.y`;if(3===n)return`${t}.x, ${t}.y, ${t}.z`;if(4===n)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`)}function $I(n,t,e){if(1===n)return`${t}`;if(2===n)return`${t}.y`;if(3===n)return`${t}.z`;if(4===n)return`${t}.w`;throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`)}function FI(n,t,e,s,r,o){const i=t.shape.length,a=Tt([s],i);let l=t;null!=a&&(l=Nn({inputs:{x:t},backend:e,attrs:{perm:a}}));const u=Lt(1,i)[0];if(u!==i-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${s}`);const c=l.shape[u];let h=zn({inputs:{x:l},backend:e});for(let d=0;d<=Math.ceil(Math.log2(c))-1;d++){const p=new DI(n,l.shape,!1,o),g=h;h=e.runWebGLProgram(p,[h],h.dtype,[[d]]),e.disposeIntermediateTensorInfo(g)}if(r){const d=new DI(n,l.shape,r,o),p=h;h=e.runWebGLProgram(d,[h],h.dtype),e.disposeIntermediateTensorInfo(p)}if(null!=a){const p=Nn({inputs:{x:h},backend:e,attrs:{perm:Ir(a)}});return e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(l),p}return h}const nH={kernelName:Sh,backendName:"webgl",kernelFunc:function tH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:i,reverse:a}=s;return FI(rh.Prod,r,e,o,i,a)}},rH={kernelName:Sl,backendName:"webgl",kernelFunc:function sH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:i,reverse:a}=s;return FI(rh.Sum,r,e,o,i,a)}},iH={kernelName:Th,backendName:"webgl",kernelFunc:function oH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:i,binaryOutput:a}=s;if(1===r.shape.length){const l=e.readSync(r.dataId),u=e.readSync(o.dataId),c=Jw(l,u,o.dtype,o.shape,i);return e.makeTensorInfo([i],o.dtype,c)}if(2===r.shape.length){const l=e.bufferSync(r),u=e.bufferSync(o),c=hU(l,u,i,a);return e.makeTensorInfo(c.shape,o.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class aH{constructor(t,e,s){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=s,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const uH={kernelName:kh,backendName:"webgl",kernelFunc:function lH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockSize:o,dataFormat:i}=s,a=r.shape[0],h=("NHWC"===i?r.shape[1]:r.shape[2])*o,d=("NHWC"===i?r.shape[2]:r.shape[3])*o,p=("NHWC"===i?r.shape[3]:r.shape[1])/(o*o),g=new aH("NHWC"===i?[a,h,d,p]:[a,p,h,d],o,i);return e.runWebGLProgram(g,[r],r.dtype)}};class OI{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=An(this.outputShape.length);const i=t.filterHeight,a=t.filterWidth,l=t.outChannels/t.inChannels;let u="",c="";s&&(u=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`\n          float activation(float x) {\n            ${s}\n          }\n        `,c="result = activation(result);");const h=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${u}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${l};\n        int q = d2 - d1 * ${l};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${i}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${h}\n        ${c}\n        setOutput(result);\n      }\n    `}}class LI{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=An(this.outputShape.length);const i=t.outChannels/t.inChannels,a=t.padInfo.left,l=t.strideWidth,u=t.dilationWidth,c=t.filterHeight,h=t.filterWidth,d=h;let p="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let A=0;A<h;A++)p+=`\n          vec4 xTexelC${2*A};\n          int xTexelC${2*A}Ready;\n          vec4 xTexelC${2*A+1};\n          int xTexelC${2*A+1}Ready;\n          vec4 xC${A};`;p+=`\n    for (int r = 0; r < ${c}; r++) {\n      `;for(let A=0;A<h;A++)p+=`\n          xTexelC${2*A} = vec4(0.0);\n          xTexelC${2*A}Ready = 0;\n          xTexelC${2*A+1} = vec4(0.0);\n          xTexelC${2*A+1}Ready = 0;\n          xC${A} = vec4(0.0);`;p+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let A=0;A<(d+1)/2;A++){const y=2*A;if(p+=`\n          xC = xCCorner + ${y*u};\n          `,1===l){if(y<h&&(a%2==1?(p+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {\n                  xTexelC${y} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${y}.zw = vec2(0.0);\n                  }\n                  xTexelC${y}Ready = 1;\n                }\n              `,p+=1===u&&y>0?`\n                xC${y} = vec4(xTexelC${y-2}.zw, xTexelC${y}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${y} = vec4(previous.zw, xTexelC${y}.xy);\n                  } else {\n                    xC${y} = vec4(0.0, 0.0, xTexelC${y}.xy);\n                  }\n                  `):p+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {\n                  xTexelC${y} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${y}.zw = vec2(0.0);\n                  }\n                  xTexelC${y}Ready = 1;\n                }\n\n                xC${y} = xTexelC${y};\n                `,y+1<h)){const x=a%2==0?ah(u):u;u%2==0&&a%2==1||u%2!=0&&a%2!=1?(p+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${x};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                    xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${y+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${y+1}Ready = 1;\n                  }\n                  `,p+=u>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${y+1} = vec4(previous.zw, xTexelC${y+1}.xy);\n                    } else {\n                     xC${y+1} = vec4(0.0, 0.0, xTexelC${y+1}.xy);\n                    }\n                    `:`\n                    xC${y+1} = vec4(xTexelC${y}.zw, xTexelC${y+1}.xy);\n                    `):p+=1===x?`\n                    xC${y+1} = xTexelC${y};\n                    `:`\n                    xCOffset = xC + ${x};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                      xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${y+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${y+1}Ready = 1;\n                    }\n\n                    xC${y+1} = xTexelC${y+1};\n                    `}}else y<h&&(a%2==1?(p+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {\n                  xTexelC${y} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${y}.zw = vec2(0.0);\n                  }\n                  xTexelC${y}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${y+1}Ready == 0) {\n                  xTexelC${y+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${y+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${y+1}Ready = 1;\n                }\n\n                xC${y} = vec4(xTexelC${y}.zw, xTexelC${y+1}.zw);\n              `,y+1<h&&(p+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${y+1} = vec4(xTexelC${y+1}.xy, final.xy);\n                `)):(p+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {\n                  xTexelC${y} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${y}.zw = vec2(0.0);\n                  }\n                  xTexelC${y}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                  xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${y+1}.zw = vec2(0.);\n                  }\n                  xTexelC${y+1}Ready = 1;\n                }\n\n                xC${y} = vec4(\n                  xTexelC${y}.xy, xTexelC${y+1}.xy);\n              `,y+1<h&&(p+=`\n                  xC${y+1} = vec4(xTexelC${y}.zw, xTexelC${y+1}.zw);\n                `)));y<h&&(p+=`\n            wTexel = getW(r, ${y}, d1, q);\n            dotProd += xC${y} * vec4(wTexel.xz, wTexel.xz);\n          `,y+1<h&&(p+=`\n              wTexel = getW(r, ${y+1}, d1, q);\n              dotProd += xC${y+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}p+="\n    }\n  ",p+="\n      }\n    ";let f="",g="";s&&(f=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`vec4 activation(vec4 x) {\n          ${s}\n        }`,g="result = activation(result);");const m=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${f}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${p}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${g}\n        setOutput(result);\n      }\n    `}}const hH={kernelName:Nl,backendName:"webgl",kernelFunc:function cH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:i,pad:a,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),v(an(i,c),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);const h=tn(r.shape,o.shape,i,c,a,u,!0);let d;return d=W().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new LI(h):new OI(h),e.runWebGLProgram(d,[r,o],"float32",[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]])}};class dH{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${t.outChannels/t.inChannels} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class pH{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,s=t.filterWidth,l=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${s} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${l}; dm++) {\n              int d2 = d1 * ${l} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const mH={kernelName:Eh,backendName:"webgl",kernelFunc:function fH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,filterShape:c}=s,h=tn(r.shape,c,i,a,l,u,!0),d=new dH(h);return e.runWebGLProgram(d,[r,o],"float32")}},AH={kernelName:_h,backendName:"webgl",kernelFunc:function gH(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,inputShape:c}=s,h=tn(c,o.shape,i,a,l,u,!0),d=new pH(h);return e.runWebGLProgram(d,[r,o],"float32")}};class yH{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const bH={kernelName:Dh,backendName:"webgl",kernelFunc:function xH(n){const{inputs:t,backend:e}=n,{x:s}=t,r=[...s.shape,...s.shape],o=Q(s.shape),i=ce({inputs:{x:s},backend:e,attrs:{shape:[o]}}),a=new yH(o),l=e.runWebGLProgram(a,[i],i.dtype),u=ce({inputs:{x:l},backend:e,attrs:{shape:r}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}};class wH{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const{inHeight:e,inWidth:s,padInfo:r,strideHeight:o,strideWidth:i,filterHeight:a,filterWidth:l,dilationHeight:u,dilationWidth:c}=t,{top:h,left:d}=r;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${i});\n      const ivec2 pads = ivec2(${h}, ${d});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${a}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${e}) {\n            for (int w = 0; w < ${l}; w++) {\n              int wIn = wBeg + w * ${c};\n\n              if (wIn >= 0 && wIn < ${s}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const CH={kernelName:Tl,backendName:"webgl",kernelFunc:function IH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:i,pad:a,dilations:l}=s,u=ba(r.shape,o.shape,i,a,"NHWC",l);let c;const h=new wH(u);c=e.runWebGLProgram(h,[r,o],"float32");const d=ce({inputs:{x:c},backend:e,attrs:{shape:u.outShape}});return e.disposeIntermediateTensorInfo(c),d}},SH={kernelName:Oh,backendName:"webgl",kernelFunc:function vH(n){const{inputs:t,backend:e,attrs:s}=n,{equation:r}=s,o=t,{allDims:i,summedDims:a,idDims:l}=bf(r,o.length);If(i.length,l,o);const{path:u,steps:c}=Cf(a,l),h=c.length;let d=null,p=i.length;const f=[];for(let g=0;g<h;++g){for(const m of c[g]){const{permutationIndices:A,expandDims:y}=wf(p,l[m]);let x;vf(A)?x=o[m]:(x=Nn({inputs:{x:o[m]},backend:e,attrs:{perm:A}}),f.push(x));const b=x.shape.slice();for(let I=0;I<y.length;++I)b.splice(y[I],0,1);Qe(x.shape,b)||(x=ce({inputs:{x},backend:e,attrs:{shape:b}}),f.push(x)),null===d?d=x:(d=rg({inputs:{a:x,b:d},backend:e}),f.push(d))}g<h-1&&(u[g]>=0&&(d=Yc({inputs:{x:d},backend:e,attrs:{axis:u[g]-(i.length-p),keepDims:!1}}),f.push(d)),p--)}for(const g of f)g!==d&&e.disposeIntermediateTensorInfo(g);return d}},NH=et({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),TH={kernelName:$i,backendName:"webgl",kernelFunc:NH},_H={kernelName:Lh,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e}=n,{dy:s,y:r}=t,o=W().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fi("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new bo("return (b >= 0.0) ? a : a * (b + 1.0);",s.shape,r.shape);return e.runWebGLProgram(o,[s,r],s.dtype)}},DH=cn({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:gU}),RH={kernelName:kl,backendName:"webgl",kernelFunc:DH},FH=et({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${df};\n  float a1 = ${pf};\n  float a2 = ${ff};\n  float a3 = ${mf};\n  float a4 = ${gf};\n  float a5 = ${Af};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),OH={kernelName:Fi,backendName:"webgl",kernelFunc:FH},PI=et({opSnippet:mi+"\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:AU,dtype:"float32"}),PH={kernelName:Oi,backendName:"webgl",kernelFunc:PI};function lg(n){const{inputs:t,attrs:e,backend:s}=n,{dim:r}=e,{input:o}=t,i=o.shape.length,a=o.shape.slice();let l=r;return r<0&&(v(-(i+1)<=r,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+r+1),a.splice(l,0,1),ce({inputs:{x:o},backend:s,attrs:{shape:a}})}const MH={kernelName:El,backendName:"webgl",kernelFunc:lg},MI="return exp(x) - 1.0;",BH=et({opSnippet:MI,packedOpSnippet:MI,cpuKernelImpl:yU}),zH={kernelName:Li,backendName:"webgl",kernelFunc:BH};class BI{constructor(t,e,s){this.variableNames=["real","imag"];const r=e[1];this.outputShape=e;const o=s?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,i=s?`${r}.0`:"1.0";let a;if("real"===t)a="return real * expR - imag * expI;";else{if("imag"!==t)throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);a="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${o};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${a}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${i};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function zI(n,t,e){const s=e.texData.get(n.dataId),r=Q(n.shape),o=n.shape[n.shape.length-1],a=ce({inputs:{x:n},backend:e,attrs:{shape:[r/o,o]}}),l=a.shape,u=new BI("real",l,t),c=new BI("imag",l,t),h=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:l},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:l}],d=e.runWebGLProgram(u,h,"float32"),p=e.runWebGLProgram(c,h,"float32"),f=Mr({inputs:{real:d,imag:p},backend:e});e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p);const g=ce({inputs:{x:f},backend:e,attrs:{shape:n.shape}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(f),g}const UH={kernelName:"FFT",backendName:"webgl",kernelFunc:function VH(n){const{inputs:t,backend:e}=n,{input:s}=t;return zI(s,!1,e)}};class WH{constructor(t,e){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function ll(n){const{backend:t,attrs:e}=n,{shape:s,value:r}=e;let{dtype:o}=e;if(o=o||ko(r),"string"===o){const i=Ft(o,Q(s));return i.fill(r),t.makeTensorInfo(s,o,i)}{const i=new WH(s,r);return t.runWebGLProgram(i,[],o,[[r]])}}const GH={kernelName:Mh,backendName:"webgl",kernelFunc:ll};class HH{constructor(t){this.variableNames=["Image"],this.outputShape=[];const e=t[2];this.outputShape=t,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${e} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${e}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const KH={kernelName:Bh,backendName:"webgl",kernelFunc:({inputs:n,backend:t})=>{const{image:e}=n,s=t,r=new HH(e.shape);return s.runWebGLProgram(r,[e],e.dtype)}},VI="return floor(x);",qH=et({opSnippet:VI,packedOpSnippet:VI,cpuKernelImpl:xU}),jH={kernelName:Pi,backendName:"webgl",kernelFunc:qH},QH=cn({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),XH={kernelName:Mi,backendName:"webgl",kernelFunc:QH};class ZH{constructor(t){this.variableNames=["A"];const e=vn(),[s,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${s}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class YH{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=vn(),[s,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${s}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const JH={kernelName:wd,backendName:"webgl",kernelFunc:function eK(n){const{inputs:t,backend:e,attrs:s}=n;let{pixels:r}=t;const{numChannels:o}=s,i=typeof HTMLVideoElement<"u"&&r instanceof HTMLVideoElement,a=typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement,[l,u]=i?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[u,l],h=[u,l,o];if(a||i){const g=W().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(null==Ai||g!==ug)&&(ug=g,Ai=document.createElement("canvas").getContext("2d",{willReadFrequently:ug})),Ai.canvas.width=l,Ai.canvas.height=u,Ai.drawImage(r,0,0,l,u),r=Ai.canvas}const d=e.makeTensorInfo(c,"int32");e.texData.get(d.dataId).usage=fs.PIXELS,e.gpgpu.uploadPixelDataToTexture(e.getTexture(d.dataId),r);const p=W().getBool("WEBGL_PACK")?new YH(h):new ZH(h),f=e.runWebGLProgram(p,[d],"int32");return e.disposeData(d.dataId),f}};let Ai,ug=W().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const nK={kernelName:mu,backendName:"webgl",kernelFunc:function tK(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s,g=Xs(c),m=tn(r.shape,o.shape,l,h,u,d,!1,g);let A;const y=[],x=null!=i,b=null!=a,I="leakyrelu"===p,S=()=>{const E=[r,o],D=(O,C)=>{if("NCHW"===C&&1===O.shape.length&&1!==O.shape[0]){const T=ce({inputs:{x:O},backend:e,attrs:{shape:[O.shape[0],1,1]}});return y.push(T),T}return O};if(x&&E.push(D(i,c)),b&&E.push(D(a,c)),I){const O=e.makeTensorInfo([],"float32",cr(f,"float32"));E.push(O),y.push(O)}return E};if(1!==m.filterHeight||1!==m.filterWidth||1!==m.dilationHeight||1!==m.dilationWidth||1!==m.strideHeight||1!==m.strideWidth||"SAME"!==m.padInfo.type&&"VALID"!==m.padInfo.type)if(m.strideWidth<=2&&"channelsLast"===g&&W().getBool("WEBGL_EXP_CONV")){const E=p?rl(p,!0):null,D=new kI(m,x,E,b,I),O=[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]],C=S();A=e.runWebGLProgram(D,C,"float32",O)}else if(W().getBool("WEBGL_CONV_IM2COL"))A=_I({x:r,filter:o,convInfo:m,backend:e,bias:i,activation:p,preluActivationWeights:a,leakyreluAlpha:f});else{const E=p?rl(p,!1):null,D=new TI(m,x,E,b,I),O=S();A=e.runWebGLProgram(D,O,"float32")}else A=EI({x:r,filter:o,convInfo:m,backend:e,bias:i,activation:p,preluActivationWeights:a,leakyreluAlpha:f});const k=ce({inputs:{x:A},backend:e,attrs:{shape:m.outShape}});return y.push(A),y.forEach(E=>e.disposeIntermediateTensorInfo(E)),k}},rK={kernelName:gu,backendName:"webgl",kernelFunc:function sK(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:h,activation:d,leakyreluAlpha:p}=s,f=[];let g=c;null==g&&(g=[1,1]),v(an(l,g),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${g}'`);const m=tn(r.shape,o.shape,l,g,u,h,!0),A=W().getBool("WEBGL_PACK_DEPTHWISECONV")&&m.strideWidth<=2&&m.outChannels/m.inChannels==1,y=d?rl(d,A):null,x=[r,o],b=null!=i,I=null!=a,S="leakyrelu"===d;if(b&&x.push(i),I&&x.push(a),S){const O=e.makeTensorInfo([],"float32",cr(p,"float32"));x.push(O),f.push(O)}let k;k=A?new LI(m,b,y,I,S):new OI(m,b,y,I,S);const D=e.runWebGLProgram(k,x,"float32",[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]]);return f.forEach(O=>e.disposeIntermediateTensorInfo(O)),D}};class oK{constructor(t,e,s,r){this.sliceDim=t,this.strides=e,this.paramsShape=r,this.variableNames=["x","indices"],this.outputShape=s;const o=ct(s.length);let i="\n    int index;";for(let a=0;a<this.sliceDim;a++)i+=`\n          index = round(getIndices(coords[0], ${a}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[a]};\n          flattenIndex += index * ${this.strides[a]};`;this.userCode=`\n         void main() {\n          ${o} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${i}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const aK={kernelName:zh,backendName:"webgl",kernelFunc:function iK(n){const{inputs:t,backend:e}=n,{params:s,indices:r}=t,o=r.shape,i=o[o.length-1],a=Q(s.shape),[l,u,c,h]=hf(s,r),d=ce({inputs:{x:r},backend:e,attrs:{shape:[u,i]}}),p=ce({inputs:{x:s},backend:e,attrs:{shape:[Q(s.shape)/c,c]}});if(e.shouldExecuteOnCPU([s,r])||"string"===s.dtype){const A=e.readSync(r.dataId),y=e.bufferSync(s),x=bU(A,y,s.dtype,u,i,c,h,s.shape,a);return e.makeTensorInfo(l,s.dtype,x.values)}const f=new oK(i,h,[u,c],s.shape),g=e.runWebGLProgram(f,[p,d],p.dtype),m=ce({inputs:{x:g},backend:e,attrs:{shape:l}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(g),m}};class lK{constructor(t,e){this.variableNames=["A","indices"],this.outputShape=e,this.rank=e.length;const s=ct(this.rank),r=function uK(n,t){const e=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let r=0;r<n.length;r++)s.push(2===r?"index":`${e[r]}`);return s.join()}(t);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${t[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${r}));\n      }\n    `}}function UI(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,indices:o}=t,{axis:i,batchDims:a}=s,l=Ge(i,r.shape)[0];if(W().get("DEBUG")){const y=e.readSync(o.dataId),x=r.shape[l];for(let b=0;b<y.length;++b){const I=y[b];v(I<=x-1&&I>=0,()=>`GatherV2: the index value ${I} is not in [0, ${x-1}]`)}}const u=Tf(r,o,l,a),c=Q(o.shape),h=[],d=ce({inputs:{x:r},backend:e,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),p=ce({inputs:{x:o},backend:e,attrs:{shape:[u.batchSize,c/u.batchSize]}});h.push(d),h.push(p);const f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(e.shouldExecuteOnCPU([r,o])||"string"===r.dtype){const y=e.bufferSync(p),x=e.bufferSync(d),b=wU(x,y,f);return h.forEach(I=>e.disposeIntermediateTensorInfo(I)),e.makeTensorInfo(u.outputShape,b.dtype,b.values)}const g=new lK(d.shape,f),m=e.runWebGLProgram(g,[d,p],d.dtype);h.push(m);const A=ce({inputs:{x:m},backend:e,attrs:{shape:u.outputShape}});return h.forEach(y=>e.disposeIntermediateTensorInfo(y)),A}const cK={kernelName:Dl,backendName:"webgl",kernelFunc:UI},hK=cn({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:IU,dtype:"bool"}),dK={kernelName:Rl,backendName:"webgl",kernelFunc:hK},pK=cn({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:CU}),fK={kernelName:Bi,backendName:"webgl",kernelFunc:pK},gK={kernelName:Vh,backendName:"webgl",kernelFunc:function mK(n){const{inputs:t,backend:e}=n,{input:s}=t;return zI(s,!0,e)}},AK=et({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),yK={kernelName:Vi,backendName:"webgl",kernelFunc:AK},xK=et({opSnippet:"return float(isinf(x));",dtype:"bool"}),bK={kernelName:Ui,backendName:"webgl",kernelFunc:xK},wK=et({opSnippet:"return float(isnan(x));",dtype:"bool"}),IK={kernelName:Wi,backendName:"webgl",kernelFunc:wK},CK=cn({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:vU,dtype:"bool"}),vK={kernelName:Fl,backendName:"webgl",kernelFunc:CK},SK=cn({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:SU,dtype:"bool"}),NK={kernelName:Ol,backendName:"webgl",kernelFunc:SK},kK={kernelName:Wh,backendName:"webgl",kernelFunc:function TK(n){const{backend:t,attrs:e}=n,{start:s,stop:r,num:o}=e,i=NU(s,r,o);return t.makeTensorInfo([i.length],"float32",i)}},_K=et({opSnippet:mi+"\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:TU}),DK={kernelName:Gi,backendName:"webgl",kernelFunc:_K},$K=et({opSnippet:mi+"\n  return log(1.0 + x);\n"}),FK={kernelName:Hi,backendName:"webgl",kernelFunc:$K},OK=cn({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),LK={kernelName:Ll,backendName:"webgl",kernelFunc:OK},PK=et({opSnippet:"return float(!(x >= 1.0));"}),MK={kernelName:Pl,backendName:"webgl",kernelFunc:PK},BK=cn({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),zK={kernelName:Ml,backendName:"webgl",kernelFunc:BK};class VK{constructor(t,e,s,r,o){this.variableNames=["x"],this.outputShape=[];const i=e,a=t[3]-1;let l;this.outputShape=t;const u=`float(${s}) + float(${r}) * sum`;l=.5===o?`inversesqrt(${u})`:1===o?`1.0/(${u})`:`exp(log(${u}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${i}; j <= ${i}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${a}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${l};\n        setOutput(val);\n      }\n    `}}class UK{constructor(t,e,s,r,o){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const i=e,a=t[3]-1;let l;this.outputShape=t;const u=`float(${s}) + float(${r}) * sum`;l=.5===o?`inversesqrt(${u})`:1===o?`1.0/(${u})`:`exp(log(${u}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${i};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${i}; j <= ${i}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${a}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${l};\n        setOutput(result);\n      }\n    `}}const WK={kernelName:Bl,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{depthRadius:o,bias:i,alpha:a,beta:l}=s,u=W().getBool("WEBGL_PACK_NORMALIZATION")?new UK(r.shape,o,i,a,l):new VK(r.shape,o,i,a,l);return e.runWebGLProgram(u,[r],r.dtype)}};class GK{constructor(t,e,s,r,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=s,this.alpha=r,this.beta=o,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${s});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${o})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${o});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const HK={kernelName:Gh,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r,y:o,dy:i}=t,{depthRadius:a,bias:l,alpha:u,beta:c}=s,h=new GK(r.shape,a,l,u,c);return e.runWebGLProgram(h,[r,o,i],r.dtype)}};function WI(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reductionIndices:o,keepDims:i}=s,a=r.shape.length,l=Ge(o,r.shape);let u=l;const c=Tt(u,a),h=null!=c,d=e.shouldExecuteOnCPU([r]);let p=r;if(h){if(d){const x=e.texData.get(p.dataId).values,b=new Array(a);for(let k=0;k<b.length;k++)b[k]=r.shape[c[k]];const I=ng(x,r.shape,r.dtype,c,b);p=e.makeTensorInfo(b,r.dtype),e.texData.get(p.dataId).values=I}else p=Zc(r,c,e);u=Lt(u.length,a)}ln("max",u,a);const[f,g]=nn(p.shape,u);let A,m=f;if(i&&(m=Ot(f,l)),d){const x=e.texData.get(p.dataId).values,b=kU(x,Q(g),m,r.dtype);A=e.makeTensorInfo(m,r.dtype),e.texData.get(A.dataId).values=b}else A=function KK(n,t,e,s){const r=Q(t),a=ce({inputs:{x:n},attrs:{shape:[Q(n.shape)/r,r]},backend:s}),l=Io(a,n.dtype,"max",s),u=ce({inputs:{x:l},attrs:{shape:e},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(l),u}(p,g,m,e);return h&&e.disposeIntermediateTensorInfo(p),A}const qK={kernelName:zl,backendName:"webgl",kernelFunc:WI},XK=cn({opSnippet:sg+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+wo+"\n  return result;\n",cpuKernelImpl:EU}),ZK={kernelName:Ki,backendName:"webgl",kernelFunc:XK},JK={kernelName:Vl,backendName:"webgl",kernelFunc:function YK(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;nl(r,"maxPool");const{filterSize:o,strides:i,pad:a,dimRoundingMode:l}=s;v(an(i,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const c=os(r.shape,o,i,1,a,l);if(1===c.filterWidth&&1===c.filterHeight&&Qe(c.inShape,c.outShape))return zn({inputs:{x:r},backend:e});const h=new ol(c,"max",!1);return e.runWebGLProgram(h,[r],r.dtype)}},tq={kernelName:Ul,backendName:"webgl",kernelFunc:function eq(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:i,pad:a,dataFormat:l,dimRoundingMode:u}=s,h=Qs(r.shape,o,i,[1,1,1],a,u,l),d=new og(h,"max",!1);return e.runWebGLProgram(d,[r],r.dtype)}};class nq{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const o=t.effectiveFilterHeight,i=t.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${o-1-t.padInfo.top}, ${i-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n          wR += ${t.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${o*i-1} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${i} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class sq{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const l=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${l-1-t.padInfo.front}, ${u-1-t.padInfo.top}, ${c-1-t.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${l};\n           wD += ${t.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${t.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${t.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${c};\n                wC += ${t.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${l*u*c-1} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${c} +\n                  wR * ${c} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const oq={kernelName:Kh,backendName:"webgl",kernelFunc:function rq(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,i=o,{filterSize:a,strides:l,pad:u,dimRoundingMode:c}=s,d=Qs(i.shape,a,l,[1,1,1],u,c),p=new og(d,"max",!0),f=e.runWebGLProgram(p,[i],i.dtype),g=new sq(d),m=e.runWebGLProgram(g,[r,f],i.dtype);return e.disposeIntermediateTensorInfo(f),m}},aq={kernelName:Hh,backendName:"webgl",kernelFunc:function iq(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o,output:i}=t,a=o;nl([o,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=os(a.shape,l,u,1,c,h),f=new ol(d,"max",!0),g=e.runWebGLProgram(f,[a],a.dtype),m=new nq(d),A=e.runWebGLProgram(m,[r,g],a.dtype);return e.disposeIntermediateTensorInfo(g),A}},uq={kernelName:qh,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{filterSize:r,strides:o,pad:i,includeBatchInIndex:a}=t,l=e;v(4===s.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);const u=[1,1];v(an(o,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${u}'`);const c=os(s.shape,r,o,u,i),[h,d]=function lq(n,t,e,s){let r=new ol(e,"max",!1);const o=s.runWebGLProgram(r,[n],"float32");return r=new ol(e,"max",!0,!0,t),[o,s.runWebGLProgram(r,[n],"float32")]}(s,a,c,l);return[h,d]}},hq={kernelName:Wl,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{keepDims:r,axis:o}=t,i=e,a=s.shape.length,l=Ge(o,s.shape);let u=l;const c=Tt(u,a),h=null!=c,d=i.shouldExecuteOnCPU([s]),p=[];let f=s;if(h){if(d){const b=i.texData.get(f.dataId).values,I=new Array(a);for(let E=0;E<I.length;E++)I[E]=s.shape[c[E]];const S=ng(b,s.shape,s.dtype,c,I);f=i.makeTensorInfo(I,s.dtype),i.texData.get(f.dataId).values=S}else f=Zc(s,c,i);p.push(f),u=Lt(u.length,a)}ln("sum",u,a);const[g,m]=nn(f.shape,u);let A=g;r&&(A=Ot(g,l));const y=function cq(n,t,e,s){const r=Q(t),a=ce({inputs:{x:n},attrs:{shape:[Q(n.shape)/r,r]},backend:s}),l=Io(a,"float32","mean",s),u=ce({inputs:{x:l},attrs:{shape:e},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(l),u}(f,m,A,i);for(const x of p)i.disposeIntermediateTensorInfo(x);return y}},pq={kernelName:Gl,backendName:"webgl",kernelFunc:function dq(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:i}=s,a=r.shape.length,l=Ge(o,r.shape);let u=l;const c=Tt(u,a);let h=r;null!=c&&(h=Nn({inputs:{x:r},backend:e,attrs:{perm:c}}),u=Lt(u.length,r.shape.length)),ln("min",u,a);const[d,p]=nn(h.shape,u),g=ce({inputs:{x:h},backend:e,attrs:{shape:[-1,Q(p)]}}),m=Io(g,g.dtype,"min",e);let A;return A=ce(i?{inputs:{x:m},backend:e,attrs:{shape:Ot(d,l)}}:{inputs:{x:m},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),null!=c&&e.disposeIntermediateTensorInfo(h),A}},gq=cn({opSnippet:sg+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+wo+"\n  return result;\n",cpuKernelImpl:_U}),Aq={kernelName:qi,backendName:"webgl",kernelFunc:gq};class yq{constructor(t,e,s){this.variableNames=["x"],this.outputShape=e.map((c,h)=>c[0]+t[h]+c[1]);const r=t.length,o=ct(r),i=e.map(c=>c[0]).join(","),a=e.map((c,h)=>c[0]+t[h]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===s?0:1;this.userCode=1!==r?`\n      ${o} start = ${o}(${i});\n      ${o} end = ${o}(${a});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${o} coords = outC - start;\n        setOutput(getX(${l}));\n      }\n    `:`\n        int start = ${i};\n        int end = ${a};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class xq{constructor(t,e,s){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((f,g)=>f[0]+t[g]+f[1]);const r=t.length,o=ct(r),i=e.map(f=>f[0]).join(","),a=e.map((f,g)=>f[0]+t[g]).join(","),l=Sn("rc",r),u=Sn("source",r),c=`${l[r-1]} < ${this.outputShape[r-1]}`,h=1===r?"source":`vec2(${u.slice(-2).join()})`,d="reflect"===s?0:1;let p="";if(1===r){const f=`\n        ${o} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${d};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${d};\n        }\n        source -= start;\n      `;p=`\n        ${o} rc = outputLoc;\n        ${f}\n        result[0] = getChannel(getX(${u.join()}), ${h});\n        ${l[r-1]} += 1;\n        if(${c}) {\n          ${f}\n          result[1] = getChannel(getX(${u.join()}), ${h});\n        }\n      `}else{const f=`\n        ${o} source = rc;\n        ${o} lt = ${o}(lessThan(source, start));\n        ${o} gte = ${o}(greaterThanEqual(source, end));\n        ${o} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${d}) +\n                gte * ((end - 1) * 2 - source + ${d});\n        source -= start;\n      `;p=`\n        ${o} rc = outputLoc;\n        ${f}\n        result[0] = getChannel(getX(${u.join()}), ${h});\n        ${l[r-1]} += 1;\n        if(${c}) {\n          ${f}\n          result[1] = getChannel(getX(${u.join()}), ${h});\n        }\n        rc = outputLoc;\n        ${l[r-2]} += 1;\n        if(${l[r-2]} < ${this.outputShape[r-2]}) {\n          ${f}\n          result[2] = getChannel(getX(${u.join()}), ${h});\n          ${l[r-1]} += 1;\n          if(${c}) {\n            ${f}\n            result[3] = getChannel(getX(${u.join()}), ${h});\n          }\n        }\n      `}this.userCode=`\n      const ${o} start = ${o}(${i});\n      const ${o} end = ${o}(${a});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const bq={kernelName:Hl,backendName:"webgl",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s}=n,{paddings:r,mode:o}=e,i=W().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new xq(s.shape,r,o):new yq(s.shape,r,o);return t.runWebGLProgram(i,[s],s.dtype)}},Cq=cn({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  "+wo+"\n  return result;\n"}),vq={kernelName:ji,backendName:"webgl",kernelFunc:Cq};class Sq{constructor(t,e,s){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[t,s],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}}const GI=cn({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),Nq={kernelName:Ri,backendName:"webgl",kernelFunc:GI},HI="return a - b;",KI=cn({opSnippet:HI,packedOpSnippet:HI,supportsComplex:!0,cpuKernelImpl:ZU}),Tq={kernelName:ca,backendName:"webgl",kernelFunc:KI};function qI(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{dim:o}=s,i=Ge([o],r.shape),a=WI({inputs:{x:r},backend:e,attrs:{reductionIndices:i,keepDims:!1}}),l=Ot(a.shape,i),u=ce({inputs:{x:a},backend:e,attrs:{shape:l}}),c=KI({inputs:{a:r,b:u},backend:e}),h=PI({inputs:{x:c},backend:e}),d=Yc({inputs:{x:h},backend:e,attrs:{axis:i,keepDims:!1}}),p=ce({inputs:{x:d},backend:e,attrs:{shape:l}}),f=GI({inputs:{a:h,b:p},backend:e});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),f}const kq={kernelName:uu,backendName:"webgl",kernelFunc:qI},_q={kernelName:jh,backendName:"webgl",kernelFunc:function Eq(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{numSamples:o,seed:i,normalized:a}=s,l=a?r:qI({inputs:{logits:r},backend:e,attrs:{dim:r.shape.length-1}}),h=new Sq(l.shape[0],l.shape[1],o),p=e.runWebGLProgram(h,[l],"int32",[[i]]);return a||e.disposeIntermediateTensorInfo(l),p}},Dq=Jn+"\n  return -x;\n",Fq={kernelName:Kl,backendName:"webgl",kernelFunc:function $q(n){const{inputs:t,backend:e}=n,{x:s}=t;if(e.shouldExecuteOnCPU([s])){const o=e.texData.get(s.dataId),[i,a]=RU(o.values,s.shape,s.dtype);return e.makeTensorInfo(a,s.dtype,i)}let r;return r=W().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Pr(s.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new Ks(s.shape,Dq),e.runWebGLProgram(r,[s],s.dtype)}},Oq=Zp,Pq={kernelName:Qh,backendName:"webgl",kernelFunc:function Lq(n){Wn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l}=s,u=e.readSync(r.dataId),c=e.readSync(o.dataId),{selectedIndices:h}=Oq(u,c,i,a,l);return e.makeTensorInfo([h.length],"int32",new Int32Array(h))}},Mq=Yp,zq={kernelName:Xh,backendName:"webgl",kernelFunc:function Bq(n){Wn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,padToMaxOutputSize:u}=s,c=e.readSync(r.dataId),h=e.readSync(o.dataId),{selectedIndices:d,validOutputs:p}=Mq(c,h,i,a,l,u);return[e.makeTensorInfo([d.length],"int32",new Int32Array(d)),e.makeTensorInfo([],"int32",new Int32Array([p]))]}},Vq=Jp,Wq={kernelName:Zh,backendName:"webgl",kernelFunc:function Uq(n){Wn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,softNmsSigma:u}=s,c=e.readSync(r.dataId),h=e.readSync(o.dataId),d=i,p=a,f=l,g=u,{selectedIndices:m,selectedScores:A}=Vq(c,h,d,p,f,g);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([A.length],"float32",new Float32Array(A))]}};class Gq{constructor(t,e,s,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${s}),\n                      float(index == coords.y)));\n      }\n    `}}const Hq={kernelName:Ql,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{indices:r}=t,{dtype:o,depth:i,onValue:a,offValue:l}=s,u=Q(r.shape),c=new Gq(u,i,a,l),h=ce({inputs:{x:r},backend:e,attrs:{shape:[u]}}),d=e.runWebGLProgram(c,[h],o);e.disposeIntermediateTensorInfo(h);const f=ce({inputs:{x:d},backend:e,attrs:{shape:[...r.shape,i]}});return e.disposeIntermediateTensorInfo(d),f}};function oh(n){const{inputs:t,backend:e}=n,{x:s}=t;if("complex64"===s.dtype){const r=il({inputs:{input:s},backend:e}),o=oh({inputs:{x:r},backend:e}),i=nh({inputs:{input:s},backend:e}),a=oh({inputs:{x:i},backend:e}),l=Mr({inputs:{real:o,imag:a},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}return ll({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:e})}const Kq={kernelName:pu,backendName:"webgl",kernelFunc:oh},qq={kernelName:jl,backendName:"webgl",kernelFunc:function jI(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const r=il({inputs:{input:s},backend:e}),o=jI({inputs:{x:r},backend:e}),i=nh({inputs:{input:s},backend:e}),a=oh({inputs:{x:i},backend:e}),l=Mr({inputs:{real:o,imag:a},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}return ll({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:e})}},Qq={kernelName:Xl,backendName:"webgl",kernelFunc:function jq(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s;if(1===t.length)return lg({inputs:{input:t[0]},backend:e,attrs:{dim:r}});const o=t[0].shape,i=t[0].dtype;t.forEach(c=>{$n(o,c.shape,"All tensors passed to stack must have matching shapes"),v(i===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});const a=[],u=NI({inputs:t.map(c=>{const h=lg({inputs:{input:c},backend:e,attrs:{dim:r}});return a.push(h),h}),backend:e,attrs:{axis:r}});return a.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}};class Xq{constructor(t,e,s){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((u,c)=>u[0]+t[c]+u[1]);const r=t.length,o=ct(r),i=e.map(u=>u[0]).join(","),a=e.map((u,c)=>u[0]+t[c]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${o} start = ${o}(${i});\n      ${o} end = ${o}(${a});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${o} coords = outC - start;\n          setOutput(getX(${l}));\n        }\n      }\n    `:`\n        int start = ${i};\n        int end = ${a};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class Zq{constructor(t,e,s){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((g,m)=>g[0]+t[m]+g[1]);const r=t.length,o=ct(r),i=e.map(g=>g[0]).join(","),a=e.map((g,m)=>g[0]+t[m]).join(","),l=Sn("rc",r),u=Sn("source",r),c=`${l[r-1]} < ${this.outputShape[r-1]}`,h=1===r?"source":`vec2(${u.slice(-2).join()})`,d=[`${o} rc = outputLoc;`,`${l[r-1]} += 1;\n       if(${c}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${l[r-2]} += 1;\n       if(${l[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${l[r-1]} += 1;\n         if(${c}) {`],p=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let f="";for(let g=0,m=1===r?2:4;g<m;g++)f+=`\n        ${d[g]}\n        if (${p}) {\n          result[${g}] = float(value);\n        } else {\n          ${o} source = rc - start;\n          result[${g}] = getChannel(getX(${u.join()}), ${h});\n        }\n      `;f+=1===r?"} ":"}}",this.userCode=`\n      const ${o} start = ${o}(${i});\n      const ${o} end = ${o}(${a});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${f}\n        setOutput(result);\n      }\n    `}}const QI=n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:o,constantValue:i}=s;if(0===Q(r.shape))return ll({backend:e,attrs:{shape:o.map((c,h)=>c[0]+r.shape[h]+c[1]),value:i,dtype:r.dtype}});const a=W().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Zq(r.shape,o,i):new Xq(r.shape,o,i);return e.runWebGLProgram(a,[r],r.dtype,[[i]])},Yq={kernelName:Zl,backendName:"webgl",kernelFunc:QI},tj=cn({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  "+wo+"\n  return result;\n"}),nj={kernelName:Xi,backendName:"webgl",kernelFunc:tj},rj={kernelName:Jl,backendName:"webgl",kernelFunc:function sj(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:i}=s,a=r.shape.length,l=[],u=Ge(o,r.shape);let c=u;const h=Tt(c,a);let p,d=r;if(null!=h&&(d=Nn({inputs:{x:r},backend:e,attrs:{perm:h}}),c=Lt(c.length,a),l.push(d)),ln("prod",c,a),e.shouldExecuteOnCPU([d])){const f=e.texData.get(d.dataId).values,{outVals:g,outShape:m,outDtype:A}=FU(d.shape,d.dtype,f,c);p=e.makeTensorInfo(m,A,g)}else{const[f,g]=nn(d.shape,c),m=Q(g),A=ce({inputs:{x:d},backend:e,attrs:{shape:[-1,m]}}),x=Io(A,kd(r.dtype),"prod",e);p=ce({inputs:{x},backend:e,attrs:{shape:f}}),l.push(A),l.push(x)}if(i){l.push(p);const f=Ot(p.shape,u);p=ce({inputs:{x:p},backend:e,attrs:{shape:f}})}return l.forEach(f=>e.disposeIntermediateTensorInfo(f)),p}},ij={kernelName:Yh,backendName:"webgl",kernelFunc:function oj(n){const{inputs:t,backend:e,attrs:s}=n,{paramsNestedSplits:r,paramsDenseValues:o,indices:i}=t,{outputRaggedRank:a}=s,l=r.map(A=>e.readSync(A.dataId)),u=r.map(A=>A.shape),c=e.readSync(o.dataId),h=e.readSync(i.dataId),[d,p,f]=OU(l,u,c,o.shape,o.dtype,h,i.shape,a),g=d.map(A=>e.makeTensorInfo([A.length],"int32",A)),m=e.makeTensorInfo(f,o.dtype,p);return g.concat([m])}},lj={kernelName:Jh,backendName:"webgl",kernelFunc:function aj(n){const{inputs:t,backend:e}=n,{starts:s,limits:r,deltas:o}=t,i=e.readSync(s.dataId),a=e.readSync(r.dataId),l=e.readSync(o.dataId),[u,c]=LU(i,s.shape,s.dtype,a,r.shape,l,o.shape);return[e.makeTensorInfo([u.length],"int32",u),e.makeTensorInfo([c.length],s.dtype,c)]}},cj={kernelName:ed,backendName:"webgl",kernelFunc:function uj(n){const{inputs:t,backend:e,attrs:s}=n,{shape:r,values:o,defaultValue:i,rowPartitionTensors:a}=t,{rowPartitionTypes:l}=s,u=e.readSync(r.dataId),c=e.readSync(o.dataId),h=e.readSync(i.dataId),d=a.map(m=>e.readSync(m.dataId)),p=a.map(m=>m.shape),[f,g]=PU(u,r.shape,c,o.shape,o.dtype,h,i.shape,d,p,l);return e.makeTensorInfo(f,o.dtype,g)}},XI=n=>{const{backend:t,attrs:e}=n,{start:s,stop:r,step:o,dtype:i}=e,a=MU(s,r,o,i);return t.makeTensorInfo([a.length],i,a)},hj={kernelName:td,backendName:"webgl",kernelFunc:XI},dj=et({opSnippet:"return 1.0 / x;"}),pj={kernelName:Zi,backendName:"webgl",kernelFunc:dj},mj=et({opSnippet:Jn+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),gj={kernelName:Yi,backendName:"webgl",kernelFunc:mj},yj=et({opSnippet:Jn+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),xj={kernelName:Ji,backendName:"webgl",kernelFunc:yj};class bj{constructor(t,e,s,r,o){this.variableNames=["A"],this.outputShape=[];const[i,a,l,u]=t;this.outputShape=[i,e,s,u];const c=[r&&e>1?a-1:a,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let d;d=o?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class wj{constructor(t,e,s,r,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[i,a,l,u]=t;this.outputShape=[i,e,s,u];const c=[r&&e>1?a-1:a,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let d;d=o?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]},\n          ${c[1]/h[1]});\n      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,\n                                     ${l}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${s-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const Cj={kernelName:nu,backendName:"webgl",kernelFunc:function Ij(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:i,size:a}=s,[l,u]=a,c=W().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new wj(r.shape,l,u,o,i):new bj(r.shape,l,u,o,i);return e.runWebGLProgram(c,[r],"float32")}};class vj{constructor(t,e,s){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,r,o]=e,[,i,a]=t,l=[s&&i>1?r-1:r,s&&a>1?o-1:o],u=[s&&i>1?i-1:i,s&&a>1?a-1:a],c=l[0]/u[0],h=l[1]/u[1],d=1/c,p=1/h,f=2*Math.ceil(d)+2,g=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${h});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${g});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${i}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${a}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${o-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const Nj={kernelName:rd,backendName:"webgl",kernelFunc:function Sj(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:i}=s,a=new vj(o.shape,r.shape,i);return e.runWebGLProgram(a,[o],o.dtype)}};class Tj{constructor(t,e,s,r,o){this.variableNames=["A"],this.outputShape=[];const[i,a,l,u]=t;this.outputShape=[i,e,s,u];const c=[r&&e>1?a-1:a,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let p;p=o?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class kj{constructor(t,e,s,r,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[i,a,l,u]=t;this.outputShape=[i,e,s,u];const c=[r&&e>1?a-1:a,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let p;p=o?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]},\n          ${c[1]/h[1]});\n      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,\n                                     ${l}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${s-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const _j={kernelName:tu,backendName:"webgl",kernelFunc:function Ej(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:i,size:a}=s,[l,u]=a,c=W().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new kj(r.shape,l,u,o,i):new Tj(r.shape,l,u,o,i);return e.runWebGLProgram(c,[r],r.dtype)}};class Dj{constructor(t,e,s){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,r,o]=e,[,i,a]=t,l=[s&&i>1?r-1:r,s&&a>1?o-1:o],u=[s&&i>1?i-1:i,s&&a>1?a-1:a],c=l[0]/u[0],h=l[1]/u[1],d=1/c,p=1/h,f=2*Math.ceil(d)+2,g=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${h});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${g});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${i}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${a}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${l[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${l[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${s} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${o}) - 1),\n                ${s} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const $j={kernelName:sd,backendName:"webgl",kernelFunc:function Rj(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:i}=s,a=new Dj(o.shape,r.shape,i);return e.runWebGLProgram(a,[o],o.dtype)}};class Fj{constructor(t,e){this.variableNames=["x"];const s=t.length;if(s>4)throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);if(this.outputShape=t,1===s)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const o=t.map((a,l)=>(a=>-1!==e.indexOf(a)&&1!==t[a]?`${t[a]} - coords[${a}] - 1`:`coords[${a}]`)(l)).join(","),i=ct(s);this.userCode=`\n      void main() {\n        ${i} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}class Oj{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const s=t.length;if(s>4)throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);this.outputShape=t;const r=Sn("rc",s),o=`${r[s-1]} + 1 < ${this.outputShape[s-1]}`,i=`${r[s-2]} + 1 < ${this.outputShape[s-2]}`,a=ct(s);function d(f){const g=t.map((y,x)=>function p(f,g){return-1!==e.indexOf(f)&&1!==t[f]?`${t[f]} - ${g[f]} - 1`:`${g[f]}`}(x,f));return`getChannel(getX(${g.join(",")}), vec2(${g.slice(-2).join(",")}))`}this.userCode=1===s?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${o}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${a} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function l(f){return d(f)}(r.slice())};\n          if(${o}){\n            result.g = ${function u(f){return f[s-1]="("+f[s-1]+" + 1)",d(f)}(r.slice())};\n          }\n          if(${i}) {\n            result.b = ${function c(f){return f[s-2]="("+f[s-2]+" + 1)",d(f)}(r.slice())};\n            if(${o}) {\n              result.a = ${function h(f){return f[s-1]="("+f[s-1]+" + 1)",f[s-2]="("+f[s-2]+" + 1)",d(f)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const Pj={kernelName:su,backendName:"webgl",kernelFunc:function Lj(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dims:o}=s,i=r.shape.length,a=Ge(o,r.shape);if(0===i)return zn({inputs:{x:r},backend:e});const l=W().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Oj(r.shape,a):new Fj(r.shape,a);return e.runWebGLProgram(l,[r],r.dtype)}};class Mj{constructor(t,e){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const s=t[1],r=t[2];this.outputShape=t;let o="";o="number"==typeof e?`float outputValue = ${e.toFixed(2)};`:`\n        vec3 fill = vec3(${e.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${o}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${s}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const Bj={kernelName:Id,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{image:s}=n,{radians:r,fillValue:o,center:i}=t,a=e,l=new Mj(s.shape,o),[u,c]=lf(i,s.shape[1],s.shape[2]),h=[[u,c,Math.sin(r),Math.cos(r)]];return a.runWebGLProgram(l,[s],s.dtype,h)}},zj=et({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),Vj={kernelName:ea,backendName:"webgl",kernelFunc:zj},Uj=et({opSnippet:"return inversesqrt(x);",cpuKernelImpl:BU}),Wj={kernelName:ta,backendName:"webgl",kernelFunc:Uj};class cg{constructor(t,e,s,r,o,i,a=!0,l=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;const u=ct(o.length),c=ct(i.length);let h="";1===s?h="i":2===s&&(h="i, j");let p="";1===r?p="i":2===r&&(p="i, coords[1]");let g="";l&&(g="coords[0], coords[1]"),this.userCode=`\n        ${u} strides = ${u}(${o});\n\n        void main() {\n          ${c} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(getIndices(${h}));\n              flattenedIndex += index * ${e>1?"strides[j]":"strides"};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += getUpdates(${p});\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(${g}), sum, float(found)));\n        }\n      `}}class Gj{constructor(t,e,s,r,o,i,a=!0,l=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=i;const u=ct(o.length),c=ct(i.length);let h="";1===s?h="i":2===s&&(h="i, j");let p="";1===r?p="i":2===r&&(p="i, coords[1]");let g="";l&&(g="coords[0], coords[1]"),this.userCode=`\n        ${u} strides = ${u}(${o});\n\n        void main() {\n          ${c} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${t}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${e}; j+=2) {\n              ivec4 index = round(getIndices(${h}));\n              flattenedIndex += index.xz * ${e>1?"strides[j]":"strides"};\n              if (j + 1 < ${e}) {\n                flattenedIndex += index.yw * ${e>1?"strides[j + 1]":"strides"};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = getUpdates(${p});\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(getDefaultValue(${g}), sum, found));\n        }\n      `}}const Kj={kernelName:od,backendName:"webgl",kernelFunc:function Hj(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r,updates:o}=t,{shape:i}=s,{sliceRank:a,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=ro(0,r,i),d=[h/u,u];if(0===h)return e.makeTensorInfo(i,r.dtype);const p=ce({inputs:{x:r},backend:e,attrs:{shape:[l,a]}}),f=ce({inputs:{x:o},backend:e,attrs:{shape:[l,u]}}),g=e.makeTensorInfo([],"float32",new Float32Array([0]));let m;m=W().getBool("WEBGL_PACK")?new Gj(l,a,p.shape.length,f.shape.length,c,d):new cg(l,a,p.shape.length,f.shape.length,c,d);const A=e.runWebGLProgram(m,[f,p,g],f.dtype),y=ce({inputs:{x:A},backend:e,attrs:{shape:i}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(A),e.disposeIntermediateTensorInfo(g),y}};class qj{constructor(t,e,s,r){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[t,s];const i=`for (int i = 0; i < ${Math.ceil(Math.log2(e+1))}; ++i) { if (left >= right) break;`,a=2===W().getNumber("WEBGL_VERSION")?"while (left < right) {":i;this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${a}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${"left"===r?"<":"<="} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const Qj={kernelName:ad,backendName:"webgl",kernelFunc:function jj(n){const{inputs:t,backend:e,attrs:s}=n,{sortedSequence:r,values:o}=t,{side:i}=s,a=new qj(r.shape[0],r.shape[1],o.shape[1],i);return e.runWebGLProgram(a,[r,o],"int32",[[r.shape[1]]])}};class Xj{constructor(t,e,s){let r,o;if(this.variableNames=["c","a","b"],this.outputShape=e,s>4)throw Error(`Where for rank ${s} is not yet supported`);if(1===s)o="resRC",r="resRC";else{const a=["resRC.x","resRC.y","resRC.z","resRC.w"],l=[],u=[];for(let c=0;c<e.length;c++)u.push(`${a[c]}`),c<t&&l.push(`${a[c]}`);r=l.join(),o=u.join()}const i=ct(s);this.userCode=`\n      void main() {\n        ${i} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${o}));\n        } else {\n          setOutput(getB(${o}));\n        }\n      }\n    `}}const Yj={kernelName:ru,backendName:"webgl",kernelFunc:function Zj(n){const{inputs:t,backend:e}=n,{condition:s,t:r,e:o}=t,i=new Xj(s.shape.length,r.shape,r.shape.length);return e.runWebGLProgram(i,[s,r,o],Fn(r.dtype,o.dtype))}},eQ=et({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${Ju};\n  float scale = ${ec};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),tQ={kernelName:na,backendName:"webgl",kernelFunc:eQ},sQ=et({opSnippet:mi+"\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:VU}),rQ={kernelName:ia,backendName:"webgl",kernelFunc:sQ},oQ=et({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),iQ={kernelName:oa,backendName:"webgl",kernelFunc:oQ},uQ=et({opSnippet:mi+"\n  return sin(x);\n",packedOpSnippet:`\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${wo}\n  return result;\n`}),cQ={kernelName:sa,backendName:"webgl",kernelFunc:uQ},hQ=et({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),dQ={kernelName:ra,backendName:"webgl",kernelFunc:hQ},pQ=et({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),fQ={kernelName:aa,backendName:"webgl",kernelFunc:pQ},mQ={kernelName:au,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,paddings:i}=s;v(r.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const a=o.reduce((A,y)=>A*y),l=[[0,0]];l.push(...i);for(let A=1+o.length;A<r.shape.length;++A)l.push([0,0]);const u=[],c=QI({inputs:{x:r},backend:e,attrs:{paddings:l,constantValue:0}}),h=Oa(c.shape,o,a,!1),d=La(h.length,o.length,!1),p=Pa(c.shape,o,a,!1),f=ce({inputs:{x:c},backend:e,attrs:{shape:h}}),g=Nn({inputs:{x:f},backend:e,attrs:{perm:d}}),m=ce({inputs:{x:g},backend:e,attrs:{shape:p}});return u.push(c),u.push(f),u.push(g),u.forEach(A=>e.disposeIntermediateTensorInfo(A)),m}},AQ={kernelName:ld,backendName:"webgl",kernelFunc:function gQ(n){const{inputs:t,backend:e}=n,{indices:s,values:r,denseShape:o,defaultValue:i}=t;if(1!==o.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${o.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const a=e.readSync(s.dataId),l=e.readSync(r.dataId),u=e.readSync(o.dataId),c=e.readSync(i.dataId)[0],[h,d,p,f,g]=WU(a,s.shape,s.dtype,l,r.dtype,u,c);return[e.makeTensorInfo(d,s.dtype,h),e.makeTensorInfo([d[0]],r.dtype,p),e.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(m=>Number(m)))),e.makeTensorInfo([g.length],s.dtype,new Int32Array(g))]}},xQ={kernelName:ud,backendName:"webgl",kernelFunc:function yQ(n){const{inputs:t,backend:e}=n,{inputIndices:s,inputShape:r,newShape:o}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==o.shape.length)throw new Error(`Target shape should be a vector but received shape ${o.shape}`);const i=Array.from(e.readSync(r.dataId)),a=e.readSync(s.dataId),l=Array.from(e.readSync(o.dataId)),[u,c,h]=GU(a,s.shape,s.dtype,i,l);return[e.makeTensorInfo(c,s.dtype,u),e.makeTensorInfo([h.length],o.dtype,new Int32Array(h))]}},wQ={kernelName:cd,backendName:"webgl",kernelFunc:function bQ(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${o.shape}`);const i=e.readSync(s.dataId),a=e.readSync(r.dataId),l=e.readSync(o.dataId),[u,c]=tI(i,s.shape,s.dtype,a,l,!0);return e.makeTensorInfo(c,s.dtype,u)}},CQ={kernelName:hd,backendName:"webgl",kernelFunc:function IQ(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${o.shape}`);const i=e.readSync(s.dataId),a=e.readSync(r.dataId),l=e.readSync(o.dataId),[u,c]=tI(i,s.shape,s.dtype,a,l);return e.makeTensorInfo(c,s.dtype,u)}},SQ={kernelName:dd,backendName:"webgl",kernelFunc:function vQ(n){const{inputs:t,backend:e,attrs:s}=n,{sparseIndices:r,sparseValues:o,defaultValue:i}=t,{outputShape:a}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=ro(0,r,a);if("string"===o.dtype){const A=e.bufferSync(r),y=e.bufferSync(o),x=dr(e.readSync(i.dataId)[0]),b=zU(A,y,a,d,c,u,l,h,x,!1);return e.makeTensorInfo(a,b.dtype,b.values)}const f=new cg(u,l,r.shape.length,o.shape.length,h,[d,1],!1),g=e.runWebGLProgram(f,[o,r,i],o.dtype),m=ce({inputs:{x:g},backend:e,attrs:{shape:a}});return e.disposeIntermediateTensorInfo(g),m}},TQ={kernelName:lu,backendName:"webgl",kernelFunc:function NQ(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{numOrSizeSplits:o,axis:i}=s,a=Ge(i,r.shape)[0],l=Sf(r,o,a),c=new Array(r.shape.length).fill(0),h=r.shape.slice();return l.map(d=>{const p=[...h];p[a]=d;const f=gi({inputs:{x:r},backend:e,attrs:{begin:c,size:p}});return c[a]+=d,f})}},ZI="return sqrt(x);",kQ=et({opSnippet:ZI,packedOpSnippet:ZI,cpuKernelImpl:HU}),EQ={kernelName:la,backendName:"webgl",kernelFunc:kQ},DQ={kernelName:pd,backendName:"webgl",kernelFunc:et({opSnippet:"return x * x;"})},YI="return (a - b) * (a - b);",RQ=cn({opSnippet:YI,packedOpSnippet:YI}),$Q={kernelName:ua,backendName:"webgl",kernelFunc:RQ},OQ={kernelName:cu,backendName:"webgl",kernelFunc:function FQ(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");const i=Js(e.readSync(r.dataId)),a=KU(i,"string",s);return e.makeTensorInfo(r.shape,"string",a)}},PQ={kernelName:fa,backendName:"webgl",kernelFunc:function LQ({inputs:n,attrs:t,backend:e}){const{x:s}=n,o=new Ks(s.shape,Jn+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `);return e.runWebGLProgram(o,[s],s.dtype)}};class MQ{constructor(t,e,s){this.variableNames=["x"],this.outputShape=s;const r=s.length,o=ct(s.length),i=ct(s.length);let a="";if(1===r)a="coords * strides + begin";else{let l=0;a=s.map((u,c)=>(l++,1===s.length?`coords * strides[${c}] + begin[${c}]`:`coords[${l-1}] * strides[${c}] + begin[${c}]`)).join(",")}this.userCode=`\n      ${o} begin = ${o}(${t});\n      ${o} strides = ${o}(${e});\n\n      void main() {\n        ${i} coords = getOutputCoords();\n        setOutput(getX(${a}));\n      }\n    `}}const zQ={kernelName:fd,backendName:"webgl",kernelFunc:function BQ(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,end:i,strides:a,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s,{finalShapeSparse:p,finalShape:f,isIdentity:g,sliceDim0:m,isSimpleSlice:A,begin:y,end:x,strides:b}=up(r.shape,o,i,a,l,u,c,h,d);let I;if(g)I=ce({inputs:{x:r},backend:e,attrs:{shape:f}});else if(m||A){v(r.shape.length>=1,()=>`Input must have rank at least 1, got: ${r.shape.length}`);const k=ip(y,x,b),E=gi({inputs:{x:r},backend:e,attrs:{begin:y,size:k}});I=ce({inputs:{x:E},backend:e,attrs:{shape:f}}),e.disposeIntermediateTensorInfo(E)}else if(e.shouldExecuteOnCPU([r])){const E=e.readSync(r.dataId),D=Be(r.shape,r.dtype,E),O=qU(p,D,b,y);I=e.makeTensorInfo(f,r.dtype,O.values)}else{const E=new MQ(y,b,p);I=e.runWebGLProgram(E,[r],r.dtype)}const S=ce({inputs:{x:I},backend:e,attrs:{shape:f}});return e.disposeIntermediateTensorInfo(I),S}},UQ={kernelName:md,backendName:"webgl",kernelFunc:function VQ(n){const{inputs:t,backend:e,attrs:s}=n,{separator:r,nGramWidths:o,leftPad:i,rightPad:a,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=e.readSync(c.dataId),p=e.readSync(h.dataId),[f,g]=jU(d,p,r,o,i,a,l,u);return[e.makeTensorInfo([f.length],"string",f),e.makeTensorInfo(h.shape,"int32",g)]}},GQ={kernelName:gd,backendName:"webgl",kernelFunc:function WQ(n){const{inputs:t,backend:e,attrs:s}=n,{skipEmpty:r}=s,{input:o,delimiter:i}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(1!==o.shape.length)throw new Error(`Input must be a vector, got shape: ${o.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const a=e.readSync(o.dataId),l=e.readSync(i.dataId)[0],[u,c,h]=QU(a,l,r),d=c.length;return[e.makeTensorInfo([d,2],"int32",u),e.makeTensorInfo([d],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(h))]}},KQ={kernelName:Ad,backendName:"webgl",kernelFunc:function HQ(n){const{inputs:t,backend:e,attrs:s}=n,{numBuckets:r}=s,{input:o}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=e.readSync(o.dataId),a=XU(i,r);return e.makeTensorInfo(o.shape,"int32",a)}},qQ=et({opSnippet:"return tan(x);"}),jQ={kernelName:ha,backendName:"webgl",kernelFunc:qQ},QQ=et({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),XQ={kernelName:da,backendName:"webgl",kernelFunc:QQ},YQ={kernelName:id,backendName:"webgl",kernelFunc:function ZQ(n){const{inputs:t,backend:e}=n,{tensor:r,indices:o,updates:i}=t,{sliceRank:a,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=ro(0,o,r.shape),d=[h/u,u];if(0===h)return e.makeTensorInfo(r.shape,o.dtype);const p=ce({inputs:{x:o},backend:e,attrs:{shape:[l,a]}}),f=ce({inputs:{x:i},backend:e,attrs:{shape:[l,u]}}),g=ce({inputs:{x:r},backend:e,attrs:{shape:d}}),m=new cg(l,a,p.shape.length,f.shape.length,c,d,!1,!0),A=e.runWebGLProgram(m,[f,p,g],g.dtype),y=ce({inputs:{x:A},backend:e,attrs:{shape:r.shape}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(A),y}};class JQ{constructor(t,e){this.variableNames=["A"];const s=new Array(t.length);for(let i=0;i<s.length;i++)s[i]=t[i]*e[i];this.outputShape=s,this.rank=s.length;const r=ct(this.rank),o=function e5(n){const t=n.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${n[0]})`;const e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let r=0;r<n.length;r++)s.push(`imod(${e[r]}, ${n[r]})`);return s.join()}(t);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${o}));\n      }\n    `}}function JI(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reps:o}=s;if("string"===r.dtype||r.shape.length>5){const l=e.readSync(r.dataId),u="string"===r.dtype?l.map(d=>dr(d)):l,c=Be(r.shape,r.dtype,u),h=YU(c,o);return e.makeTensorInfo(h.shape,h.dtype,h.values)}const i=new JQ(r.shape,o);return e.runWebGLProgram(i,[r],r.dtype)}const t5={kernelName:pa,backendName:"webgl",kernelFunc:JI};class n5{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=t,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class s5{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=t,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function Co(n,t){null!==t&&n.disposeIntermediateTensorInfo(t)}function eC(n){let t=1;for(;t<n;)t*=2;return t}const o5={kernelName:yd,backendName:"webgl",kernelFunc:function r5(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{k:o,sorted:i}=s,a=W().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=W().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=r.shape,c=u[u.length-1];if(e.shouldExecuteOnCPU([r])||c<a||o>l){const O=e.readSync(r.dataId),[C,T]=JU(O,u,r.dtype,o,i);return[e.makeTensorInfo(C.shape,C.dtype,C.values),e.makeTensorInfo(T.shape,T.dtype,T.values)]}if(0===o)return u[u.length-1]=0,[e.makeTensorInfo(u,r.dtype,[]),e.makeTensorInfo(u,"int32",[])];if(1===c)return[r,ll({attrs:{shape:u,dtype:"int32",value:0},backend:e})];const h=e.texData.get(r.dataId),d=null!==h&&h.isPacked,p=d?e.unpackTensor(r):r,g=Q(u)/c,m=ce({inputs:{x:p},attrs:{shape:[g,c]},backend:e});d&&Co(e,p);const A=eC(o),y=eC(c);let x=null;const b=()=>null===x?[m,m]:[m,x],I=(O,C,T)=>{const _=b(),P=new n5(T),H=x;x=e.runWebGLProgram(P,_,"int32",[[c],[null===x?1:0],[Number.NEGATIVE_INFINITY],[O],[C]]),Co(e,H)};for(let O=1;O<A;O*=2){const C=2*O;for(let T=O;T>=1;T/=2)I(C,T,[g,y])}for(let O=y;O>A;O/=2){const C=b(),T=new s5([g,O/2]),z=x;x=e.runWebGLProgram(T,C,"int32",[[c],[null===x?1:0],[A]]),Co(e,z);const V=A/2,H=2*V;for(let K=V;K>=1;K/=2)I(H,K,x.shape)}let S=x;x=gi({inputs:{x},backend:e,attrs:{begin:0,size:[g,o]}}),Co(e,S);let k=UI({inputs:{x:m,indices:x},backend:e,attrs:{axis:1,batchDims:1}});Co(e,m);const E=u.slice(0,-1);E.push(o),S=x,x=ce({inputs:{x},attrs:{shape:E},backend:e}),Co(e,S);const D=k;return k=ce({inputs:{x:k},attrs:{shape:E},backend:e}),Co(e,D),[k,x]}};class i5{constructor(t,e,s,r,o,i){this.variableNames=["Image","Transforms"],this.outputShape=i;const a="nearest"===s?1:2;let l;switch(r){case"constant":default:l=1;break;case"reflect":l=2;break;case"wrap":l=3;break;case"nearest":l=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${l} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${l} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${l} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${t} && 0 <= coordX && coordX < ${e}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${o});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${o});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${e}));\n                float mapY = mapCoord(inY, float(${t}));\n\n                if (${a} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const l5={kernelName:xd,backendName:"webgl",kernelFunc:function a5(n){const{inputs:t,backend:e,attrs:s}=n,{image:r,transforms:o}=t,{interpolation:i,fillMode:a,fillValue:l,outputShape:u}=s,[c,h,d,p]=r.shape,[f,g]=null!=u?u:[h,d],A=new i5(h,d,i,a,l,[c,f,g,p]);return e.runWebGLProgram(A,[r,o],"float32")}},c5={kernelName:bd,backendName:"webgl",kernelFunc:function u5(n){const{inputs:t,attrs:e,backend:s}=n,{axis:r}=e,{x:o}=t;nl(o,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(o.dataId),{outputValues:a,outputShape:l,indices:u}=eW(i,r,o.shape,o.dtype);return[s.makeTensorInfo(l,o.dtype,a),s.makeTensorInfo([u.length],"int32",u)]}},d5={kernelName:hu,backendName:"webgl",kernelFunc:function h5(n){const{inputs:t,backend:e,attrs:s}=n,{value:r}=t;let{axis:o}=s;o<0&&(o+=r.shape.length);const i=r,a=i.shape.length,l=r.shape[o],u=new Array(a-1);let c=0;for(let g=0;g<a;g++)g!==o&&(u[c++]=i.shape[g]);const h=[],d=new Array(a).fill(0),p=i.shape.slice();p[o]=1;const f=new Array(l);for(let g=0;g<f.length;g++){d[o]=g;const m=gi({inputs:{x:i},backend:e,attrs:{begin:d,size:p}}),A=ce({inputs:{x:m},backend:e,attrs:{shape:u}});f[g]=A,h.push(m)}return h.forEach(g=>e.disposeIntermediateTensorInfo(g)),f}};class p5{constructor(t,e){this.variableNames=["x","segmentIds"];const s=t.windowSize,r=t.batchSize,o=t.inSize,i=t.numSegments,a=i*Math.ceil(o/s);this.outputShape=[r,a];const c=4*Math.floor(s/4),h=s%4,d="\n        sumValue += dot(values, segFilter);\n    ";let p="";o%s>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `);let f="";o%s>0&&(f=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${f}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${i})) * float(${s}));\n        int currentSeg = int(mod(float(outIdx), float(${i})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${d}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${d}\n        } else if (${2===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${d}\n        } else if (${3===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${d}\n        }\n        setOutput(sumValue);\n      }\n    `}}const g5=[jW,XW,JW,nG,rG,aG,uG,hG,mG,AG,bG,CG,NG,_G,$G,OG,PG,VG,WG,HG,jG,e4,n4,i4,l4,p4,m4,x4,DW,I4,T4,D4,P4,z4,U4,G4,K4,X4,Y4,eH,nH,rH,iH,uH,hH,mH,AH,bH,CH,SH,TH,_H,RH,OH,PH,MH,zH,UH,GH,KH,jH,XH,JH,nK,rK,aK,cK,dK,fK,_W,gK,S4,yK,bK,IK,$W,vK,NK,kK,DK,FK,LK,MK,zK,WK,HK,qK,ZK,JK,tq,oq,aq,uq,hq,pq,Aq,bq,vq,_q,LW,Fq,Pq,zq,Wq,u4,Hq,qq,Qq,Yq,nj,OW,rj,ij,lj,cj,hj,c4,Nq,pj,gj,xj,MW,Cj,Nj,_j,$j,Pj,Bj,Vj,Wj,Kj,Qj,Yj,tQ,rQ,iQ,cQ,dQ,JG,kq,fQ,mQ,AQ,xQ,wQ,CQ,SQ,TQ,EQ,DQ,$Q,OQ,PQ,zQ,UQ,GQ,KQ,Tq,HW,jQ,XQ,YQ,t5,o5,l5,KW,c5,d5,{kernelName:du,backendName:"webgl",kernelFunc:function f5(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,segmentIds:o}=t,{numSegments:i}=s,a=r.shape.length,l=[];let u=0;const c=Tt([u],a);let h=r;null!=c&&(h=Nn({inputs:{x:r},backend:e,attrs:{perm:c}}),l.push(h),u=Lt(1,a)[0]);const d=Ax(h.shape,u,i),p=Q([h.shape[u]]),f=ce({inputs:{x:h},backend:e,attrs:{shape:[-1,p]}});l.push(f);const g=kd(r.dtype),m=(b,I,S,k,E)=>{const D=b.shape[0],O=b.shape[1],C=gx(O,E),_=new p5({windowSize:C,inSize:O,batchSize:D,numSegments:E},I),P=e.compileAndRun(_,[b,S],k);if(l.push(P),P.shape[1]===E)return P;const z=XI({backend:e,attrs:{start:0,stop:E,step:1,dtype:"float32"}}),V=JI({inputs:{x:z},backend:e,attrs:{reps:[O/C]}});return l.push(z),l.push(V),m(P,I,V,k,E)},y=ce({inputs:{x:m(f,"unsortedSegmentSum",o,g,i)},backend:e,attrs:{shape:d}});let x=y;if(null!=c){l.push(y);const b=Ir(c);x=Nn({inputs:{x},backend:e,attrs:{perm:b}})}return l.forEach(b=>e.disposeIntermediateTensorInfo(b)),x}},Kq];for(const n of g5)vd(n);!function(){var n=null;function e(C,T,_){if(n=_,e.instance_)return e.instance_;e.instance_=this,this.outerContainerEl=document.querySelector(C),this.containerEl=null,this.snackbarEl=null,this.detailsButton=this.outerContainerEl.querySelector("#details-button"),this.config=T||e.config,this.dimensions=e.defaultDimensions,this.canvas=null,this.canvasCtx=null,this.tRex=null,this.distanceMeter=null,this.distanceRan=0,this.highestScore=0,this.time=0,this.runningTime=0,this.msPerFrame=1e3/r,this.currentSpeed=this.config.SPEED,this.obstacles=[],this.activated=!1,this.playing=!1,this.crashed=!1,this.paused=!1,this.inverted=!1,this.invertTimer=0,this.resizeTimerId_=null,this.playCount=0,this.audioBuffer=null,this.soundFx={},this.audioContext=null,this.images={},this.imagesLoaded=0,this.isDisabled()?this.setupDisabledRunner():this.loadImages()}window.Runner=e;var s=600,r=60,o=window.devicePixelRatio>1,i=/iPad|iPhone|iPod/.test(window.navigator.platform),a=/Android/.test(window.navigator.userAgent)||i;function u(C,T){return Math.floor(Math.random()*(T-C+1))+C}function d(C){for(var T=C.length/4*3,_=atob(C),P=new ArrayBuffer(T),z=new Uint8Array(P),V=0;V<T;V++)z[V]=_.charCodeAt(V);return z.buffer}function p(){return i?(new Date).getTime():performance.now()}function f(C,T,_,P){this.canvas=C,this.canvasCtx=C.getContext("2d"),this.canvasDimensions=P,this.textImgPos=T,this.restartImgPos=_,this.draw()}function m(C,T){return new x(C.x+T.x,C.y+T.y,C.width,C.height)}function A(C,T,_){C.save(),C.strokeStyle="#f00",C.strokeRect(T.x,T.y,T.width,T.height),C.strokeStyle="#0f0",C.strokeRect(_.x,_.y,_.width,_.height),C.restore()}function y(C,T){var _=!1,V=T.x;return C.x<V+T.width&&C.x+C.width>V&&C.y<T.y+T.height&&C.height+C.y>T.y&&(_=!0),_}function x(C,T,_,P){this.x=C,this.y=T,this.width=_,this.height=P}function b(C,T,_,P,z,V,H){this.canvasCtx=C,this.spritePos=_,this.typeConfig=T,this.gapCoefficient=z,this.size=u(1,b.MAX_OBSTACLE_LENGTH),this.dimensions=P,this.remove=!1,this.xPos=P.WIDTH+(H||0),this.yPos=0,this.width=0,this.collisionBoxes=[],this.gap=0,this.speedOffset=0,this.currentFrame=0,this.timer=0,this.init(V)}function I(C,T){this.canvas=C,this.canvasCtx=C.getContext("2d"),this.spritePos=T,this.xPos=0,this.yPos=0,this.groundYPos=0,this.currentFrame=0,this.currentAnimFrames=[],this.blinkDelay=0,this.blinkCount=0,this.animStartTime=0,this.timer=0,this.msPerFrame=1e3/r,this.config=I.config,this.status=I.status.WAITING,this.jumping=!1,this.ducking=!1,this.jumpVelocity=0,this.reachedMinHeight=!1,this.speedDrop=!1,this.jumpCount=0,this.jumpspotX=0,this.init()}function S(C,T,_){this.canvas=C,this.canvasCtx=C.getContext("2d"),this.image=e.imageSprite,this.spritePos=T,this.x=0,this.y=5,this.currentDistance=0,this.maxScore=0,this.highScore=0,this.container=null,this.digits=[],this.acheivement=!1,this.defaultString="",this.flashTimer=0,this.flashIterations=0,this.invertTrigger=!1,this.config=S.config,this.maxScoreUnits=this.config.MAX_DISTANCE_UNITS,this.init(_)}function k(C,T,_){this.canvas=C,this.canvasCtx=this.canvas.getContext("2d"),this.spritePos=T,this.containerWidth=_,this.xPos=_,this.yPos=0,this.remove=!1,this.cloudGap=u(k.config.MIN_CLOUD_GAP,k.config.MAX_CLOUD_GAP),this.init()}function E(C,T,_){this.spritePos=T,this.canvas=C,this.canvasCtx=C.getContext("2d"),this.xPos=_-50,this.yPos=30,this.currentPhase=0,this.opacity=0,this.containerWidth=_,this.stars=[],this.drawStars=!1,this.placeStars()}function D(C,T){this.spritePos=T,this.canvas=C,this.canvasCtx=C.getContext("2d"),this.sourceDimensions={},this.dimensions=D.dimensions,this.sourceXPos=[this.spritePos.x,this.spritePos.x+this.dimensions.WIDTH],this.xPos=[],this.yPos=0,this.bumpThreshold=.5,this.setSourceDimensions(),this.draw()}function O(C,T,_,P){this.canvas=C,this.canvasCtx=this.canvas.getContext("2d"),this.config=O.config,this.dimensions=_,this.gapCoefficient=P,this.obstacles=[],this.obstacleHistory=[],this.horizonOffsets=[0,0],this.cloudFrequency=this.config.CLOUD_FREQUENCY,this.spritePos=T,this.nightMode=null,this.clouds=[],this.cloudSpeed=this.config.BG_CLOUD_SPEED,this.horizonLine=null,this.init()}window,e.config={ACCELERATION:.001,BG_CLOUD_SPEED:.2,BOTTOM_PAD:10,CLEAR_TIME:3e3,CLOUD_FREQUENCY:.5,GAMEOVER_CLEAR_TIME:750,GAP_COEFFICIENT:.6,GRAVITY:.6,INITIAL_JUMP_VELOCITY:12,INVERT_FADE_DURATION:12e3,INVERT_DISTANCE:700,MAX_BLINK_COUNT:3,MAX_CLOUDS:6,MAX_OBSTACLE_LENGTH:3,MAX_OBSTACLE_DUPLICATION:2,MAX_SPEED:10,MIN_JUMP_HEIGHT:35,MOBILE_SPEED_COEFFICIENT:1.2,RESOURCE_TEMPLATE_ID:"audio-resources",SPEED:6,SPEED_DROP_COEFFICIENT:3,ARCADE_MODE_INITIAL_TOP_POSITION:35,ARCADE_MODE_TOP_POSITION_PERCENT:.1},e.defaultDimensions={WIDTH:s,HEIGHT:150},e.classes={ARCADE_MODE:"arcade-mode",CANVAS:"runner-canvas",CONTAINER:"runner-container",CRASHED:"crashed",ICON:"icon-offline",INVERTED:"inverted",SNACKBAR:"snackbar",SNACKBAR_SHOW:"snackbar-show",TOUCH_CONTROLLER:"controller"},e.spriteDefinition={LDPI:{CACTUS_LARGE:{x:332,y:2},CACTUS_SMALL:{x:228,y:2},CLOUD:{x:86,y:2},HORIZON:{x:2,y:54},MOON:{x:484,y:2},PTERODACTYL:{x:134,y:2},RESTART:{x:2,y:2},TEXT_SPRITE:{x:655,y:2},TREX:{x:848,y:2},STAR:{x:645,y:2}},HDPI:{CACTUS_LARGE:{x:652,y:2},CACTUS_SMALL:{x:446,y:2},CLOUD:{x:166,y:2},HORIZON:{x:2,y:104},MOON:{x:954,y:2},PTERODACTYL:{x:260,y:2},RESTART:{x:2,y:2},TEXT_SPRITE:{x:1294,y:2},TREX:{x:1678,y:2},STAR:{x:1276,y:2}}},e.sounds={BUTTON_PRESS:"offline-sound-press",HIT:"offline-sound-hit",SCORE:"offline-sound-reached"},e.keycodes={JUMP:{38:1,32:1},DUCK:{40:1},RESTART:{13:1}},e.events={ANIM_END:"webkitAnimationEnd",CLICK:"click",KEYDOWN:"keydown",KEYUP:"keyup",MOUSEDOWN:"mousedown",MOUSEUP:"mouseup",RESIZE:"resize",TOUCHEND:"touchend",TOUCHSTART:"touchstart",VISIBILITY:"visibilitychange",BLUR:"blur",FOCUS:"focus",LOAD:"load"},e.prototype={isDisabled:function(){return!1},setupDisabledRunner:function(){this.containerEl=document.createElement("div"),this.containerEl.className=e.classes.SNACKBAR,this.containerEl.textContent=loadTimeData.getValue("disabledEasterEgg"),this.outerContainerEl.appendChild(this.containerEl),document.addEventListener(e.events.KEYDOWN,function(C){e.keycodes.JUMP[C.keyCode]&&(this.containerEl.classList.add(e.classes.SNACKBAR_SHOW),document.querySelector(".icon").classList.add("icon-disabled"))}.bind(this))},updateConfigSetting:function(C,T){if(C in this.config&&null!=T)switch(this.config[C]=T,C){case"GRAVITY":case"MIN_JUMP_HEIGHT":case"SPEED_DROP_COEFFICIENT":this.tRex.config[C]=T;break;case"INITIAL_JUMP_VELOCITY":this.tRex.setJumpVelocity(T);break;case"SPEED":this.setSpeed(T)}},loadImages:function(){o?(e.imageSprite=document.getElementById("offline-resources-2x"),this.spriteDef=e.spriteDefinition.HDPI):(e.imageSprite=document.getElementById("offline-resources-1x"),this.spriteDef=e.spriteDefinition.LDPI),e.imageSprite.complete?this.init():e.imageSprite.addEventListener(e.events.LOAD,this.init.bind(this))},loadSounds:function(){if(!i){this.audioContext=new AudioContext;var C=document.getElementById(this.config.RESOURCE_TEMPLATE_ID).content;for(var T in e.sounds){var _=C.getElementById(e.sounds[T]).src,P=d(_=_.substr(_.indexOf(",")+1));this.audioContext.decodeAudioData(P,function(z,V){this.soundFx[z]=V}.bind(this,T))}}},setSpeed:function(C){var T=C||this.currentSpeed;if(this.dimensions.WIDTH<s){var _=T*this.dimensions.WIDTH/s*this.config.MOBILE_SPEED_COEFFICIENT;this.currentSpeed=_>T?T:_}else C&&(this.currentSpeed=C)},init:function(){document.querySelector("."+e.classes.ICON).style.visibility="hidden",this.adjustDimensions(),this.setSpeed(),this.containerEl=document.createElement("div"),this.containerEl.className=e.classes.CONTAINER,this.canvas=function h(C,T,_,P){var z=document.createElement("canvas");return z.className=P?e.classes.CANVAS+" "+P:e.classes.CANVAS,z.width=T,z.height=_,C.appendChild(z),z}(this.containerEl,this.dimensions.WIDTH,this.dimensions.HEIGHT,e.classes.PLAYER),this.canvasCtx=this.canvas.getContext("2d"),this.canvasCtx.fillStyle="#f7f7f7",this.canvasCtx.fill(),e.updateCanvasScaling(this.canvas),this.horizon=new O(this.canvas,this.spriteDef,this.dimensions,this.config.GAP_COEFFICIENT),this.distanceMeter=new S(this.canvas,this.spriteDef.TEXT_SPRITE,this.dimensions.WIDTH),this.tRex=new I(this.canvas,this.spriteDef.TREX),this.outerContainerEl.appendChild(this.containerEl),a&&this.createTouchController(),this.startListening(),this.update(),window.addEventListener(e.events.RESIZE,this.debounceResize.bind(this))},createTouchController:function(){this.touchController=document.createElement("div"),this.touchController.className=e.classes.TOUCH_CONTROLLER,this.outerContainerEl.appendChild(this.touchController)},debounceResize:function(){this.resizeTimerId_||(this.resizeTimerId_=setInterval(this.adjustDimensions.bind(this),250))},adjustDimensions:function(){clearInterval(this.resizeTimerId_),this.resizeTimerId_=null;var C=window.getComputedStyle(this.outerContainerEl),T=Number(C.paddingLeft.substr(0,C.paddingLeft.length-2));this.dimensions.WIDTH=this.outerContainerEl.offsetWidth-2*T,this.dimensions.WIDTH=Math.min(s,this.dimensions.WIDTH),this.activated&&this.setArcadeModeContainerScale(),this.canvas&&(this.canvas.width=this.dimensions.WIDTH,this.canvas.height=this.dimensions.HEIGHT,e.updateCanvasScaling(this.canvas),this.distanceMeter.calcXPos(this.dimensions.WIDTH),this.clearCanvas(),this.horizon.update(0,0,!0),this.tRex.update(0),this.playing||this.crashed||this.paused?(this.containerEl.style.width=this.dimensions.WIDTH+"px",this.containerEl.style.height=this.dimensions.HEIGHT+"px",this.distanceMeter.update(0,Math.ceil(this.distanceRan)),this.stop()):this.tRex.draw(0,0),this.crashed&&this.gameOverPanel&&(this.gameOverPanel.updateDimensions(this.dimensions.WIDTH),this.gameOverPanel.draw()))},playIntro:function(){if(this.activated||this.crashed)this.crashed&&this.restart();else{this.playingIntro=!0,this.tRex.playingIntro=!0;var C="@-webkit-keyframes intro { from { width:"+I.config.WIDTH+"px }to { width: "+this.dimensions.WIDTH+"px }}",T=document.createElement("style");T.innerHTML=C,document.head.appendChild(T),this.containerEl.addEventListener(e.events.ANIM_END,this.startGame.bind(this)),this.containerEl.style.webkitAnimation="intro .4s ease-out 1 both",this.containerEl.style.width=this.dimensions.WIDTH+"px",this.playing=!0,this.activated=!0}},startGame:function(){this.setArcadeMode(),this.runningTime=0,this.playingIntro=!1,this.tRex.playingIntro=!1,this.containerEl.style.webkitAnimation="",this.playCount++,document.addEventListener(e.events.VISIBILITY,this.onVisibilityChange.bind(this)),window.addEventListener(e.events.BLUR,this.onVisibilityChange.bind(this)),window.addEventListener(e.events.FOCUS,this.onVisibilityChange.bind(this))},clearCanvas:function(){this.canvasCtx.clearRect(0,0,this.dimensions.WIDTH,this.dimensions.HEIGHT)},update:function(){this.updatePending=!1;var C=p(),T=C-(this.time||C);if(this.time=C,this.playing){this.clearCanvas(),this.tRex.jumping&&this.tRex.updateJump(T),this.runningTime+=T;var _=this.runningTime>this.config.CLEAR_TIME;1==this.tRex.jumpCount&&!this.playingIntro&&this.playIntro(),this.playingIntro?this.horizon.update(0,this.currentSpeed,_):this.horizon.update(T=this.activated?T:0,this.currentSpeed,_,this.inverted);var P=_&&function g(C,T,_){var z=new x(T.xPos+1,T.yPos+1,T.config.WIDTH-2,T.config.HEIGHT-2),V=new x(C.xPos+1,C.yPos+1,C.typeConfig.width*C.size-2,C.typeConfig.height-2);if(_&&A(_,z,V),y(z,V))for(var H=C.collisionBoxes,K=T.ducking?I.collisionBoxes.DUCKING:I.collisionBoxes.RUNNING,Z=0;Z<K.length;Z++)for(var ee=0;ee<H.length;ee++){var te=m(K[Z],z),ae=m(H[ee],V),oe=y(te,ae);if(_&&A(_,te,ae),oe)return[te,ae]}return!1}(this.horizon.obstacles[0],this.tRex);if(P?this.gameOver():(this.distanceRan+=this.currentSpeed*T/this.msPerFrame,this.currentSpeed<this.config.MAX_SPEED&&(this.currentSpeed+=this.config.ACCELERATION)),this.distanceMeter.update(T,Math.ceil(this.distanceRan))&&this.playSound(this.soundFx.SCORE),this.invertTimer>this.config.INVERT_FADE_DURATION)this.invertTimer=0,this.invertTrigger=!1,this.invert();else if(this.invertTimer)this.invertTimer+=T;else{var V=this.distanceMeter.getActualDistance(Math.ceil(this.distanceRan));V>0&&(this.invertTrigger=!(V%this.config.INVERT_DISTANCE),this.invertTrigger&&0===this.invertTimer&&(this.invertTimer+=T,this.invert()))}}(this.playing||!this.activated&&this.tRex.blinkCount<e.config.MAX_BLINK_COUNT)&&(this.tRex.update(T),this.scheduleNextUpdate())},handleEvent:function(C){return function(T,_){switch(T){case _.KEYDOWN:case _.TOUCHSTART:case _.MOUSEDOWN:this.onKeyDown(C);break;case _.KEYUP:case _.TOUCHEND:case _.MOUSEUP:this.onKeyUp(C)}}.bind(this)(C.type,e.events)},startListening:function(){document.addEventListener(e.events.KEYDOWN,this),document.addEventListener(e.events.KEYUP,this),a?(this.touchController.addEventListener(e.events.TOUCHSTART,this),this.touchController.addEventListener(e.events.TOUCHEND,this),this.containerEl.addEventListener(e.events.TOUCHSTART,this)):(document.addEventListener(e.events.MOUSEDOWN,this),document.addEventListener(e.events.MOUSEUP,this))},stopListening:function(){document.removeEventListener(e.events.KEYDOWN,this),document.removeEventListener(e.events.KEYUP,this),a?(this.touchController.removeEventListener(e.events.TOUCHSTART,this),this.touchController.removeEventListener(e.events.TOUCHEND,this),this.containerEl.removeEventListener(e.events.TOUCHSTART,this)):(document.removeEventListener(e.events.MOUSEDOWN,this),document.removeEventListener(e.events.MOUSEUP,this))},onKeyDown:function(C){a&&this.playing&&C.preventDefault(),!this.crashed&&(e.keycodes.JUMP[C.keyCode]||C.type==e.events.TOUCHSTART)&&(this.playing||(this.loadSounds(),this.playing=!0,this.update(),window.errorPageController&&errorPageController.trackEasterEgg()),!this.tRex.jumping&&!this.tRex.ducking&&(this.playSound(this.soundFx.BUTTON_PRESS),this.tRex.startJump(this.currentSpeed))),this.crashed&&C.type==e.events.TOUCHSTART&&C.currentTarget==this.containerEl&&this.restart(),this.playing&&!this.crashed&&e.keycodes.DUCK[C.keyCode]&&(C.preventDefault(),this.tRex.jumping?this.tRex.setSpeedDrop():!this.tRex.jumping&&!this.tRex.ducking&&this.tRex.setDuck(!0))},onKeyUp:function(C){var T=String(C.keyCode),_=e.keycodes.JUMP[T]||C.type==e.events.TOUCHEND||C.type==e.events.MOUSEDOWN;if(this.isRunning()&&_)this.tRex.endJump();else if(e.keycodes.DUCK[T])this.tRex.speedDrop=!1,this.tRex.setDuck(!1);else if(this.crashed){var P=p()-this.time;(e.keycodes.RESTART[T]||this.isLeftClickOnCanvas(C)||P>=this.config.GAMEOVER_CLEAR_TIME&&e.keycodes.JUMP[T])&&this.restart()}else this.paused&&_&&(this.tRex.reset(),this.play())},isLeftClickOnCanvas:function(C){return null!=C.button&&C.button<2&&C.type==e.events.MOUSEUP&&C.target==this.canvas},scheduleNextUpdate:function(){this.updatePending||(this.updatePending=!0,this.raqId=requestAnimationFrame(this.update.bind(this)))},isRunning:function(){return!!this.raqId},gameOver:function(){this.playSound(this.soundFx.HIT),function c(C){a&&window.navigator.vibrate&&window.navigator.vibrate(C)}(200),this.stop(),this.crashed=!0,this.distanceMeter.acheivement=!1,this.tRex.update(100,I.status.CRASHED),this.gameOverPanel?this.gameOverPanel.draw():this.gameOverPanel=new f(this.canvas,this.spriteDef.TEXT_SPRITE,this.spriteDef.RESTART,this.dimensions),this.distanceRan>this.highestScore&&(this.highestScore=Math.ceil(this.distanceRan),this.distanceMeter.setHighScore(this.highestScore)),this.time=p()},stop:function(){this.playing=!1,this.paused=!0,cancelAnimationFrame(this.raqId),this.raqId=0},play:function(){this.crashed||(this.playing=!0,this.paused=!1,this.tRex.update(0,I.status.RUNNING),this.time=p(),this.update())},restart:function(){this.raqId||(this.playCount++,this.runningTime=0,this.playing=!0,this.crashed=!1,this.distanceRan=0,this.setSpeed(this.config.SPEED),this.time=p(),this.containerEl.classList.remove(e.classes.CRASHED),this.clearCanvas(),this.distanceMeter.reset(this.highestScore),this.horizon.reset(),this.tRex.reset(),this.playSound(this.soundFx.BUTTON_PRESS),this.invert(!0),this.update())},setArcadeMode(){document.body.classList.add(e.classes.ARCADE_MODE),this.setArcadeModeContainerScale()},setArcadeModeContainerScale(){const C=window.innerHeight,_=window.innerWidth/this.dimensions.WIDTH,P=Math.max(1,Math.min(C/this.dimensions.HEIGHT,_)),V=Math.ceil(Math.max(0,(C-this.dimensions.HEIGHT*P-e.config.ARCADE_MODE_INITIAL_TOP_POSITION)*e.config.ARCADE_MODE_TOP_POSITION_PERCENT))*window.devicePixelRatio;this.containerEl.style.transform="scale("+P+") translateY("+V+"px)"},onVisibilityChange:function(C){document.hidden||document.webkitHidden||"blur"==C.type||"visible"!=document.visibilityState?this.stop():this.crashed||(this.tRex.reset(),this.play())},playSound:function(C){if(C){var T=this.audioContext.createBufferSource();T.buffer=C,T.connect(this.audioContext.destination),T.start(0)}},invert:function(C){C?(document.body.classList.toggle(e.classes.INVERTED,!1),this.invertTimer=0,this.inverted=!1):this.inverted=document.body.classList.toggle(e.classes.INVERTED,this.invertTrigger)}},e.updateCanvasScaling=function(C,T,_){var P=C.getContext("2d"),z=Math.floor(window.devicePixelRatio)||1,V=Math.floor(P.webkitBackingStorePixelRatio)||1,H=z/V;if(z!==V){var K=T||C.width,Z=_||C.height;return C.width=K*H,C.height=Z*H,C.style.width=K+"px",C.style.height=Z+"px",P.scale(H,H),!0}return 1==z&&(C.style.width=C.width+"px",C.style.height=C.height+"px"),!1},f.dimensions={TEXT_X:0,TEXT_Y:13,TEXT_WIDTH:191,TEXT_HEIGHT:11,RESTART_WIDTH:36,RESTART_HEIGHT:32},f.prototype={updateDimensions:function(C,T){this.canvasDimensions.WIDTH=C,T&&(this.canvasDimensions.HEIGHT=T)},draw:function(){var C=f.dimensions,T=this.canvasDimensions.WIDTH/2,_=C.TEXT_X,P=C.TEXT_Y,z=C.TEXT_WIDTH,V=C.TEXT_HEIGHT,H=Math.round(T-C.TEXT_WIDTH/2),K=Math.round((this.canvasDimensions.HEIGHT-25)/3),te=C.RESTART_WIDTH,ae=C.RESTART_HEIGHT,oe=T-C.RESTART_WIDTH/2,pe=this.canvasDimensions.HEIGHT/2;o&&(P*=2,_*=2,z*=2,V*=2,te*=2,ae*=2),this.canvasCtx.drawImage(e.imageSprite,_+=this.textImgPos.x,P+=this.textImgPos.y,z,V,H,K,C.TEXT_WIDTH,C.TEXT_HEIGHT),this.canvasCtx.drawImage(e.imageSprite,this.restartImgPos.x,this.restartImgPos.y,te,ae,oe,pe,C.RESTART_WIDTH,C.RESTART_HEIGHT)}},b.MAX_GAP_COEFFICIENT=1.5,b.MAX_OBSTACLE_LENGTH=3,b.prototype={init:function(C){if(this.cloneCollisionBoxes(),this.size>1&&this.typeConfig.multipleSpeed>C&&(this.size=1),this.width=this.typeConfig.width*this.size,Array.isArray(this.typeConfig.yPos)){var T=a?this.typeConfig.yPosMobile:this.typeConfig.yPos;this.yPos=T[u(0,T.length-1)]}else this.yPos=this.typeConfig.yPos;this.draw(C),this.size>1&&(this.collisionBoxes[1].width=this.width-this.collisionBoxes[0].width-this.collisionBoxes[2].width,this.collisionBoxes[2].x=this.width-this.collisionBoxes[2].width),this.typeConfig.speedOffset&&(this.speedOffset=Math.random()>.5?this.typeConfig.speedOffset:-this.typeConfig.speedOffset),this.gap=this.getGap(this.gapCoefficient,C)},draw:function(C){var T=this.typeConfig.width,_=this.typeConfig.height;o&&(T*=2,_*=2);var P=T*this.size*(.5*(this.size-1))+this.spritePos.x;this.currentFrame>0&&(P+=T*this.currentFrame),this.canvasCtx.drawImage(e.imageSprite,P,this.spritePos.y,T*this.size,_,this.xPos,this.yPos,this.typeConfig.width*this.size,this.typeConfig.height)},update:function(C,T){this.remove||(this.typeConfig.speedOffset&&(T+=this.speedOffset),this.xPos-=Math.floor(T*r/1e3*C),this.typeConfig.numFrames&&(this.timer+=C,this.timer>=this.typeConfig.frameRate&&(this.currentFrame=this.currentFrame==this.typeConfig.numFrames-1?0:this.currentFrame+1,this.timer=0)),this.draw(T),this.isVisible()||(this.remove=!0))},getGap:function(C,T){var _=Math.round(this.width*T+this.typeConfig.minGap*C);return u(_,Math.round(_*b.MAX_GAP_COEFFICIENT))},isVisible:function(){return this.xPos+this.width>0},cloneCollisionBoxes:function(){for(var C=this.typeConfig.collisionBoxes,T=C.length-1;T>=0;T--)this.collisionBoxes[T]=new x(C[T].x,C[T].y,C[T].width,C[T].height)}},b.types=[{type:"CACTUS_SMALL",width:17,height:35,yPos:105,multipleSpeed:4,minGap:120,minSpeed:0,collisionBoxes:[new x(0,7,5,27),new x(4,0,6,34),new x(10,4,7,14)]},{type:"CACTUS_LARGE",width:25,height:50,yPos:90,multipleSpeed:7,minGap:120,minSpeed:0,collisionBoxes:[new x(0,12,7,38),new x(8,0,7,49),new x(13,10,10,38)]},{type:"PTERODACTYL",width:46,height:40,yPos:[100,75,50],yPosMobile:[100,50],multipleSpeed:999,minSpeed:8.5,minGap:150,collisionBoxes:[new x(15,15,16,5),new x(18,21,24,6),new x(2,14,4,3),new x(6,10,4,7),new x(10,8,6,9)],numFrames:2,frameRate:1e3/6,speedOffset:.8}],I.config={DROP_VELOCITY:-5,GRAVITY:.6,HEIGHT:47,HEIGHT_DUCK:25,INIITAL_JUMP_VELOCITY:-10,INTRO_DURATION:1500,MAX_JUMP_HEIGHT:30,MIN_JUMP_HEIGHT:30,SPEED_DROP_COEFFICIENT:3,SPRITE_WIDTH:262,START_X_POS:50,WIDTH:44,WIDTH_DUCK:59},I.collisionBoxes={DUCKING:[new x(1,18,55,25)],RUNNING:[new x(22,0,17,16),new x(1,18,30,9),new x(10,35,14,8),new x(1,24,29,5),new x(5,30,21,4),new x(9,34,15,4)]},I.status={CRASHED:"CRASHED",DUCKING:"DUCKING",JUMPING:"JUMPING",RUNNING:"RUNNING",WAITING:"WAITING"},I.BLINK_TIMING=7e3,I.animFrames={WAITING:{frames:[44,0],msPerFrame:1e3/3},RUNNING:{frames:[88,132],msPerFrame:1e3/12},CRASHED:{frames:[220],msPerFrame:1e3/60},JUMPING:{frames:[0],msPerFrame:1e3/60},DUCKING:{frames:[264,323],msPerFrame:125}},I.prototype={init:function(){this.groundYPos=e.defaultDimensions.HEIGHT-this.config.HEIGHT-e.config.BOTTOM_PAD,this.yPos=this.groundYPos,this.minJumpHeight=this.groundYPos-this.config.MIN_JUMP_HEIGHT,this.draw(0,0),this.update(0,I.status.WAITING)},setJumpVelocity:function(C){this.config.INIITAL_JUMP_VELOCITY=-C,this.config.DROP_VELOCITY=-C/2},update:function(C,T){this.timer+=C,T&&(this.status=T,this.currentFrame=0,this.msPerFrame=I.animFrames[T].msPerFrame,this.currentAnimFrames=I.animFrames[T].frames,T==I.status.WAITING&&(this.animStartTime=p(),this.setBlinkDelay())),this.playingIntro&&this.xPos<this.config.START_X_POS&&(this.xPos+=Math.round(this.config.START_X_POS/this.config.INTRO_DURATION*C)),this.status==I.status.WAITING?this.blink(p()):this.draw(this.currentAnimFrames[this.currentFrame],0),this.timer>=this.msPerFrame&&(this.currentFrame=this.currentFrame==this.currentAnimFrames.length-1?0:this.currentFrame+1,this.timer=0),this.speedDrop&&this.yPos==this.groundYPos&&(this.speedDrop=!1,this.setDuck(!0))},draw:function(C,T){var _=C,P=T,z=this.ducking&&this.status!=I.status.CRASHED?this.config.WIDTH_DUCK:this.config.WIDTH,V=this.config.HEIGHT;o&&(_*=2,P*=2,z*=2,V*=2),_+=this.spritePos.x,P+=this.spritePos.y,this.ducking&&this.status!=I.status.CRASHED?this.canvasCtx.drawImage(e.imageSprite,_,P,z,V,this.xPos,this.yPos,this.config.WIDTH_DUCK,this.config.HEIGHT):(this.ducking&&this.status==I.status.CRASHED&&this.xPos++,this.canvasCtx.drawImage(e.imageSprite,_,P,z,V,this.xPos,this.yPos,this.config.WIDTH,this.config.HEIGHT))},setBlinkDelay:function(){this.blinkDelay=Math.ceil(Math.random()*I.BLINK_TIMING)},blink:function(C){C-this.animStartTime>=this.blinkDelay&&(this.draw(this.currentAnimFrames[this.currentFrame],0),1==this.currentFrame&&(this.setBlinkDelay(),this.animStartTime=C,this.blinkCount++))},startJump:function(C){console.log(C),this.jumping||(this.update(0,I.status.JUMPING),this.jumpVelocity=this.config.INIITAL_JUMP_VELOCITY-C/10,this.jumping=!0,this.reachedMinHeight=!1,this.speedDrop=!1)},endJump:function(){this.reachedMinHeight&&this.jumpVelocity<this.config.DROP_VELOCITY&&(this.jumpVelocity=this.config.DROP_VELOCITY)},updateJump:function(C,T){var P=C/I.animFrames[this.status].msPerFrame;this.yPos+=this.speedDrop?Math.round(this.jumpVelocity*this.config.SPEED_DROP_COEFFICIENT*P):Math.round(this.jumpVelocity*P),this.jumpVelocity+=this.config.GRAVITY*P,(this.yPos<this.minJumpHeight||this.speedDrop)&&(this.reachedMinHeight=!0),(this.yPos<this.config.MAX_JUMP_HEIGHT||this.speedDrop)&&this.endJump(),this.yPos>this.groundYPos&&(this.reset(),this.jumpCount++),this.update(C)},setSpeedDrop:function(){this.speedDrop=!0,this.jumpVelocity=1},setDuck:function(C){C&&this.status!=I.status.DUCKING?(this.update(0,I.status.DUCKING),this.ducking=!0):this.status==I.status.DUCKING&&(this.update(0,I.status.RUNNING),this.ducking=!1)},reset:function(){this.yPos=this.groundYPos,this.jumpVelocity=0,this.jumping=!1,this.ducking=!1,this.update(0,I.status.RUNNING),this.midair=!1,this.speedDrop=!1,this.jumpCount=0}},S.dimensions={WIDTH:10,HEIGHT:13,DEST_WIDTH:11},S.yPos=[0,13,27,40,53,67,80,93,107,120],S.config={MAX_DISTANCE_UNITS:5,ACHIEVEMENT_DISTANCE:100,COEFFICIENT:.025,FLASH_DURATION:250,FLASH_ITERATIONS:3},S.prototype={init:function(C){var T="";this.calcXPos(C),this.maxScore=this.maxScoreUnits;for(var _=0;_<this.maxScoreUnits;_++)this.draw(_,0),this.defaultString+="0",T+="9";this.maxScore=parseInt(T)},calcXPos:function(C){this.x=C-S.dimensions.DEST_WIDTH*(this.maxScoreUnits+1)},draw:function(C,T,_){var P=S.dimensions.WIDTH,z=S.dimensions.HEIGHT,V=S.dimensions.WIDTH*T,H=0,K=C*S.dimensions.DEST_WIDTH,Z=this.y,ee=S.dimensions.WIDTH,te=S.dimensions.HEIGHT;o&&(P*=2,z*=2,V*=2),V+=this.spritePos.x,H+=this.spritePos.y,this.canvasCtx.save(),this.canvasCtx.translate(_?this.x-2*this.maxScoreUnits*S.dimensions.WIDTH:this.x,this.y),this.canvasCtx.drawImage(this.image,V,H,P,z,K,Z,ee,te),this.canvasCtx.restore()},getActualDistance:function(C){return C?Math.round(C*this.config.COEFFICIENT):0},update:function(C,T){var _=!0,P=!1;if(this.acheivement)this.flashIterations<=this.config.FLASH_ITERATIONS?(this.flashTimer+=C,this.flashTimer<this.config.FLASH_DURATION?_=!1:this.flashTimer>2*this.config.FLASH_DURATION&&(this.flashTimer=0,this.flashIterations++)):(this.acheivement=!1,this.flashIterations=0,this.flashTimer=0);else if((T=this.getActualDistance(T))>this.maxScore&&this.maxScoreUnits==this.config.MAX_DISTANCE_UNITS?(this.maxScoreUnits++,this.maxScore=parseInt(this.maxScore+"9")):this.distance=0,T>0){T%this.config.ACHIEVEMENT_DISTANCE==0&&(this.acheivement=!0,this.flashTimer=0,P=!0);var z=(this.defaultString+T).substr(-this.maxScoreUnits);this.digits=z.split("")}else this.digits=this.defaultString.split("");if(_)for(var V=this.digits.length-1;V>=0;V--)this.draw(V,parseInt(this.digits[V]));return this.drawHighScore(),P},drawHighScore:function(){this.canvasCtx.save(),this.canvasCtx.globalAlpha=.8;for(var C=this.highScore.length-1;C>=0;C--)this.draw(C,parseInt(this.highScore[C],10),!0);this.canvasCtx.restore()},setHighScore:function(C){C=this.getActualDistance(C);var T=(this.defaultString+C).substr(-this.maxScoreUnits);this.highScore=["10","11",""].concat(T.split(""))},reset:function(){this.update(0),this.acheivement=!1}},k.config={HEIGHT:14,MAX_CLOUD_GAP:400,MAX_SKY_LEVEL:30,MIN_CLOUD_GAP:100,MIN_SKY_LEVEL:71,WIDTH:46},k.prototype={init:function(){this.yPos=u(k.config.MAX_SKY_LEVEL,k.config.MIN_SKY_LEVEL),this.draw()},draw:function(){this.canvasCtx.save();var C=k.config.WIDTH,T=k.config.HEIGHT;o&&(C*=2,T*=2),this.canvasCtx.drawImage(e.imageSprite,this.spritePos.x,this.spritePos.y,C,T,this.xPos,this.yPos,k.config.WIDTH,k.config.HEIGHT),this.canvasCtx.restore()},update:function(C){this.remove||(this.xPos-=Math.ceil(C),this.draw(),this.isVisible()||(this.remove=!0))},isVisible:function(){return this.xPos+k.config.WIDTH>0}},E.config={FADE_SPEED:.035,HEIGHT:40,MOON_SPEED:.25,NUM_STARS:2,STAR_SIZE:9,STAR_SPEED:.3,STAR_MAX_Y:70,WIDTH:20},E.phases=[140,120,100,60,40,20,0],E.prototype={update:function(C,T){if(C&&0==this.opacity&&(this.currentPhase++,this.currentPhase>=E.phases.length&&(this.currentPhase=0)),C&&(this.opacity<1||0==this.opacity)?this.opacity+=E.config.FADE_SPEED:this.opacity>0&&(this.opacity-=E.config.FADE_SPEED),this.opacity>0){if(this.xPos=this.updateXPos(this.xPos,E.config.MOON_SPEED),this.drawStars)for(var _=0;_<E.config.NUM_STARS;_++)this.stars[_].x=this.updateXPos(this.stars[_].x,E.config.STAR_SPEED);this.draw()}else this.opacity=0,this.placeStars();this.drawStars=!0},updateXPos:function(C,T){return C<-E.config.WIDTH?C=this.containerWidth:C-=T,C},draw:function(){var C=3==this.currentPhase?2*E.config.WIDTH:E.config.WIDTH,T=E.config.HEIGHT,_=this.spritePos.x+E.phases[this.currentPhase],P=C,z=E.config.STAR_SIZE,V=e.spriteDefinition.LDPI.STAR.x;if(o&&(C*=2,T*=2,_=this.spritePos.x+2*E.phases[this.currentPhase],z*=2,V=e.spriteDefinition.HDPI.STAR.x),this.canvasCtx.save(),this.canvasCtx.globalAlpha=this.opacity,this.drawStars)for(var H=0;H<E.config.NUM_STARS;H++)this.canvasCtx.drawImage(e.imageSprite,V,this.stars[H].sourceY,z,z,Math.round(this.stars[H].x),this.stars[H].y,E.config.STAR_SIZE,E.config.STAR_SIZE);this.canvasCtx.drawImage(e.imageSprite,_,this.spritePos.y,C,T,Math.round(this.xPos),this.yPos,P,E.config.HEIGHT),this.canvasCtx.globalAlpha=1,this.canvasCtx.restore()},placeStars:function(){for(var C=Math.round(this.containerWidth/E.config.NUM_STARS),T=0;T<E.config.NUM_STARS;T++)this.stars[T]={},this.stars[T].x=u(C*T,C*(T+1)),this.stars[T].y=u(0,E.config.STAR_MAX_Y),this.stars[T].sourceY=o?e.spriteDefinition.HDPI.STAR.y+2*E.config.STAR_SIZE*T:e.spriteDefinition.LDPI.STAR.y+E.config.STAR_SIZE*T},reset:function(){this.currentPhase=0,this.opacity=0,this.update(!1)}},D.dimensions={WIDTH:600,HEIGHT:12,YPOS:127},D.prototype={setSourceDimensions:function(){for(var C in D.dimensions)o?"YPOS"!=C&&(this.sourceDimensions[C]=2*D.dimensions[C]):this.sourceDimensions[C]=D.dimensions[C],this.dimensions[C]=D.dimensions[C];this.xPos=[0,D.dimensions.WIDTH],this.yPos=D.dimensions.YPOS},getRandomType:function(){return Math.random()>this.bumpThreshold?this.dimensions.WIDTH:0},draw:function(){this.canvasCtx.drawImage(e.imageSprite,this.sourceXPos[0],this.spritePos.y,this.sourceDimensions.WIDTH,this.sourceDimensions.HEIGHT,this.xPos[0],this.yPos,this.dimensions.WIDTH,this.dimensions.HEIGHT),this.canvasCtx.drawImage(e.imageSprite,this.sourceXPos[1],this.spritePos.y,this.sourceDimensions.WIDTH,this.sourceDimensions.HEIGHT,this.xPos[1],this.yPos,this.dimensions.WIDTH,this.dimensions.HEIGHT)},updateXPos:function(C,T){var _=C,P=0==C?1:0;this.xPos[_]-=T,this.xPos[P]=this.xPos[_]+this.dimensions.WIDTH,this.xPos[_]<=-this.dimensions.WIDTH&&(this.xPos[_]+=2*this.dimensions.WIDTH,this.xPos[P]=this.xPos[_]-this.dimensions.WIDTH,this.sourceXPos[_]=this.getRandomType()+this.spritePos.x)},update:function(C,T){var _=Math.floor(T*(r/1e3)*C);this.updateXPos(this.xPos[0]<=0?0:1,_),this.draw()},reset:function(){this.xPos[0]=0,this.xPos[1]=D.dimensions.WIDTH}},O.config={BG_CLOUD_SPEED:.2,BUMPY_THRESHOLD:.3,CLOUD_FREQUENCY:.5,HORIZON_HEIGHT:16,MAX_CLOUDS:6},O.prototype={init:function(){this.addCloud(),this.horizonLine=new D(this.canvas,this.spritePos.HORIZON),this.nightMode=new E(this.canvas,this.spritePos.MOON,this.dimensions.WIDTH)},update:function(C,T,_,P){this.runningTime+=C,this.horizonLine.update(C,T),this.nightMode.update(P),this.updateClouds(C,T),_&&this.updateObstacles(C,T)},updateClouds:function(C,T){var _=this.cloudSpeed/1e3*C*T,P=this.clouds.length;if(P){for(var z=P-1;z>=0;z--)this.clouds[z].update(_);var V=this.clouds[P-1];P<this.config.MAX_CLOUDS&&this.dimensions.WIDTH-V.xPos>V.cloudGap&&this.cloudFrequency>Math.random()&&this.addCloud(),this.clouds=this.clouds.filter(function(H){return!H.remove})}else this.addCloud()},updateObstacles:function(C,T){var _=this.obstacles.slice(0);_[0]&&n(_[0].typeConfig.type,_[0].xPos,_[0].yPos,T);for(var P=0;P<this.obstacles.length;P++){var z=this.obstacles[P];z.update(C,T),z.remove&&_.shift()}if(this.obstacles=_,this.obstacles.length>0){var V=this.obstacles[this.obstacles.length-1];V&&!V.followingObstacleCreated&&V.isVisible()&&V.xPos+V.width+V.gap<this.dimensions.WIDTH&&(this.addNewObstacle(T),V.followingObstacleCreated=!0)}else this.addNewObstacle(T)},removeFirstObstacle:function(){this.obstacles.shift()},addNewObstacle:function(C){var T=u(0,b.types.length-1),_=b.types[T];this.duplicateObstacleCheck(_.type)||C<_.minSpeed?this.addNewObstacle(C):(this.obstacles.push(new b(this.canvasCtx,_,this.spritePos[_.type],this.dimensions,this.gapCoefficient,C,_.width)),this.obstacleHistory.unshift(_.type),this.obstacleHistory.length>1&&this.obstacleHistory.splice(e.config.MAX_OBSTACLE_DUPLICATION))},duplicateObstacleCheck:function(C){for(var T=0,_=0;_<this.obstacleHistory.length;_++)T=this.obstacleHistory[_]==C?T+1:0;return T>=e.config.MAX_OBSTACLE_DUPLICATION},reset:function(){this.obstacles=[],this.horizonLine.reset(),this.nightMode.reset()},resize:function(C,T){this.canvas.width=C,this.canvas.height=T},addCloud:function(){this.clouds.push(new k(this.canvas,this.spritePos.CLOUD,this.dimensions.WIDTH))}}}();class y5{constructor(t){this.isDuck=!1,this.runner=new Runner(".interstitial-wrapper",void 0,t)}jump(){this.runner.tRex.startJump(this.runner.currentSpeed)}crouched(){!this.runner.tRex.jumping==!this.runner.tRex.ducking&&this.runner.tRex.setDuck(!0)}run(){this.runner.tRex.setDuck(!1)}buildFakeData(){const o=[],i=(l,u,c,h)=>{let d="RUN";return c<0&&"PTERODACTYL"!==l&&(d="RUN"),d=c<0&&"PTERODACTYL"===l?"CROUCHED":c>120&&"PTERODACTYL"!==l?"RUN":"CACTUS_SMALL"===l&&c<100?"JUMP":"PTERODACTYL"===l&&h<100?"CROUCHED":"PTERODACTYL"===l&&c<100&&100===h||"CACTUS_LARGE"===l&&c<100?"JUMP":"RUN",[l,c,h,u,d]},a=(l,u,c)=>{let h=6;const p=[];for(;h<=13.1;){let f=650;for(;f>c;)p.push(i(l,h,f,u)),f-=1;h+=.1}return p};return o.push(...a("CACTUS_SMALL",100,-30)),o.push(...a("CACTUS_LARGE",100,-30)),o.push(...a("PTERODACTYL",100,-30)),o.push(...a("PTERODACTYL",75,-10)),o.push(...a("PTERODACTYL",50,-30)),o}}let x5=(()=>{var n;class t{constructor(){this.runner=null,this.model=null,this.myJson=[],function AF(n){return _m.apply(this,arguments)}("assets/web_dino_model/model.json").then(s=>{this.model=s})}ngOnInit(){this.runner=new y5(this.obstaclePositionCallback.bind(this))}obstaclePositionCallback(s,r,o,i){var a,l,u;const h=["JUMP","Crouched","RUN"],p=St([[["CACTUS_SMALL","CACTUS_LARGE","PTERODACTYL"].findIndex(g=>g===s),r,o,i]]);if(this.model){var f;const m=(null===(f=this.model)||void 0===f?void 0:f.predict(p)).squeeze().arraySync(),A=Math.max(...m);switch(h[m.findIndex(b=>b===A)]){case"JUMP":null===(a=this.runner)||void 0===a||a.jump();break;case"Crouched":null===(l=this.runner)||void 0===l||l.crouched();break;case"RUN":null===(u=this.runner)||void 0===u||u.run()}}}}return(n=t).\u0275fac=function(s){return new(s||n)},n.\u0275cmp=ge.Xpm({type:n,selectors:[["app-dino-game"]],decls:21,vars:0,consts:[["id","t",1,"offline"],["id","messageBox",1,"sendmessage"],[2,"text-align","center","font-family","'Open Sans', sans-serif"],["onclick","okbuttonsend()",1,"niokbutton"],["id","main-frame-error",1,"interstitial-wrapper"],["id","main-content"],["alt","",1,"icon","icon-offline",2,"visibility","hidden"],["id","offline-resources"],["id","offline-resources-1x","src","assets/default_100_percent/100-offline-sprite.png"],["id","offline-resources-2x","src","assets/default_200_percent/200-offline-sprite.png"],["id","audio-resources"],["id","offline-sound-press","src","data:audio/mpeg;base64,T2dnUwACAAAAAAAAAABVDxppAAAAABYzHfUBHgF2b3JiaXMAAAAAAkSsAAD/////AHcBAP////+4AU9nZ1MAAAAAAAAAAAAAVQ8aaQEAAAC9PVXbEEf//////////////////+IDdm9yYmlzNwAAAEFPOyBhb1R1ViBiNSBbMjAwNjEwMjRdIChiYXNlZCBvbiBYaXBoLk9yZydzIGxpYlZvcmJpcykAAAAAAQV2b3JiaXMlQkNWAQBAAAAkcxgqRqVzFoQQGkJQGeMcQs5r7BlCTBGCHDJMW8slc5AhpKBCiFsogdCQVQAAQAAAh0F4FISKQQghhCU9WJKDJz0IIYSIOXgUhGlBCCGEEEIIIYQQQgghhEU5aJKDJ0EIHYTjMDgMg+U4+ByERTlYEIMnQegghA9CuJqDrDkIIYQkNUhQgwY56ByEwiwoioLEMLgWhAQ1KIyC5DDI1IMLQoiag0k1+BqEZ0F4FoRpQQghhCRBSJCDBkHIGIRGQViSgwY5uBSEy0GoGoQqOQgfhCA0ZBUAkAAAoKIoiqIoChAasgoAyAAAEEBRFMdxHMmRHMmxHAsIDVkFAAABAAgAAKBIiqRIjuRIkiRZkiVZkiVZkuaJqizLsizLsizLMhAasgoASAAAUFEMRXEUBwgNWQUAZAAACKA4iqVYiqVoiueIjgiEhqwCAIAAAAQAABA0Q1M8R5REz1RV17Zt27Zt27Zt27Zt27ZtW5ZlGQgNWQUAQAAAENJpZqkGiDADGQZCQ1YBAAgAAIARijDEgNCQVQAAQAAAgBhKDqIJrTnfnOOgWQ6aSrE5HZxItXmSm4q5Oeecc87J5pwxzjnnnKKcWQyaCa0555zEoFkKmgmtOeecJ7F50JoqrTnnnHHO6WCcEcY555wmrXmQmo21OeecBa1pjppLsTnnnEi5eVKbS7U555xzzjnnnHPOOeec6sXpHJwTzjnnnKi9uZab0MU555xPxunenBDOOeecc84555xzzjnnnCA0ZBUAAAQAQBCGjWHcKQjS52ggRhFiGjLpQffoMAkag5xC6tHoaKSUOggllXFSSicIDVkFAAACAEAIIYUUUkghhRRSSCGFFGKIIYYYcsopp6CCSiqpqKKMMssss8wyyyyzzDrsrLMOOwwxxBBDK63EUlNtNdZYa+4555qDtFZaa621UkoppZRSCkJDVgEAIAAABEIGGWSQUUghhRRiiCmnnHIKKqiA0JBVAAAgAIAAAAAAT/Ic0REd0REd0REd0REd0fEczxElURIlURIt0zI101NFVXVl15Z1Wbd9W9iFXfd93fd93fh1YViWZVmWZVmWZVmWZVmWZVmWIDRkFQAAAgAAIIQQQkghhRRSSCnGGHPMOegklBAIDVkFAAACAAgAAABwFEdxHMmRHEmyJEvSJM3SLE/zNE8TPVEURdM0VdEVXVE3bVE2ZdM1XVM2XVVWbVeWbVu2dduXZdv3fd/3fd/3fd/3fd/3fV0HQkNWAQASAAA6kiMpkiIpkuM4jiRJQGjIKgBABgBAAACK4iiO4ziSJEmSJWmSZ3mWqJma6ZmeKqpAaMgqAAAQAEAAAAAAAACKpniKqXiKqHiO6IiSaJmWqKmaK8qm7Lqu67qu67qu67qu67qu67qu67qu67qu67qu67qu67qu67quC4SGrAIAJAAAdCRHciRHUiRFUiRHcoDQkFUAgAwAgAAAHMMxJEVyLMvSNE/zNE8TPdETPdNTRVd0gdCQVQAAIACAAAAAAAAADMmwFMvRHE0SJdVSLVVTLdVSRdVTVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTdM0TRMIDVkJAJABAKAQW0utxdwJahxi0nLMJHROYhCqsQgiR7W3yjGlHMWeGoiUURJ7qihjiknMMbTQKSet1lI6hRSkmFMKFVIOWiA0ZIUAEJoB4HAcQLIsQLI0AAAAAAAAAJA0DdA8D7A8DwAAAAAAAAAkTQMsTwM0zwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQNI0QPM8QPM8AAAAAAAAANA8D/BEEfBEEQAAAAAAAAAszwM80QM8UQQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwNE0QPM8QPM8AAAAAAAAALA8D/BEEfA8EQAAAAAAAAA0zwgAAAQYCEUGrIiAIgTADA4DjQNmgbPAziWBc+D50EUAY5lwfPgeRBFAAAAAAAAAAAAADTPg6pCVeGqAM3zYKpQVaguAAAAAAAAAAAAAJbnQVWhqnBdgOV5MFWYKlQVAAAAAAAAAAAAAE8UobpQXbgqwDNFuCpcFaoLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAABhwAAAIMKEMFBqyIgCIEwBwOIplAQCA4ziWBQAAjuNYFgAAWJYligAAYFmaKAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAGHAAAAgwoQwUGrISAIgCADAoimUBy7IsYFmWBTTNsgCWBtA8gOcBRBEACAAAKHAAAAiwQVNicYBCQ1YCAFEAAAZFsSxNE0WapmmaJoo0TdM0TRR5nqZ5nmlC0zzPNCGKnmeaEEXPM02YpiiqKhBFVRUAAFDgAAAQYIOmxOIAhYasBABCAgAMjmJZnieKoiiKpqmqNE3TPE8URdE0VdVVaZqmeZ4oiqJpqqrq8jxNE0XTFEXTVFXXhaaJommaommqquvC80TRNE1TVVXVdeF5omiapqmqruu6EEVRNE3TVFXXdV0giqZpmqrqurIMRNE0VVVVXVeWgSiapqqqquvKMjBN01RV15VdWQaYpqq6rizLMkBVXdd1ZVm2Aarquq4ry7INcF3XlWVZtm0ArivLsmzbAgAADhwAAAKMoJOMKouw0YQLD0ChISsCgCgAAMAYphRTyjAmIaQQGsYkhBJCJiWVlEqqIKRSUikVhFRSKiWjklJqKVUQUikplQpCKqWVVAAA2IEDANiBhVBoyEoAIA8AgCBGKcYYYwwyphRjzjkHlVKKMeeck4wxxphzzkkpGWPMOeeklIw555xzUkrmnHPOOSmlc84555yUUkrnnHNOSiklhM45J6WU0jnnnBMAAFTgAAAQYKPI5gQjQYWGrAQAUgEADI5jWZqmaZ4nipYkaZrneZ4omqZmSZrmeZ4niqbJ8zxPFEXRNFWV53meKIqiaaoq1xVF0zRNVVVVsiyKpmmaquq6ME3TVFXXdWWYpmmqquu6LmzbVFXVdWUZtq2aqiq7sgxcV3Vl17aB67qu7Nq2AADwBAcAoAIbVkc4KRoLLDRkJQCQAQBAGIOMQgghhRBCCiGElFIICQAAGHAAAAgwoQwUGrISAEgFAACQsdZaa6211kBHKaWUUkqpcIxSSimllFJKKaWUUkoppZRKSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoFAC5VOADoPtiwOsJJ0VhgoSErAYBUAADAGKWYck5CKRVCjDkmIaUWK4QYc05KSjEWzzkHoZTWWiyecw5CKa3FWFTqnJSUWoqtqBQyKSml1mIQwpSUWmultSCEKqnEllprQQhdU2opltiCELa2klKMMQbhg4+xlVhqDD74IFsrMdVaAABmgwMARIINqyOcFI0FFhqyEgAICQAgjFGKMcYYc8455yRjjDHmnHMQQgihZIwx55xzDkIIIZTOOeeccxBCCCGEUkrHnHMOQgghhFBS6pxzEEIIoYQQSiqdcw5CCCGEUkpJpXMQQgihhFBCSSWl1DkIIYQQQikppZRCCCGEEkIoJaWUUgghhBBCKKGklFIKIYRSQgillJRSSimFEEoIpZSSUkkppRJKCSGEUlJJKaUUQggllFJKKimllEoJoYRSSimlpJRSSiGUUEIpBQAAHDgAAAQYQScZVRZhowkXHoBCQ1YCAGQAAJSyUkoorVVAIqUYpNpCR5mDFHOJLHMMWs2lYg4pBq2GyjGlGLQWMgiZUkxKCSV1TCknLcWYSuecpJhzjaVzEAAAAEEAgICQAAADBAUzAMDgAOFzEHQCBEcbAIAgRGaIRMNCcHhQCRARUwFAYoJCLgBUWFykXVxAlwEu6OKuAyEEIQhBLA6ggAQcnHDDE294wg1O0CkqdSAAAAAAAAwA8AAAkFwAERHRzGFkaGxwdHh8gISIjJAIAAAAAAAYAHwAACQlQERENHMYGRobHB0eHyAhIiMkAQCAAAIAAAAAIIAABAQEAAAAAAACAAAABARPZ2dTAARhGAAAAAAAAFUPGmkCAAAAO/2ofAwjXh4fIzYx6uqzbla00kVmK6iQVrrIbAUVUqrKzBmtJH2+gRvgBmJVbdRjKgQGAlI5/X/Ofo9yCQZsoHL6/5z9HuUSDNgAAAAACIDB4P/BQA4NcAAHhzYgQAhyZEChScMgZPzmQwZwkcYjJguOaCaT6Sp/Kand3Luej5yp9HApCHVtClzDUAdARABQMgC00kVNVxCUVrqo6QqCoqpkHqdBZaA+ViWsfXWfDxS00kVNVxDkVrqo6QqCjKoGkDPMI4eZeZZqpq8aZ9AMtNJFzVYQ1Fa6qNkKgqoiGrbSkmkbqXv3aIeKI/3mh4gORh4cy6gShGMZVYJwm9SKkJkzqK64CkyLTGbMGExnzhyrNcyYMQl0nE4rwzDkq0+D/PO1japBzB9E1XqdAUTVep0BnDStQJsDk7gaNQK5UeTMGgwzILIr00nCYH0Gd4wp1aAOEwlvhGwA2nl9c0KAu9LTJUSPIOXVyCVQpPP65oQAd6WnS4geQcqrkUugiC8QZa1eq9eqRUYCAFAWY/oggB0gm5gFWYhtgB6gSIeJS8FxMiAGycBBm2ABURdHBNQRQF0JAJDJ8PhkMplMJtcxH+aYTMhkjut1vXIdkwEAHryuAQAgk/lcyZXZ7Darzd2J3RBRoGf+V69evXJtviwAxOMBNqACAAIoAAAgM2tuRDEpAGAD0Khcc8kAQDgMAKDRbGlmFJENAACaaSYCoJkoAAA6mKlYAAA6TgBwxpkKAIDrBACdBAwA8LyGDACacTIRBoAA/in9zlAB4aA4Vczai/R/roGKBP4+pd8ZKiAcFKeKWXuR/s81UJHAn26QimqtBBQ2MW2QKUBUG+oBegpQ1GslgCIboA3IoId6DZeCg2QgkAyIQR3iYgwursY4RgGEH7/rmjBQwUUVgziioIgrroJRBECGTxaUDEAgvF4nYCagzZa1WbJGkhlJGobRMJpMM0yT0Z/6TFiwa/WXHgAKwAABmgLQiOy5yTVDATQdAACaDYCKrDkyA4A2TgoAAB1mTgpAGycjAAAYZ0yjxAEAmQ6FcQWAR4cHAOhDKACAeGkA0WEaGABQSfYcWSMAHhn9f87rKPpQpe8viN3YXQ08cCAy+v+c11H0oUrfXxC7sbsaeOAAmaAXkPWQ6sBBKRAe/UEYxiuPH7/j9bo+M0cAE31NOzEaVBBMChqRNUdWWTIFGRpCZo7ssuXMUBwgACpJZcmZRQMFQJNxMgoCAGKcjNEAEnoDqEoD1t37wH7KXc7FayXfFzrSQHQ7nxi7yVsKXN6eo7ewMrL+kxn/0wYf0gGXcpEoDSQI4CABFsAJ8AgeGf1/zn9NcuIMGEBk9P85/zXJiTNgAAAAPPz/rwAEHBDgGqgSAgQQAuaOAHj6ELgGOaBqRSpIg+J0EC3U8kFGa5qapr41xuXsTB/BpNn2BcPaFfV5vCYu12wisH/m1IkQmqJLYAKBHAAQBRCgAR75/H/Of01yCQbiZkgoRD7/n/Nfk1yCgbgZEgoAAAAAEADBcPgHQRjEAR4Aj8HFGaAAeIATDng74SYAwgEn8BBHUxA4Tyi3ZtOwTfcbkBQ4DAImJ6AA"],["id","offline-sound-hit","src","data:audio/mpeg;base64,"],["id","offline-sound-reached","src","data:audio/mpeg;base64,"],[1,"runner-container"],["width","600","height","150",1,"runner-canvas",2,"width","600px","height","150px"]],template:function(s,r){1&s&&(ge.TgZ(0,"div",0)(1,"div",1)(2,"h1",2),ge._uU(3,"Press Space to start"),ge.qZA(),ge._UZ(4,"div",3),ge.qZA(),ge.TgZ(5,"div",4)(6,"div",5),ge._UZ(7,"div",6),ge.qZA(),ge.TgZ(8,"div",7),ge._UZ(9,"img",8)(10,"img",9),ge.TgZ(11,"template",10),ge._uU(12,"\n        "),ge._UZ(13,"audio",11),ge._uU(14,"\n        "),ge._UZ(15,"audio",12),ge._uU(16,"\n        "),ge._UZ(17,"audio",13),ge._uU(18,"\n      "),ge.qZA()(),ge.TgZ(19,"div",14),ge._UZ(20,"canvas",15),ge.qZA()()())},styles:["body.dark-mode[_ngcontent-%COMP%]{background:black;color:#fff}.uiMode[_ngcontent-%COMP%]{position:absolute;width:100px;left:10px;bottom:10px;background:#171717;color:#fff}.icon[_ngcontent-%COMP%]{-webkit-user-select:none;user-select:none;display:inline-block}.icon-offline[_ngcontent-%COMP%]{position:relative}.hidden[_ngcontent-%COMP%]{display:none}.offline[_ngcontent-%COMP%]   .interstitial-wrapper[_ngcontent-%COMP%]{color:#2b2b2b;font-size:1em;line-height:1.55;margin:0 auto;max-width:600px;padding-top:100px;width:100%}.offline[_ngcontent-%COMP%]   .runner-container[_ngcontent-%COMP%]{height:150px;max-width:600px;overflow:hidden;position:absolute;top:35px;width:44px}.offline[_ngcontent-%COMP%]   .runner-canvas[_ngcontent-%COMP%]{height:150px;max-width:600px;opacity:1;overflow:hidden;position:absolute;top:0;z-index:2}.offline[_ngcontent-%COMP%]   .controller[_ngcontent-%COMP%]{background:rgba(247,247,247,.1);height:100vh;left:0;position:absolute;top:0;width:100vw;z-index:1}#offline-resources[_ngcontent-%COMP%]{display:none}@media (max-width: 420px){.suggested-left[_ngcontent-%COMP%] > #control-buttons[_ngcontent-%COMP%], .suggested-right[_ngcontent-%COMP%] > #control-buttons[_ngcontent-%COMP%]{float:none}.snackbar[_ngcontent-%COMP%]{left:0;bottom:0;width:100%;border-radius:0}}@media (max-height: 350px){h1[_ngcontent-%COMP%]{margin:0 0 15px}.icon-offline[_ngcontent-%COMP%]{margin:0 0 10px}.interstitial-wrapper[_ngcontent-%COMP%]{margin-top:5%}.nav-wrapper[_ngcontent-%COMP%]{margin-top:30px}}@media (min-width: 600px) and (max-width: 736px) and (orientation: landscape){.offline[_ngcontent-%COMP%]   .interstitial-wrapper[_ngcontent-%COMP%]{margin-left:0;margin-right:0}}@media (min-width: 420px) and (max-width: 736px) and (min-height: 240px) and (max-height: 420px) and (orientation: landscape){.interstitial-wrapper[_ngcontent-%COMP%]{margin-bottom:100px}}@media (min-height: 240px) and (orientation: landscape){.offline[_ngcontent-%COMP%]   .interstitial-wrapper[_ngcontent-%COMP%]{margin-bottom:90px}.icon-offline[_ngcontent-%COMP%]{margin-bottom:20px}}@media (max-height: 320px) and (orientation: landscape){.icon-offline[_ngcontent-%COMP%]{margin-bottom:0}.offline[_ngcontent-%COMP%]   .runner-container[_ngcontent-%COMP%]{top:10px}}@media (max-width: 240px){.interstitial-wrapper[_ngcontent-%COMP%]{overflow:inherit;padding:0 8px}}.arcade-mode[_ngcontent-%COMP%], .arcade-mode[_ngcontent-%COMP%]   .runner-container[_ngcontent-%COMP%], .arcade-mode[_ngcontent-%COMP%]   .runner-canvas[_ngcontent-%COMP%]{image-rendering:pixelated;max-width:100%;overflow:hidden}.arcade-mode[_ngcontent-%COMP%]   #buttons[_ngcontent-%COMP%], .arcade-mode[_ngcontent-%COMP%]   #main-content[_ngcontent-%COMP%]{opacity:0;overflow:hidden}.arcade-mode[_ngcontent-%COMP%]   .interstitial-wrapper[_ngcontent-%COMP%]{height:100vh;max-width:100%;overflow:hidden}.arcade-mode[_ngcontent-%COMP%]   .runner-container[_ngcontent-%COMP%]{left:0;margin:auto;right:0;transform-origin:top center;transition:transform .25s cubic-bezier(.4,0,1,1) .4s;z-index:2}"]}),t})();const b5=[{path:"",component:(()=>{var n;class t{constructor(){}ngOnInit(){}}return(n=t).\u0275fac=function(s){return new(s||n)},n.\u0275cmp=ge.Xpm({type:n,selectors:[["app-home"]],decls:11,vars:2,consts:[[3,"translucent"],[3,"fullscreen"],["collapse","condense"],["size","large"],["id","container"]],template:function(s,r){1&s&&(ge.TgZ(0,"ion-header",0)(1,"ion-toolbar")(2,"ion-title"),ge._uU(3," Victor Barbosa - AI Playing t-rex-dino-chrome "),ge.qZA()()(),ge.TgZ(4,"ion-content",1)(5,"ion-header",2)(6,"ion-toolbar")(7,"ion-title",3),ge._uU(8,"Victor Barbosa - AI Playing t-rex-dino-chrome"),ge.qZA()()(),ge.TgZ(9,"div",4),ge._UZ(10,"app-dino-game"),ge.qZA()()),2&s&&(ge.Q6J("translucent",!0),ge.xp6(4),ge.Q6J("fullscreen",!0))},dependencies:[De.W2,De.Gu,De.wd,De.sr,x5],styles:["#container[_ngcontent-%COMP%]{text-align:center;position:absolute;left:0;right:0;top:50%;transform:translateY(-50%)}#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%]{font-size:20px;line-height:26px}#container[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:16px;line-height:22px;color:#8c8c8c;margin:0}#container[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:none}"]}),t})()}];let w5=(()=>{var n;class t{}return(n=t).\u0275fac=function(s){return new(s||n)},n.\u0275mod=ge.oAB({type:n}),n.\u0275inj=ge.cJS({imports:[Ke.Bz.forChild(b5),Ke.Bz]}),t})();var I5=j(8132);class hg{validate(t=null,e){if(t){if(e)return!0;throw console.error("The canvas is or invalid or empty/null"),new Error("The canvas is or invalid or empty/null")}throw console.error("The model is or invalid or empty/null"),new Error("The model is or invalid or empty/null")}predictPrivate(t,e,s,r,o){return(0,q.Z)(function*(){return yield(new hg).predict(t,e,s,r,o)})()}predict(t,e,s,r,o){var i=this;return(0,q.Z)(function*(){if(i.validate(t,e)){const a=s,l=U(()=>kA(e).resizeNearestNeighbor([r,o]).toFloat().expandDims().div(225)),u=null==t?void 0:t.predict(l);let{scores:c,predictions:h}=yield i.getScore(u,a);if(c.shape[0]>0){const p=i.getClassIds(h),f=i.getBoxes(h,e,{width:r,height:o}),g=i.nms(f,c,.3);if(f.shape[0]>0){const m=i.xywh2xyxy(f.arraySync());return i.prepareReturn(m,p,c,g)}return l.dispose(),u.dispose(),p.dispose(),f.dispose(),ze(),lA(),null}return null}return null})()}getScore(t,e){return(0,q.Z)(function*(){let s=t.squeeze().transpose();const r=s.slice([0,4],[-1,-1]);let o=Gn(r,1);const i=En(o,e);return s=yield Kp(s,i),o=yield Kp(o,i),{scores:o,predictions:s}})()}getClassIds(t){return Yr(t.slice([0,(t.shape[1]||0)-3],[-1,3]),1)}getBoxes(t,e,s={width:640,height:480}){let r=t.slice([0,0],[-1,4]);const o=s.width,i=s.height,a=e.width,l=e.height,u=mn([o,i,o,i],"float32");return r=r.div(u),r=r.mul([a,l,a,l]),r}nms(t,e,s){const r=t.arraySync(),o=e.arraySync();let i=this.argSorf(o);const a=[];for(;i.length>0;){const l=i[0];a.push(l);const u=r[l],h=i.slice(i.length>1?1:0).map(p=>r[p]);this.compute_iou(u,h).reduce((p,f,g)=>(f<s&&p.push(g),p),[]),i=i.slice(1)}return a}compute_iou(t,e){const s=St(e).slice([0,0],[-1,1]).arraySync(),r=St(e).slice([0,1],[-1,1]).arraySync(),o=St(e).slice([0,2],[-1,1]).arraySync(),i=St(e).slice([0,3],[-1,1]).arraySync(),a=t[0],l=t[1],u=t[2],c=t[3],h=St(s.map(I=>Math.max(I,a))),d=St(r.map(I=>Math.max(I,l))),p=St(o.map(I=>Math.min(I,u))),f=St(i.map(I=>Math.min(I,c))),g=ys(0,p.sub(h)).mul(ys(0,f.sub(d))),m=St((u-a)*(c-l)),A=St(o).sub(St(s)).mul(St(i).sub(r)),x=m.add(A).transpose().sub(g);return g.div(x).dataSync()}xywh2xyxy(t){return{boxes:t.map(s=>[s[0]-s[2]/2,s[1]-s[3]/2,s[0]+s[2]/2,s[1]+s[3]/2]).map(s=>({x:s[0],y:s[1],width:s[2],height:s[3]}))}}argSorf(t){return t.map((e,s)=>({value:e,index:s})).sort((e,s)=>e.value-s.value).map(e=>e.index).reverse()}prepareReturn(t,e,s,r){return r.map(o=>({box:t.boxes[o],classeId:e.arraySync()[o],score:100*s.arraySync()[o]}))}getTypePredictedClass(t,e){let s=[];return t.reduce((r,o)=>{const{classeId:i}=o;return r[i]||(r[i]=!0,s.push({classeId:i})),r},{}),s.map(r=>e[r.classeId])}createBoundingBox(t,e=!1,s,r=!1,o,i="red",a=2,l=!1){const u=o.getContext("2d");let c=[];t.reduce((h,d)=>{const{classeId:p}=d;return h[p]||(h[p]=!0,c.push({classeId:p})),h},{}),null!=u&&c.forEach(h=>{const d=h.classeId,p=t.filter(g=>g.classeId===d).reduce((g,m)=>m.score>g?m.score:g,-1/0),f=t.find(g=>g.classeId===d&&g.score===p);f&&(l&&console.log(f,`${s[f.classeId]} ${f.score.toFixed(2)}%`),u.strokeStyle=i,u.lineWidth=a,r&&u.fillText(`${s[f.classeId]} ${f.score.toFixed(2)}%`,f.box.x,f.box.y-5),e&&u.strokeRect(f.box.x,f.box.y,f.box.width-f.box.x,f.box.height-f.box.y))})}}let C5=(()=>{class n extends hg{constructor(){super()}predict(e,s,r,o,i){var a=this;return(0,q.Z)(function*(){return yield a.predictPrivate(e,s,r,o,i)})()}predictObservable(e,s,r,o,i){return new I5.y(a=>{if(this.validate(e,s)){const l=r,u=U(()=>kA(s).resizeNearestNeighbor([o,i]).toFloat().expandDims().div(225)),c=null==e?void 0:e.predict(u);this.getScore(c,l).then(({scores:h,predictions:d})=>{if(h.shape[0]>0){const f=this.getClassIds(d),g=this.getBoxes(d,s,{width:o,height:i}),m=this.nms(g,h,.8);if(g.shape[0]>0){const A=this.xywh2xyxy(g.arraySync()),y=this.prepareReturn(A,f,h,m);a.next(y),a.complete(),a.unsubscribe()}u.dispose(),c.dispose(),f.dispose(),g.dispose(),ze(),lA()}})}})}}return n.\u0275fac=function(e){return new(e||n)},n.\u0275prov=ge.Yz7({token:n,factory:n.\u0275fac,providedIn:"root"}),n})(),v5=(()=>{class n{}return n.\u0275fac=function(e){return new(e||n)},n.\u0275mod=ge.oAB({type:n}),n.\u0275inj=ge.cJS({providers:[C5]}),n})(),S5=(()=>{var n;class t{}return(n=t).\u0275fac=function(s){return new(s||n)},n.\u0275mod=ge.oAB({type:n}),n.\u0275inj=ge.cJS({imports:[me.ez,tt.u5,De.Pc,w5,v5]}),t})()},5410:()=>{},8628:()=>{},1601:()=>{},7792:()=>{},4977:()=>{},5042:()=>{}}]);